{
  "version": 3,
  "sources": ["../../../../../../node_modules/@tanstack/react-virtual/build/lib/_virtual/_rollupPluginBabelHelpers.esm.js", "../../../../../../node_modules/@tanstack/virtual-core/build/lib/_virtual/_rollupPluginBabelHelpers.esm.js", "../../../../../../node_modules/@tanstack/virtual-core/src/utils.ts", "../../../../../../node_modules/@tanstack/virtual-core/src/index.ts", "../../../../../../node_modules/@tanstack/react-virtual/src/index.tsx"],
  "sourcesContent": ["/**\n * react-virtual\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nexport { _extends as extends };\n//# sourceMappingURL=_rollupPluginBabelHelpers.esm.js.map\n", "/**\n * virtual-core\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nexport { _extends as extends };\n//# sourceMappingURL=_rollupPluginBabelHelpers.esm.js.map\n", "export type NoInfer<A extends any> = [A][A extends any ? 0 : never]\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: false | string\n    debug?: () => any\n    onChange?: (result: TResult) => void\n    initialDeps?: TDeps\n  },\n) {\n  let deps = opts.initialDeps ?? []\n  let result: TResult | undefined\n\n  return (): TResult => {\n    let depTime: number\n    if (opts.key && opts.debug?.()) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug?.()) resultTime = Date.now()\n\n    result = fn(...newDeps)\n\n    if (opts.key && opts.debug?.()) {\n      const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n      const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n      const resultFpsPercentage = resultEndTime / 16\n\n      const pad = (str: number | string, num: number) => {\n        str = String(str)\n        while (str.length < num) {\n          str = ' ' + str\n        }\n        return str\n      }\n\n      console.info(\n        `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n        `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120),\n            )}deg 100% 31%);`,\n        opts?.key,\n      )\n    }\n\n    opts?.onChange?.(result)\n\n    return result!\n  }\n}\n\nexport function notUndefined<T>(value: T | undefined, msg?: string): T {\n  if (value === undefined) {\n    throw new Error(`Unexpected undefined${msg ? `: ${msg}` : ''}`)\n  } else {\n    return value\n  }\n}\n\nexport const approxEqual = (a: number, b: number) => Math.abs(a - b) < 1\n", "import { approxEqual, memo, notUndefined } from './utils'\n\nexport * from './utils'\n\n//\n\ntype ScrollDirection = 'forward' | 'backward'\n\ntype ScrollAlignment = 'start' | 'center' | 'end' | 'auto'\n\ntype ScrollBehavior = 'auto' | 'smooth'\n\nexport interface ScrollToOptions {\n  align?: ScrollAlignment\n  behavior?: ScrollBehavior\n}\n\ntype ScrollToOffsetOptions = ScrollToOptions\n\ntype ScrollToIndexOptions = ScrollToOptions\n\nexport interface Range {\n  startIndex: number\n  endIndex: number\n  overscan: number\n  count: number\n}\n\ntype Key = number | string\n\nexport interface VirtualItem {\n  key: Key\n  index: number\n  start: number\n  end: number\n  size: number\n  lane: number\n}\n\ninterface Rect {\n  width: number\n  height: number\n}\n\n//\n\nexport const defaultKeyExtractor = (index: number) => index\n\nexport const defaultRangeExtractor = (range: Range) => {\n  const start = Math.max(range.startIndex - range.overscan, 0)\n  const end = Math.min(range.endIndex + range.overscan, range.count - 1)\n\n  const arr = []\n\n  for (let i = start; i <= end; i++) {\n    arr.push(i)\n  }\n\n  return arr\n}\n\nexport const observeElementRect = <T extends Element>(\n  instance: Virtualizer<T, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = (rect: Rect) => {\n    const { width, height } = rect\n    cb({ width: Math.round(width), height: Math.round(height) })\n  }\n\n  handler(element.getBoundingClientRect())\n\n  const observer = new ResizeObserver((entries) => {\n    const entry = entries[0]\n    if (entry?.borderBoxSize) {\n      const box = entry.borderBoxSize[0]\n      if (box) {\n        handler({ width: box.inlineSize, height: box.blockSize })\n        return\n      }\n    }\n    handler(element.getBoundingClientRect())\n  })\n\n  observer.observe(element, { box: 'border-box' })\n\n  return () => {\n    observer.unobserve(element)\n  }\n}\n\nexport const observeWindowRect = (\n  instance: Virtualizer<Window, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = () => {\n    cb({ width: element.innerWidth, height: element.innerHeight })\n  }\n  handler()\n\n  element.addEventListener('resize', handler, {\n    passive: true,\n  })\n\n  return () => {\n    element.removeEventListener('resize', handler)\n  }\n}\n\nexport const observeElementOffset = <T extends Element>(\n  instance: Virtualizer<T, any>,\n  cb: (offset: number) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = () => {\n    cb(element[instance.options.horizontal ? 'scrollLeft' : 'scrollTop'])\n  }\n  handler()\n\n  element.addEventListener('scroll', handler, {\n    passive: true,\n  })\n\n  return () => {\n    element.removeEventListener('scroll', handler)\n  }\n}\n\nexport const observeWindowOffset = (\n  instance: Virtualizer<Window, any>,\n  cb: (offset: number) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = () => {\n    cb(element[instance.options.horizontal ? 'scrollX' : 'scrollY'])\n  }\n  handler()\n\n  element.addEventListener('scroll', handler, {\n    passive: true,\n  })\n\n  return () => {\n    element.removeEventListener('scroll', handler)\n  }\n}\n\nexport const measureElement = <TItemElement extends Element>(\n  element: TItemElement,\n  entry: ResizeObserverEntry | undefined,\n  instance: Virtualizer<any, TItemElement>,\n) => {\n  if (entry?.borderBoxSize) {\n    const box = entry.borderBoxSize[0]\n    if (box) {\n      const size = Math.round(\n        box[instance.options.horizontal ? 'inlineSize' : 'blockSize'],\n      )\n      return size\n    }\n  }\n  return Math.round(\n    element.getBoundingClientRect()[\n      instance.options.horizontal ? 'width' : 'height'\n    ],\n  )\n}\n\nexport const windowScroll = <T extends Window>(\n  offset: number,\n  {\n    adjustments = 0,\n    behavior,\n  }: { adjustments?: number; behavior?: ScrollBehavior },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset = offset + adjustments\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport const elementScroll = <T extends Element>(\n  offset: number,\n  {\n    adjustments = 0,\n    behavior,\n  }: { adjustments?: number; behavior?: ScrollBehavior },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset = offset + adjustments\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport interface VirtualizerOptions<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  // Required from the user\n  count: number\n  getScrollElement: () => TScrollElement | null\n  estimateSize: (index: number) => number\n\n  // Required from the framework adapter (but can be overridden)\n  scrollToFn: (\n    offset: number,\n    options: { adjustments?: number; behavior?: ScrollBehavior },\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => void\n  observeElementRect: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (rect: Rect) => void,\n  ) => void | (() => void)\n  observeElementOffset: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (offset: number) => void,\n  ) => void | (() => void)\n\n  // Optional\n  debug?: any\n  initialRect?: Rect\n  onChange?: (instance: Virtualizer<TScrollElement, TItemElement>) => void\n  measureElement?: (\n    element: TItemElement,\n    entry: ResizeObserverEntry | undefined,\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => number\n  overscan?: number\n  horizontal?: boolean\n  paddingStart?: number\n  paddingEnd?: number\n  scrollPaddingStart?: number\n  scrollPaddingEnd?: number\n  initialOffset?: number\n  getItemKey?: (index: number) => Key\n  rangeExtractor?: (range: Range) => number[]\n  scrollMargin?: number\n  scrollingDelay?: number\n  indexAttribute?: string\n  initialMeasurementsCache?: VirtualItem[]\n  lanes?: number\n}\n\nexport class Virtualizer<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  private unsubs: (void | (() => void))[] = []\n  options!: Required<VirtualizerOptions<TScrollElement, TItemElement>>\n  scrollElement: TScrollElement | null = null\n  isScrolling: boolean = false\n  private isScrollingTimeoutId: ReturnType<typeof setTimeout> | null = null\n  private scrollToIndexTimeoutId: ReturnType<typeof setTimeout> | null = null\n  measurementsCache: VirtualItem[] = []\n  private itemSizeCache = new Map<Key, number>()\n  private pendingMeasuredCacheIndexes: number[] = []\n  private scrollRect: Rect\n  scrollOffset: number\n  scrollDirection: ScrollDirection | null = null\n  private scrollAdjustments: number = 0\n  measureElementCache = new Map<Key, TItemElement>()\n  private observer = (() => {\n    let _ro: ResizeObserver | null = null\n\n    const get = () => {\n      if (_ro) {\n        return _ro\n      } else if (typeof ResizeObserver !== 'undefined') {\n        return (_ro = new ResizeObserver((entries) => {\n          entries.forEach((entry) => {\n            this._measureElement(entry.target as TItemElement, entry)\n          })\n        }))\n      } else {\n        return null\n      }\n    }\n\n    return {\n      disconnect: () => get()?.disconnect(),\n      observe: (target: Element) =>\n        get()?.observe(target, { box: 'border-box' }),\n      unobserve: (target: Element) => get()?.unobserve(target),\n    }\n  })()\n  range: { startIndex: number; endIndex: number } = {\n    startIndex: 0,\n    endIndex: 0,\n  }\n\n  constructor(opts: VirtualizerOptions<TScrollElement, TItemElement>) {\n    this.setOptions(opts)\n    this.scrollRect = this.options.initialRect\n    this.scrollOffset = this.options.initialOffset\n    this.measurementsCache = this.options.initialMeasurementsCache\n    this.measurementsCache.forEach((item) => {\n      this.itemSizeCache.set(item.key, item.size)\n    })\n\n    this.maybeNotify()\n  }\n\n  setOptions = (opts: VirtualizerOptions<TScrollElement, TItemElement>) => {\n    Object.entries(opts).forEach(([key, value]) => {\n      if (typeof value === 'undefined') delete (opts as any)[key]\n    })\n\n    this.options = {\n      debug: false,\n      initialOffset: 0,\n      overscan: 1,\n      paddingStart: 0,\n      paddingEnd: 0,\n      scrollPaddingStart: 0,\n      scrollPaddingEnd: 0,\n      horizontal: false,\n      getItemKey: defaultKeyExtractor,\n      rangeExtractor: defaultRangeExtractor,\n      onChange: () => {},\n      measureElement,\n      initialRect: { width: 0, height: 0 },\n      scrollMargin: 0,\n      scrollingDelay: 150,\n      indexAttribute: 'data-index',\n      initialMeasurementsCache: [],\n      lanes: 1,\n      ...opts,\n    }\n  }\n\n  private notify = () => {\n    this.options.onChange?.(this)\n  }\n\n  private cleanup = () => {\n    this.unsubs.filter(Boolean).forEach((d) => d!())\n    this.unsubs = []\n    this.scrollElement = null\n  }\n\n  _didMount = () => {\n    this.measureElementCache.forEach(this.observer.observe)\n    return () => {\n      this.observer.disconnect()\n      this.cleanup()\n    }\n  }\n\n  _willUpdate = () => {\n    const scrollElement = this.options.getScrollElement()\n\n    if (this.scrollElement !== scrollElement) {\n      this.cleanup()\n\n      this.scrollElement = scrollElement\n\n      this._scrollToOffset(this.scrollOffset, {\n        adjustments: undefined,\n        behavior: undefined,\n      })\n\n      this.unsubs.push(\n        this.options.observeElementRect(this, (rect) => {\n          const prev = this.scrollRect\n          this.scrollRect = rect\n          if (\n            this.options.horizontal\n              ? rect.width !== prev.width\n              : rect.height !== prev.height\n          ) {\n            this.maybeNotify()\n          }\n        }),\n      )\n\n      this.unsubs.push(\n        this.options.observeElementOffset(this, (offset) => {\n          this.scrollAdjustments = 0\n\n          if (this.scrollOffset === offset) {\n            return\n          }\n\n          if (this.isScrollingTimeoutId !== null) {\n            clearTimeout(this.isScrollingTimeoutId)\n            this.isScrollingTimeoutId = null\n          }\n\n          this.isScrolling = true\n          this.scrollDirection =\n            this.scrollOffset < offset ? 'forward' : 'backward'\n          this.scrollOffset = offset\n\n          this.maybeNotify()\n\n          this.isScrollingTimeoutId = setTimeout(() => {\n            this.isScrollingTimeoutId = null\n            this.isScrolling = false\n            this.scrollDirection = null\n\n            this.maybeNotify()\n          }, this.options.scrollingDelay)\n        }),\n      )\n    }\n  }\n\n  private getSize = () => {\n    return this.scrollRect[this.options.horizontal ? 'width' : 'height']\n  }\n\n  private memoOptions = memo(\n    () => [\n      this.options.count,\n      this.options.paddingStart,\n      this.options.scrollMargin,\n      this.options.getItemKey,\n    ],\n    (count, paddingStart, scrollMargin, getItemKey) => {\n      this.pendingMeasuredCacheIndexes = []\n      return {\n        count,\n        paddingStart,\n        scrollMargin,\n        getItemKey,\n      }\n    },\n    {\n      key: false,\n    },\n  )\n\n  private getFurthestMeasurement = (\n    measurements: VirtualItem[],\n    index: number,\n  ) => {\n    const furthestMeasurementsFound = new Map<number, true>()\n    const furthestMeasurements = new Map<number, VirtualItem>()\n    for (let m = index - 1; m >= 0; m--) {\n      const measurement = measurements[m]!\n\n      if (furthestMeasurementsFound.has(measurement.lane)) {\n        continue\n      }\n\n      const previousFurthestMeasurement = furthestMeasurements.get(\n        measurement.lane,\n      )\n      if (\n        previousFurthestMeasurement == null ||\n        measurement.end > previousFurthestMeasurement.end\n      ) {\n        furthestMeasurements.set(measurement.lane, measurement)\n      } else if (measurement.end < previousFurthestMeasurement.end) {\n        furthestMeasurementsFound.set(measurement.lane, true)\n      }\n\n      if (furthestMeasurementsFound.size === this.options.lanes) {\n        break\n      }\n    }\n\n    return furthestMeasurements.size === this.options.lanes\n      ? Array.from(furthestMeasurements.values()).sort(\n          (a, b) => a.end - b.end,\n        )[0]\n      : undefined\n  }\n\n  private getMeasurements = memo(\n    () => [this.memoOptions(), this.itemSizeCache],\n    ({ count, paddingStart, scrollMargin, getItemKey }, itemSizeCache) => {\n      const min =\n        this.pendingMeasuredCacheIndexes.length > 0\n          ? Math.min(...this.pendingMeasuredCacheIndexes)\n          : 0\n      this.pendingMeasuredCacheIndexes = []\n\n      const measurements = this.measurementsCache.slice(0, min)\n\n      for (let i = min; i < count; i++) {\n        const key = getItemKey(i)\n\n        const furthestMeasurement =\n          this.options.lanes === 1\n            ? measurements[i - 1]\n            : this.getFurthestMeasurement(measurements, i)\n\n        const start = furthestMeasurement\n          ? furthestMeasurement.end\n          : paddingStart + scrollMargin\n\n        const measuredSize = itemSizeCache.get(key)\n        const size =\n          typeof measuredSize === 'number'\n            ? measuredSize\n            : this.options.estimateSize(i)\n\n        const end = start + size\n\n        const lane = furthestMeasurement\n          ? furthestMeasurement.lane\n          : i % this.options.lanes\n\n        measurements[i] = {\n          index: i,\n          start,\n          size,\n          end,\n          key,\n          lane,\n        }\n      }\n\n      this.measurementsCache = measurements\n\n      return measurements\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getMeasurements',\n      debug: () => this.options.debug,\n    },\n  )\n\n  calculateRange = memo(\n    () => [this.getMeasurements(), this.getSize(), this.scrollOffset],\n    (measurements, outerSize, scrollOffset) => {\n      return (this.range = calculateRange({\n        measurements,\n        outerSize,\n        scrollOffset,\n      }))\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'calculateRange',\n      debug: () => this.options.debug,\n    },\n  )\n\n  private maybeNotify = memo(\n    () => {\n      const range = this.calculateRange()\n\n      return [range.startIndex, range.endIndex, this.isScrolling]\n    },\n    () => {\n      this.notify()\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'maybeNotify',\n      debug: () => this.options.debug,\n      initialDeps: [\n        this.range.startIndex,\n        this.range.endIndex,\n        this.isScrolling,\n      ],\n    },\n  )\n\n  private getIndexes = memo(\n    () => [\n      this.options.rangeExtractor,\n      this.calculateRange(),\n      this.options.overscan,\n      this.options.count,\n    ],\n    (rangeExtractor, range, overscan, count) => {\n      return rangeExtractor({\n        ...range,\n        overscan,\n        count,\n      })\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  indexFromElement = (node: TItemElement) => {\n    const attributeName = this.options.indexAttribute\n    const indexStr = node.getAttribute(attributeName)\n\n    if (!indexStr) {\n      console.warn(\n        `Missing attribute name '${attributeName}={index}' on measured element.`,\n      )\n      return -1\n    }\n\n    return parseInt(indexStr, 10)\n  }\n\n  private _measureElement = (\n    node: TItemElement,\n    entry: ResizeObserverEntry | undefined,\n  ) => {\n    const index = this.indexFromElement(node)\n\n    const item = this.measurementsCache[index]\n    if (!item) {\n      return\n    }\n\n    const prevNode = this.measureElementCache.get(item.key)\n\n    if (!node.isConnected) {\n      this.observer.unobserve(node)\n      if (node === prevNode) {\n        this.measureElementCache.delete(item.key)\n      }\n      return\n    }\n\n    if (prevNode !== node) {\n      if (prevNode) {\n        this.observer.unobserve(prevNode)\n      }\n      this.observer.observe(node)\n      this.measureElementCache.set(item.key, node)\n    }\n\n    const measuredItemSize = this.options.measureElement(node, entry, this)\n\n    const itemSize = this.itemSizeCache.get(item.key) ?? item.size\n\n    const delta = measuredItemSize - itemSize\n\n    if (delta !== 0) {\n      if (item.start < this.scrollOffset) {\n        if (process.env.NODE_ENV !== 'production' && this.options.debug) {\n          console.info('correction', delta)\n        }\n\n        this._scrollToOffset(this.scrollOffset, {\n          adjustments: (this.scrollAdjustments += delta),\n          behavior: undefined,\n        })\n      }\n\n      this.pendingMeasuredCacheIndexes.push(index)\n\n      this.itemSizeCache = new Map(\n        this.itemSizeCache.set(item.key, measuredItemSize),\n      )\n\n      this.notify()\n    }\n  }\n\n  measureElement = (node: TItemElement | null) => {\n    if (!node) {\n      return\n    }\n\n    this._measureElement(node, undefined)\n  }\n\n  getVirtualItems = memo(\n    () => [this.getIndexes(), this.getMeasurements()],\n    (indexes, measurements) => {\n      const virtualItems: VirtualItem[] = []\n\n      for (let k = 0, len = indexes.length; k < len; k++) {\n        const i = indexes[k]!\n        const measurement = measurements[i]!\n\n        virtualItems.push(measurement)\n      }\n\n      return virtualItems\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  getVirtualItemForOffset = (offset: number) => {\n    const measurements = this.getMeasurements()\n\n    return notUndefined(\n      measurements[\n        findNearestBinarySearch(\n          0,\n          measurements.length - 1,\n          (index: number) => notUndefined(measurements[index]).start,\n          offset,\n        )\n      ],\n    )\n  }\n\n  getOffsetForAlignment = (toOffset: number, align: ScrollAlignment) => {\n    const size = this.getSize()\n\n    if (align === 'auto') {\n      if (toOffset <= this.scrollOffset) {\n        align = 'start'\n      } else if (toOffset >= this.scrollOffset + size) {\n        align = 'end'\n      } else {\n        align = 'start'\n      }\n    }\n\n    if (align === 'start') {\n      toOffset = toOffset\n    } else if (align === 'end') {\n      toOffset = toOffset - size\n    } else if (align === 'center') {\n      toOffset = toOffset - size / 2\n    }\n\n    const scrollSizeProp = this.options.horizontal\n      ? 'scrollWidth'\n      : 'scrollHeight'\n    const scrollSize = this.scrollElement\n      ? 'document' in this.scrollElement\n        ? this.scrollElement.document.documentElement[scrollSizeProp]\n        : this.scrollElement[scrollSizeProp]\n      : 0\n\n    const maxOffset = scrollSize - this.getSize()\n\n    return Math.max(Math.min(maxOffset, toOffset), 0)\n  }\n\n  getOffsetForIndex = (index: number, align: ScrollAlignment = 'auto') => {\n    index = Math.max(0, Math.min(index, this.options.count - 1))\n\n    const measurement = notUndefined(this.getMeasurements()[index])\n\n    if (align === 'auto') {\n      if (\n        measurement.end >=\n        this.scrollOffset + this.getSize() - this.options.scrollPaddingEnd\n      ) {\n        align = 'end'\n      } else if (\n        measurement.start <=\n        this.scrollOffset + this.options.scrollPaddingStart\n      ) {\n        align = 'start'\n      } else {\n        return [this.scrollOffset, align] as const\n      }\n    }\n\n    const toOffset =\n      align === 'end'\n        ? measurement.end + this.options.scrollPaddingEnd\n        : measurement.start - this.options.scrollPaddingStart\n\n    return [this.getOffsetForAlignment(toOffset, align), align] as const\n  }\n\n  private isDynamicMode = () => this.measureElementCache.size > 0\n\n  private cancelScrollToIndex = () => {\n    if (this.scrollToIndexTimeoutId !== null) {\n      clearTimeout(this.scrollToIndexTimeoutId)\n      this.scrollToIndexTimeoutId = null\n    }\n  }\n\n  scrollToOffset = (\n    toOffset: number,\n    { align = 'start', behavior }: ScrollToOffsetOptions = {},\n  ) => {\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    this._scrollToOffset(this.getOffsetForAlignment(toOffset, align), {\n      adjustments: undefined,\n      behavior,\n    })\n  }\n\n  scrollToIndex = (\n    index: number,\n    { align: initialAlign = 'auto', behavior }: ScrollToIndexOptions = {},\n  ) => {\n    index = Math.max(0, Math.min(index, this.options.count - 1))\n\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    const [toOffset, align] = this.getOffsetForIndex(index, initialAlign)\n\n    this._scrollToOffset(toOffset, { adjustments: undefined, behavior })\n\n    if (behavior !== 'smooth' && this.isDynamicMode()) {\n      this.scrollToIndexTimeoutId = setTimeout(() => {\n        this.scrollToIndexTimeoutId = null\n\n        const elementInDOM = this.measureElementCache.has(\n          this.options.getItemKey(index),\n        )\n\n        if (elementInDOM) {\n          const [toOffset] = this.getOffsetForIndex(index, align)\n\n          if (!approxEqual(toOffset, this.scrollOffset)) {\n            this.scrollToIndex(index, { align, behavior })\n          }\n        } else {\n          this.scrollToIndex(index, { align, behavior })\n        }\n      })\n    }\n  }\n\n  scrollBy = (delta: number, { behavior }: ScrollToOffsetOptions = {}) => {\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    this._scrollToOffset(this.scrollOffset + delta, {\n      adjustments: undefined,\n      behavior,\n    })\n  }\n\n  getTotalSize = () =>\n    (this.getMeasurements()[this.options.count - 1]?.end ||\n      this.options.paddingStart) -\n    this.options.scrollMargin +\n    this.options.paddingEnd\n\n  private _scrollToOffset = (\n    offset: number,\n    {\n      adjustments,\n      behavior,\n    }: {\n      adjustments: number | undefined\n      behavior: ScrollBehavior | undefined\n    },\n  ) => {\n    this.options.scrollToFn(offset, { behavior, adjustments }, this)\n  }\n\n  measure = () => {\n    this.itemSizeCache = new Map()\n    this.notify()\n  }\n}\n\nconst findNearestBinarySearch = (\n  low: number,\n  high: number,\n  getCurrentValue: (i: number) => number,\n  value: number,\n) => {\n  while (low <= high) {\n    const middle = ((low + high) / 2) | 0\n    const currentValue = getCurrentValue(middle)\n\n    if (currentValue < value) {\n      low = middle + 1\n    } else if (currentValue > value) {\n      high = middle - 1\n    } else {\n      return middle\n    }\n  }\n\n  if (low > 0) {\n    return low - 1\n  } else {\n    return 0\n  }\n}\n\nfunction calculateRange({\n  measurements,\n  outerSize,\n  scrollOffset,\n}: {\n  measurements: VirtualItem[]\n  outerSize: number\n  scrollOffset: number\n}) {\n  const count = measurements.length - 1\n  const getOffset = (index: number) => measurements[index]!.start\n\n  const startIndex = findNearestBinarySearch(0, count, getOffset, scrollOffset)\n  let endIndex = startIndex\n\n  while (\n    endIndex < count &&\n    measurements[endIndex]!.end < scrollOffset + outerSize\n  ) {\n    endIndex++\n  }\n\n  return { startIndex, endIndex }\n}\n", "import * as React from 'react'\nimport {\n  elementScroll,\n  observeElementOffset,\n  observeElementRect,\n  observeWindowOffset,\n  observeWindowRect,\n  PartialKeys,\n  Virtualizer,\n  VirtualizerOptions,\n  windowScroll,\n} from '@tanstack/virtual-core'\nexport * from '@tanstack/virtual-core'\n\n//\n\nconst useIsomorphicLayoutEffect =\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nfunction useVirtualizerBase<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n>(\n  options: VirtualizerOptions<TScrollElement, TItemElement>,\n): Virtualizer<TScrollElement, TItemElement> {\n  const rerender = React.useReducer(() => ({}), {})[1]\n\n  const resolvedOptions: VirtualizerOptions<TScrollElement, TItemElement> = {\n    ...options,\n    onChange: (instance) => {\n      rerender()\n      options.onChange?.(instance)\n    },\n  }\n\n  const [instance] = React.useState(\n    () => new Virtualizer<TScrollElement, TItemElement>(resolvedOptions),\n  )\n\n  instance.setOptions(resolvedOptions)\n\n  React.useEffect(() => {\n    return instance._didMount()\n  }, [])\n\n  useIsomorphicLayoutEffect(() => {\n    return instance._willUpdate()\n  })\n\n  return instance\n}\n\nexport function useVirtualizer<\n  TScrollElement extends Element,\n  TItemElement extends Element,\n>(\n  options: PartialKeys<\n    VirtualizerOptions<TScrollElement, TItemElement>,\n    'observeElementRect' | 'observeElementOffset' | 'scrollToFn'\n  >,\n): Virtualizer<TScrollElement, TItemElement> {\n  return useVirtualizerBase<TScrollElement, TItemElement>({\n    observeElementRect: observeElementRect,\n    observeElementOffset: observeElementOffset,\n    scrollToFn: elementScroll,\n    ...options,\n  })\n}\n\nexport function useWindowVirtualizer<TItemElement extends Element>(\n  options: PartialKeys<\n    VirtualizerOptions<Window, TItemElement>,\n    | 'getScrollElement'\n    | 'observeElementRect'\n    | 'observeElementOffset'\n    | 'scrollToFn'\n  >,\n): Virtualizer<Window, TItemElement> {\n  return useVirtualizerBase<Window, TItemElement>({\n    getScrollElement: () => (typeof document !== 'undefined' ? window : null),\n    observeElementRect: observeWindowRect,\n    observeElementOffset: observeWindowOffset,\n    scrollToFn: windowScroll,\n    ...options,\n  })\n}\n"],
  "mappings": "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",
  "names": ["_extends", "memo", "getDeps", "fn", "opts", "deps", "initialDeps", "result", "depTime", "key", "debug", "Date", "now", "newDeps", "depsChanged", "length", "some", "dep", "index", "resultTime", "depEndTime", "Math", "round", "resultEndTime", "resultFpsPercentage", "pad", "str", "num", "String", "console", "info", "max", "min", "onChange", "notUndefined", "value", "msg", "undefined", "Error", "approxEqual", "a", "b", "abs", "defaultKeyExtractor", "index", "defaultRangeExtractor", "range", "start", "Math", "max", "startIndex", "overscan", "end", "min", "endIndex", "count", "arr", "i", "push", "observeElementRect", "instance", "cb", "element", "scrollElement", "handler", "rect", "width", "height", "round", "getBoundingClientRect", "observer", "ResizeObserver", "entries", "entry", "borderBoxSize", "box", "inlineSize", "blockSize", "observe", "unobserve", "observeWindowRect", "innerWidth", "innerHeight", "addEventListener", "passive", "removeEventListener", "observeElementOffset", "options", "horizontal", "observeWindowOffset", "measureElement", "size", "windowScroll", "offset", "adjustments", "behavior", "toOffset", "scrollTo", "elementScroll", "Virtualizer", "opts", "unsubs", "isScrolling", "isScrollingTimeoutId", "scrollToIndexTimeoutId", "measurementsCache", "itemSizeCache", "Map", "pendingMeasuredCacheIndexes", "scrollDirection", "scrollAdjustments", "measureElementCache", "_ro", "get", "forEach", "_measureElement", "target", "disconnect", "setOptions", "Object", "key", "value", "_extends", "debug", "initialOffset", "paddingStart", "paddingEnd", "scrollPaddingStart", "scrollPaddingEnd", "getItemKey", "rangeExtractor", "onChange", "initialRect", "scrollMargin", "scrollingDelay", "indexAttribute", "initialMeasurementsCache", "lanes", "notify", "cleanup", "filter", "Boolean", "d", "_didMount", "_willUpdate", "getScrollElement", "_scrollToOffset", "scrollOffset", "undefined", "prev", "scrollRect", "maybeNotify", "clearTimeout", "setTimeout", "getSize", "memoOptions", "memo", "getFurthestMeasurement", "measurements", "furthestMeasurementsFound", "furthestMeasurements", "m", "measurement", "has", "lane", "previousFurthestMeasurement", "set", "Array", "from", "values", "sort", "a", "b", "getMeasurements", "length", "slice", "furthestMeasurement", "measuredSize", "estimateSize", "calculateRange", "outerSize", "initialDeps", "getIndexes", "indexFromElement", "node", "attributeName", "indexStr", "getAttribute", "console", "warn", "parseInt", "item", "prevNode", "isConnected", "measuredItemSize", "itemSize", "delta", "info", "getVirtualItems", "indexes", "virtualItems", "k", "len", "getVirtualItemForOffset", "notUndefined", "findNearestBinarySearch", "getOffsetForAlignment", "align", "scrollSizeProp", "scrollSize", "document", "documentElement", "maxOffset", "getOffsetForIndex", "isDynamicMode", "cancelScrollToIndex", "scrollToOffset", "scrollToIndex", "initialAlign", "elementInDOM", "approxEqual", "scrollBy", "getTotalSize", "scrollToFn", "measure", "low", "high", "getCurrentValue", "middle", "currentValue", "getOffset", "useIsomorphicLayoutEffect", "document", "useLayoutEffect", "useEffect", "useVirtualizerBase", "options", "rerender", "useReducer", "resolvedOptions", "onChange", "instance", "React", "useState", "Virtualizer", "setOptions", "_didMount", "_willUpdate", "useVirtualizer", "observeElementRect", "observeElementOffset", "scrollToFn", "elementScroll", "useWindowVirtualizer", "getScrollElement", "window", "observeWindowRect", "observeWindowOffset", "windowScroll"]
}
