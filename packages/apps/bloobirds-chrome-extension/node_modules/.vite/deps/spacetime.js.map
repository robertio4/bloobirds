{
  "version": 3,
  "sources": ["../../../../../../node_modules/spacetime/src/timezone/summerTime.js", "../../../../../../node_modules/spacetime/src/timezone/quick.js", "../../../../../../node_modules/spacetime/zonefile/_build.js", "../../../../../../node_modules/spacetime/zonefile/_prefixes.js", "../../../../../../node_modules/spacetime/zonefile/unpack.js", "../../../../../../node_modules/spacetime/src/timezone/guessTz.js", "../../../../../../node_modules/spacetime/src/timezone/parseOffset.js", "../../../../../../node_modules/spacetime/src/timezone/find.js", "../../../../../../node_modules/spacetime/src/fns.js", "../../../../../../node_modules/spacetime/src/input/helpers.js", "../../../../../../node_modules/spacetime/src/input/named-dates.js", "../../../../../../node_modules/spacetime/src/input/normalize.js", "../../../../../../node_modules/spacetime/src/data/milliseconds.js", "../../../../../../node_modules/spacetime/src/methods/set/walk.js", "../../../../../../node_modules/spacetime/src/data/monthLengths.js", "../../../../../../node_modules/spacetime/src/data/months.js", "../../../../../../node_modules/spacetime/src/input/formats/parseOffset.js", "../../../../../../node_modules/spacetime/src/input/formats/parseTime.js", "../../../../../../node_modules/spacetime/src/input/formats/_parsers.js", "../../../../../../node_modules/spacetime/src/input/formats/01-ymd.js", "../../../../../../node_modules/spacetime/src/input/formats/02-mdy.js", "../../../../../../node_modules/spacetime/src/input/formats/03-dmy.js", "../../../../../../node_modules/spacetime/src/input/formats/04-misc.js", "../../../../../../node_modules/spacetime/src/input/formats/index.js", "../../../../../../node_modules/spacetime/src/input/parse.js", "../../../../../../node_modules/spacetime/src/input/index.js", "../../../../../../node_modules/spacetime/src/data/days.js", "../../../../../../node_modules/spacetime/src/data/caseFormat.js", "../../../../../../node_modules/spacetime/src/methods/format/_offset.js", "../../../../../../node_modules/spacetime/src/methods/format/index.js", "../../../../../../node_modules/spacetime/src/methods/format/unixFmt.js", "../../../../../../node_modules/spacetime/src/methods/progress.js", "../../../../../../node_modules/spacetime/src/methods/nearest.js", "../../../../../../node_modules/spacetime/src/methods/diff/one.js", "../../../../../../node_modules/spacetime/src/methods/diff/waterfall.js", "../../../../../../node_modules/spacetime/src/methods/diff/index.js", "../../../../../../node_modules/spacetime/src/methods/since/_iso.js", "../../../../../../node_modules/spacetime/src/methods/since/getDiff.js", "../../../../../../node_modules/spacetime/src/data/units.js", "../../../../../../node_modules/spacetime/src/data/distance.js", "../../../../../../node_modules/spacetime/src/methods/since/soften.js", "../../../../../../node_modules/spacetime/src/methods/since/index.js", "../../../../../../node_modules/spacetime/src/data/seasons.js", "../../../../../../node_modules/spacetime/src/data/quarters.js", "../../../../../../node_modules/spacetime/src/methods/startOf.js", "../../../../../../node_modules/spacetime/src/methods/every.js", "../../../../../../node_modules/spacetime/src/timezone/index.js", "../../../../../../node_modules/spacetime/src/methods.js", "../../../../../../node_modules/spacetime/src/methods/set/set.js", "../../../../../../node_modules/spacetime/src/data/ampm.js", "../../../../../../node_modules/spacetime/src/methods/query/01-time.js", "../../../../../../node_modules/spacetime/src/methods/query/02-date.js", "../../../../../../node_modules/spacetime/src/methods/query/03-year.js", "../../../../../../node_modules/spacetime/src/methods/query/index.js", "../../../../../../node_modules/spacetime/src/methods/set/_model.js", "../../../../../../node_modules/spacetime/src/methods/add.js", "../../../../../../node_modules/spacetime/src/methods/same.js", "../../../../../../node_modules/spacetime/src/methods/compare.js", "../../../../../../node_modules/spacetime/src/methods/i18n.js", "../../../../../../node_modules/spacetime/src/spacetime.js", "../../../../../../node_modules/spacetime/src/whereIts.js", "../../../../../../node_modules/spacetime/src/_version.js", "../../../../../../node_modules/spacetime/src/index.js"],
  "sourcesContent": ["const MSEC_IN_HOUR = 60 * 60 * 1000\n\n//convert our local date syntax a javascript UTC date\nconst toUtc = (dstChange, offset, year) => {\n  const [month, rest] = dstChange.split('/')\n  const [day, hour] = rest.split(':')\n  return Date.UTC(year, month - 1, day, hour) - offset * MSEC_IN_HOUR\n}\n\n// compare epoch with dst change events (in utc)\nconst inSummerTime = (epoch, start, end, summerOffset, winterOffset) => {\n  const year = new Date(epoch).getUTCFullYear()\n  const startUtc = toUtc(start, winterOffset, year)\n  const endUtc = toUtc(end, summerOffset, year)\n  // simple number comparison now\n  return epoch >= startUtc && epoch < endUtc\n}\n\nexport default inSummerTime\n", "import isSummer from './summerTime.js'\n\n// this method avoids having to do a full dst-calculation on every operation\n// it reproduces some things in ./index.js, but speeds up spacetime considerably\nconst quickOffset = s => {\n  let zones = s.timezones\n  let obj = zones[s.tz]\n  if (obj === undefined) {\n    console.warn(\"Warning: couldn't find timezone \" + s.tz)\n    return 0\n  }\n  if (obj.dst === undefined) {\n    return obj.offset\n  }\n\n  //get our two possible offsets\n  let jul = obj.offset\n  let dec = obj.offset + 1 // assume it's the same for now\n  if (obj.hem === 'n') {\n    dec = jul - 1\n  }\n  let split = obj.dst.split('->')\n  let inSummer = isSummer(s.epoch, split[0], split[1], jul, dec)\n  if (inSummer === true) {\n    return jul\n  }\n  return dec\n}\nexport default quickOffset\n", "export default {\n  \"9|s\": \"2/dili,2/jayapura\",\n  \"9|n\": \"2/chita,2/khandyga,2/pyongyang,2/seoul,2/tokyo,2/yakutsk,11/palau,japan,rok\",\n  \"9.5|s|04/07:03->10/06:02\": \"4/adelaide,4/broken_hill,4/south,4/yancowinna\",\n  \"9.5|s\": \"4/darwin,4/north\",\n  \"8|s|03/13:01->10/02:00\": \"12/casey\",\n  \"8|s\": \"2/kuala_lumpur,2/makassar,2/singapore,4/perth,2/ujung_pandang,4/west,singapore\",\n  \"8|n\": \"2/brunei,2/choibalsan,2/hong_kong,2/irkutsk,2/kuching,2/macau,2/manila,2/shanghai,2/taipei,2/ulaanbaatar,2/chongqing,2/chungking,2/harbin,2/macao,2/ulan_bator,hongkong,prc,roc\",\n  \"8.75|s\": \"4/eucla\",\n  \"7|s\": \"12/davis,2/jakarta,9/christmas\",\n  \"7|n\": \"2/bangkok,2/barnaul,2/hovd,2/krasnoyarsk,2/novokuznetsk,2/novosibirsk,2/phnom_penh,2/pontianak,2/ho_chi_minh,2/tomsk,2/vientiane,2/saigon\",\n  \"6|s\": \"12/vostok\",\n  \"6|n\": \"2/almaty,2/bishkek,2/dhaka,2/omsk,2/qyzylorda,2/qostanay,2/thimphu,2/urumqi,9/chagos,2/dacca,2/kashgar,2/thimbu\",\n  \"6.5|n\": \"2/yangon,9/cocos,2/rangoon\",\n  \"5|s\": \"12/mawson,9/kerguelen\",\n  \"5|n\": \"2/aqtau,2/aqtobe,2/ashgabat,2/atyrau,2/dushanbe,2/karachi,2/oral,2/samarkand,2/tashkent,2/yekaterinburg,9/maldives,2/ashkhabad\",\n  \"5.75|n\": \"2/kathmandu,2/katmandu\",\n  \"5.5|n\": \"2/kolkata,2/colombo,2/calcutta\",\n  \"4|s\": \"9/reunion\",\n  \"4|n\": \"2/baku,2/dubai,2/muscat,2/tbilisi,2/yerevan,8/astrakhan,8/samara,8/saratov,8/ulyanovsk,8/volgograd,9/mahe,9/mauritius,2/volgograd\",\n  \"4.5|n\": \"2/kabul\",\n  \"3|s\": \"12/syowa,9/antananarivo\",\n  \"3|n|04/28:00->10/26:24\": \"0/cairo,egypt\",\n  \"3|n|03/31:03->10/27:04\": \"2/famagusta,2/nicosia,8/athens,8/bucharest,8/helsinki,8/mariehamn,8/riga,8/sofia,8/tallinn,8/uzhgorod,8/vilnius,8/zaporozhye,8/nicosia,eet\",\n  \"3|n|03/31:02->10/27:03\": \"8/chisinau,8/tiraspol\",\n  \"3|n|03/31:00->10/26:24\": \"2/beirut\",\n  \"3|n|03/31:00->10/25:01\": \"2/gaza,2/hebron\",\n  \"3|n|03/29:02->10/27:02\": \"2/jerusalem,2/tel_aviv,israel\",\n  \"3|n|03/26:03->10/29:04\": \"8/kyiv,8/kiev\",\n  \"3|n\": \"0/addis_ababa,0/asmara,0/asmera,0/dar_es_salaam,0/djibouti,0/juba,0/kampala,0/mogadishu,0/nairobi,2/aden,2/amman,2/baghdad,2/bahrain,2/damascus,2/kuwait,2/qatar,2/riyadh,8/istanbul,8/kirov,8/minsk,8/moscow,8/simferopol,9/comoro,9/mayotte,2/istanbul,turkey,w-su\",\n  \"3.5|n\": \"2/tehran,iran\",\n  \"2|s|03/31:02->10/27:02\": \"12/troll\",\n  \"2|s\": \"0/gaborone,0/harare,0/johannesburg,0/lubumbashi,0/lusaka,0/maputo,0/maseru,0/mbabane\",\n  \"2|n|03/31:02->10/27:03\": \"0/ceuta,arctic/longyearbyen,8/amsterdam,8/andorra,8/belgrade,8/berlin,8/bratislava,8/brussels,8/budapest,8/busingen,8/copenhagen,8/gibraltar,8/ljubljana,8/luxembourg,8/madrid,8/malta,8/monaco,8/oslo,8/paris,8/podgorica,8/prague,8/rome,8/san_marino,8/sarajevo,8/skopje,8/stockholm,8/tirane,8/vaduz,8/vatican,8/vienna,8/warsaw,8/zagreb,8/zurich,3/jan_mayen,poland,cet,met\",\n  \"2|n\": \"0/blantyre,0/bujumbura,0/khartoum,0/kigali,0/tripoli,8/kaliningrad,libya\",\n  \"1|s\": \"0/brazzaville,0/kinshasa,0/luanda,0/windhoek\",\n  \"1|n|03/31:01->10/27:02\": \"3/canary,3/faroe,3/madeira,8/dublin,8/guernsey,8/isle_of_man,8/jersey,8/lisbon,8/london,3/faeroe,eire,8/belfast,gb-eire,gb,portugal,wet\",\n  \"1|n\": \"0/algiers,0/bangui,0/douala,0/lagos,0/libreville,0/malabo,0/ndjamena,0/niamey,0/porto-novo,0/tunis\",\n  \"14|n\": \"11/kiritimati\",\n  \"13|s\": \"11/apia,11/tongatapu\",\n  \"13|n\": \"11/enderbury,11/kanton,11/fakaofo\",\n  \"12|s|04/07:03->09/29:02\": \"12/mcmurdo,11/auckland,12/south_pole,nz\",\n  \"12|s\": \"11/fiji\",\n  \"12|n\": \"2/anadyr,2/kamchatka,2/srednekolymsk,11/funafuti,11/kwajalein,11/majuro,11/nauru,11/tarawa,11/wake,11/wallis,kwajalein\",\n  \"12.75|s|04/07:03->04/07:02\": \"11/chatham,nz-chat\",\n  \"11|s|04/07:03->10/06:02\": \"12/macquarie\",\n  \"11|s\": \"11/bougainville\",\n  \"11|n\": \"2/magadan,2/sakhalin,11/efate,11/guadalcanal,11/kosrae,11/noumea,11/pohnpei,11/ponape\",\n  \"11.5|n|04/07:03->10/06:02\": \"11/norfolk\",\n  \"10|s|04/07:03->10/06:02\": \"4/currie,4/hobart,4/melbourne,4/sydney,4/act,4/canberra,4/nsw,4/tasmania,4/victoria\",\n  \"10|s\": \"12/dumontdurville,4/brisbane,4/lindeman,11/port_moresby,4/queensland\",\n  \"10|n\": \"2/ust-nera,2/vladivostok,11/guam,11/saipan,11/chuuk,11/truk,11/yap\",\n  \"10.5|s|04/07:01->10/06:02\": \"4/lord_howe,4/lhi\",\n  \"0|s|03/10:03->04/14:02\": \"0/casablanca,0/el_aaiun\",\n  \"0|n|03/31:00->10/27:01\": \"1/scoresbysund,3/azores\",\n  \"0|n\": \"0/abidjan,0/accra,0/bamako,0/banjul,0/bissau,0/conakry,0/dakar,0/freetown,0/lome,0/monrovia,0/nouakchott,0/ouagadougou,0/sao_tome,1/danmarkshavn,3/reykjavik,3/st_helena,13/gmt,13/utc,0/timbuktu,13/greenwich,13/uct,13/universal,13/zulu,gmt-0,gmt+0,gmt0,greenwich,iceland,uct,universal,utc,zulu,13/unknown,factory\",\n  \"-9|n|03/10:02->11/03:02\": \"1/adak,1/atka,us/aleutian\",\n  \"-9|n\": \"11/gambier\",\n  \"-9.5|n\": \"11/marquesas\",\n  \"-8|n|03/10:02->11/03:02\": \"1/anchorage,1/juneau,1/nome,1/sitka,1/yakutat,us/alaska\",\n  \"-8|n\": \"1/metlakatla,11/pitcairn\",\n  \"-7|n|03/10:02->11/03:02\": \"1/los_angeles,1/santa_isabel,1/tijuana,1/vancouver,1/ensenada,6/pacific,10/bajanorte,us/pacific-new,us/pacific\",\n  \"-7|n\": \"1/creston,1/dawson,1/dawson_creek,1/fort_nelson,1/hermosillo,1/mazatlan,1/phoenix,1/whitehorse,6/yukon,10/bajasur,us/arizona,mst\",\n  \"-6|s|04/06:22->09/07:22\": \"11/easter,7/easterisland\",\n  \"-6|n|04/07:02->10/27:02\": \"1/merida\",\n  \"-6|n|03/12:02->11/05:02\": \"1/ciudad_juarez\",\n  \"-6|n|03/10:02->11/03:02\": \"1/boise,1/cambridge_bay,1/denver,1/edmonton,1/inuvik,1/north_dakota,1/ojinaga,1/yellowknife,1/shiprock,6/mountain,navajo,us/mountain\",\n  \"-6|n\": \"1/bahia_banderas,1/belize,1/chihuahua,1/costa_rica,1/el_salvador,1/guatemala,1/managua,1/mexico_city,1/monterrey,1/regina,1/swift_current,1/tegucigalpa,11/galapagos,6/east-saskatchewan,6/saskatchewan,10/general\",\n  \"-5|s\": \"1/lima,1/rio_branco,1/porto_acre,5/acre\",\n  \"-5|n|03/10:02->11/03:02\": \"1/chicago,1/matamoros,1/menominee,1/rainy_river,1/rankin_inlet,1/resolute,1/winnipeg,1/indiana/knox,1/indiana/tell_city,1/north_dakota/beulah,1/north_dakota/center,1/north_dakota/new_salem,1/knox_in,6/central,us/central,us/indiana-starke\",\n  \"-5|n\": \"1/bogota,1/cancun,1/cayman,1/coral_harbour,1/eirunepe,1/guayaquil,1/jamaica,1/panama,1/atikokan,jamaica,est\",\n  \"-4|s|04/06:24->09/08:00\": \"1/santiago,7/continental\",\n  \"-4|s|03/23:24->10/06:00\": \"1/asuncion\",\n  \"-4|s\": \"1/campo_grande,1/cuiaba,1/la_paz,1/manaus,5/west\",\n  \"-4|n|03/10:02->11/03:02\": \"1/detroit,1/grand_turk,1/indiana,1/indianapolis,1/iqaluit,1/kentucky,1/louisville,1/montreal,1/nassau,1/new_york,1/nipigon,1/pangnirtung,1/port-au-prince,1/thunder_bay,1/toronto,1/indiana/marengo,1/indiana/petersburg,1/indiana/vevay,1/indiana/vincennes,1/indiana/winamac,1/kentucky/monticello,1/fort_wayne,1/indiana/indianapolis,1/kentucky/louisville,6/eastern,us/east-indiana,us/eastern,us/michigan\",\n  \"-4|n|03/10:00->11/03:01\": \"1/havana,cuba\",\n  \"-4|n\": \"1/anguilla,1/antigua,1/aruba,1/barbados,1/blanc-sablon,1/boa_vista,1/caracas,1/curacao,1/dominica,1/grenada,1/guadeloupe,1/guyana,1/kralendijk,1/lower_princes,1/marigot,1/martinique,1/montserrat,1/port_of_spain,1/porto_velho,1/puerto_rico,1/santo_domingo,1/st_barthelemy,1/st_kitts,1/st_lucia,1/st_thomas,1/st_vincent,1/tortola,1/virgin\",\n  \"-3|s\": \"1/argentina,1/buenos_aires,1/catamarca,1/cordoba,1/fortaleza,1/jujuy,1/mendoza,1/montevideo,1/punta_arenas,1/sao_paulo,12/palmer,12/rothera,3/stanley,1/argentina/la_rioja,1/argentina/rio_gallegos,1/argentina/salta,1/argentina/san_juan,1/argentina/san_luis,1/argentina/tucuman,1/argentina/ushuaia,1/argentina/comodrivadavia,1/argentina/buenos_aires,1/argentina/catamarca,1/argentina/cordoba,1/argentina/jujuy,1/argentina/mendoza,1/argentina/rosario,1/rosario,5/east\",\n  \"-3|n|03/10:02->11/03:02\": \"1/glace_bay,1/goose_bay,1/halifax,1/moncton,1/thule,3/bermuda,6/atlantic\",\n  \"-3|n\": \"1/araguaina,1/bahia,1/belem,1/cayenne,1/maceio,1/paramaribo,1/recife,1/santarem\",\n  \"-2|n|03/30:22->10/26:23\": \"1/nuuk,1/godthab\",\n  \"-2|n|03/10:02->11/03:02\": \"1/miquelon\",\n  \"-2|n\": \"1/noronha,3/south_georgia,5/denoronha\",\n  \"-2.5|n|03/10:02->11/03:02\": \"1/st_johns,6/newfoundland\",\n  \"-1|n\": \"3/cape_verde\",\n  \"-11|n\": \"11/midway,11/niue,11/pago_pago,11/samoa,us/samoa\",\n  \"-10|n\": \"11/honolulu,11/johnston,11/rarotonga,11/tahiti,us/hawaii,hst\"\n}", "//prefixes for iana names..\nexport default [\n  'africa',\n  'america',\n  'asia',\n  'atlantic',\n  'australia',\n  'brazil',\n  'canada',\n  'chile',\n  'europe',\n  'indian',\n  'mexico',\n  'pacific',\n  'antarctica',\n  'etc'\n]\n", "import data from './_build.js'\nimport prefixes from './_prefixes.js'\n\nlet all = {}\nObject.keys(data).forEach((k) => {\n  let split = k.split('|')\n  let obj = {\n    offset: Number(split[0]),\n    hem: split[1]\n  }\n  if (split[2]) {\n    obj.dst = split[2]\n  }\n  let names = data[k].split(',')\n  names.forEach((str) => {\n    str = str.replace(/(^[0-9]+)\\//, (before, num) => {\n      num = Number(num)\n      return prefixes[num] + '/'\n    })\n    all[str] = obj\n  })\n})\n\nall.utc = {\n  offset: 0,\n  hem: 'n' //default to northern hemisphere - (sorry!)\n}\n\n//add etc/gmt+n\nfor (let i = -14; i <= 14; i += 0.5) {\n  let num = i\n  if (num > 0) {\n    num = '+' + num\n  }\n  let name = 'etc/gmt' + num\n  all[name] = {\n    offset: i * -1, //they're negative!\n    hem: 'n' //(sorry)\n  }\n  name = 'utc/gmt' + num //this one too, why not.\n  all[name] = {\n    offset: i * -1,\n    hem: 'n'\n  }\n}\n\nexport default all\n", "//find the implicit iana code for this machine.\n//safely query the Intl object\n//based on - https://bitbucket.org/pellepim/jstimezonedetect/src\nconst fallbackTZ = 'utc' //\n\n//this Intl object is not supported often, yet\nconst safeIntl = () => {\n  if (typeof Intl === 'undefined' || typeof Intl.DateTimeFormat === 'undefined') {\n    return null\n  }\n  let format = Intl.DateTimeFormat()\n  if (typeof format === 'undefined' || typeof format.resolvedOptions === 'undefined') {\n    return null\n  }\n  let timezone = format.resolvedOptions().timeZone\n  if (!timezone) {\n    return null\n  }\n  return timezone.toLowerCase()\n}\n\nconst guessTz = () => {\n  let timezone = safeIntl()\n  if (timezone === null) {\n    return fallbackTZ\n  }\n  return timezone\n}\n//do it once per computer\nexport default guessTz\n", "const isOffset = /(\\-?[0-9]+)h(rs)?/i\nconst isNumber = /(\\-?[0-9]+)/\nconst utcOffset = /utc([\\-+]?[0-9]+)/i\nconst gmtOffset = /gmt([\\-+]?[0-9]+)/i\n\nconst toIana = function (num) {\n  num = Number(num)\n  if (num >= -13 && num <= 13) {\n    num = num * -1 //it's opposite!\n    num = (num > 0 ? '+' : '') + num //add plus sign\n    return 'etc/gmt' + num\n  }\n  return null\n}\n\nconst parseOffset = function (tz) {\n  // '+5hrs'\n  let m = tz.match(isOffset)\n  if (m !== null) {\n    return toIana(m[1])\n  }\n  // 'utc+5'\n  m = tz.match(utcOffset)\n  if (m !== null) {\n    return toIana(m[1])\n  }\n  // 'GMT-5' (not opposite)\n  m = tz.match(gmtOffset)\n  if (m !== null) {\n    let num = Number(m[1]) * -1\n    return toIana(num)\n  }\n  // '+5'\n  m = tz.match(isNumber)\n  if (m !== null) {\n    return toIana(m[1])\n  }\n  return null\n}\nexport default parseOffset\n", "import tzs from '../../zonefile/unpack.js'\nimport guessTz from './guessTz.js'\nimport parseOffset from './parseOffset.js'\n\nlet local = guessTz()\n\n//add all the city names by themselves\nconst cities = Object.keys(tzs).reduce((h, k) => {\n  let city = k.split('/')[1] || ''\n  city = city.replace(/_/g, ' ')\n  h[city] = k\n  return h\n}, {})\n\n//try to match these against iana form\nconst normalize = (tz) => {\n  tz = tz.replace(/ time/g, '')\n  tz = tz.replace(/ (standard|daylight|summer)/g, '')\n  tz = tz.replace(/\\b(east|west|north|south)ern/g, '$1')\n  tz = tz.replace(/\\b(africa|america|australia)n/g, '$1')\n  tz = tz.replace(/\\beuropean/g, 'europe')\n  tz = tz.replace(/\\islands/g, 'island')\n  return tz\n}\n\n// try our best to reconcile the timzone to this given string\nconst lookupTz = (str, zones) => {\n  if (!str) {\n    // guard if Intl response is unsupported (#397)\n    if (!zones.hasOwnProperty(local)) {\n      console.warn(`Unrecognized IANA id '${local}'. Setting fallback tz to UTC.`)\n      local = 'utc'\n    }\n    return local\n  }\n  if (typeof str !== 'string') {\n    console.error(\"Timezone must be a string - recieved: '\", str, \"'\\n\")\n  }\n  let tz = str.trim()\n  // let split = str.split('/')\n  //support long timezones like 'America/Argentina/Rio_Gallegos'\n  // if (split.length > 2 && zones.hasOwnProperty(tz) === false) {\n  //   tz = split[0] + '/' + split[1]\n  // }\n  tz = tz.toLowerCase()\n  if (zones.hasOwnProperty(tz) === true) {\n    return tz\n  }\n  //lookup more loosely..\n  tz = normalize(tz)\n  if (zones.hasOwnProperty(tz) === true) {\n    return tz\n  }\n  //try city-names\n  if (cities.hasOwnProperty(tz) === true) {\n    return cities[tz]\n  }\n  // //try to parse '-5h'\n  if (/[0-9]/.test(tz) === true) {\n    let id = parseOffset(tz)\n    if (id) {\n      return id\n    }\n  }\n\n  throw new Error(\n    \"Spacetime: Cannot find timezone named: '\" + str + \"'. Please enter an IANA timezone id.\"\n  )\n}\nexport default lookupTz\n", "//git:blame @JuliasCaesar https://www.timeanddate.com/date/leapyear.html\nexport function isLeapYear(year) { return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0 }\n// unsurprisingly-nasty `typeof date` call\nexport function isDate(d) { return Object.prototype.toString.call(d) === '[object Date]' && !isNaN(d.valueOf()) }\nexport function isArray(input) { return Object.prototype.toString.call(input) === '[object Array]' }\nexport function isObject(input) { return Object.prototype.toString.call(input) === '[object Object]' }\nexport function isBoolean(input) { return Object.prototype.toString.call(input) === '[object Boolean]' }\n\nexport function zeroPad(str, len = 2) {\n  let pad = '0'\n  str = str + ''\n  return str.length >= len ? str : new Array(len - str.length + 1).join(pad) + str\n}\n\nexport function titleCase(str) {\n  if (!str) {\n    return ''\n  }\n  return str[0].toUpperCase() + str.substr(1)\n}\n\nexport function ordinal(i) {\n  let j = i % 10\n  let k = i % 100\n  if (j === 1 && k !== 11) {\n    return i + 'st'\n  }\n  if (j === 2 && k !== 12) {\n    return i + 'nd'\n  }\n  if (j === 3 && k !== 13) {\n    return i + 'rd'\n  }\n  return i + 'th'\n}\n\n//strip 'st' off '1st'..\nexport function toCardinal(str) {\n  str = String(str)\n  str = str.replace(/([0-9])(st|nd|rd|th)$/i, '$1')\n  return parseInt(str, 10)\n}\n\n//used mostly for cleanup of unit names, like 'months'\nexport function normalize(str = '') {\n  str = str.toLowerCase().trim()\n  str = str.replace(/ies$/, 'y') //'centuries'\n  str = str.replace(/s$/, '')\n  str = str.replace(/-/g, '')\n  if (str === 'day' || str === 'days') {\n    return 'date'\n  }\n  if (str === 'min' || str === 'mins') {\n    return 'minute'\n  }\n  return str\n}\n\nexport function getEpoch(tmp) {\n  //support epoch\n  if (typeof tmp === 'number') {\n    return tmp\n  }\n  //suport date objects\n  if (isDate(tmp)) {\n    return tmp.getTime()\n  }\n  if (tmp.epoch) {\n    return tmp.epoch\n  }\n  return null\n}\n\n//make sure this input is a spacetime obj\nexport function beADate(d, s) {\n  if (isObject(d) === false) {\n    return s.clone().set(d)\n  }\n  return d\n}\n\nexport function formatTimezone(offset, delimiter = '') {\n  const sign = offset > 0 ? '+' : '-'\n  const absOffset = Math.abs(offset)\n  const hours = zeroPad(parseInt('' + absOffset, 10))\n  const minutes = zeroPad((absOffset % 1) * 60)\n  return `${sign}${hours}${delimiter}${minutes}`\n}\n", "const defaults = {\n  year: new Date().getFullYear(),\n  month: 0,\n  date: 1\n}\n\n//support [2016, 03, 01] format\nconst parseArray = (s, arr, today) => {\n  if (arr.length === 0) {\n    return s\n  }\n  let order = ['year', 'month', 'date', 'hour', 'minute', 'second', 'millisecond']\n  for (let i = 0; i < order.length; i++) {\n    let num = arr[i] || today[order[i]] || defaults[order[i]] || 0\n    s = s[order[i]](num)\n  }\n  return s\n}\n\n//support {year:2016, month:3} format\nconst parseObject = (s, obj, today) => {\n  // if obj is empty, do nothing\n  if (Object.keys(obj).length === 0) {\n    return s\n  }\n  obj = Object.assign({}, defaults, today, obj)\n  let keys = Object.keys(obj)\n  for (let i = 0; i < keys.length; i++) {\n    let unit = keys[i]\n    //make sure we have this method\n    if (s[unit] === undefined || typeof s[unit] !== 'function') {\n      continue\n    }\n    //make sure the value is a number\n    if (obj[unit] === null || obj[unit] === undefined || obj[unit] === '') {\n      continue\n    }\n    let num = obj[unit] || today[unit] || defaults[unit] || 0\n    s = s[unit](num)\n  }\n  return s\n}\n\n// this may seem like an arbitrary number, but it's 'within jan 1970'\n// this is only really ambiguous until 2054 or so\nconst parseNumber = function (s, input) {\n  const minimumEpoch = 2500000000\n  // if the given epoch is really small, they've probably given seconds and not milliseconds\n  // anything below this number is likely (but not necessarily) a mistaken input.\n  if (input > 0 && input < minimumEpoch && s.silent === false) {\n    console.warn('  - Warning: You are setting the date to January 1970.')\n    console.warn('       -   did input seconds instead of milliseconds?')\n  }\n  s.epoch = input\n  return s\n}\n\nexport default {\n  parseArray,\n  parseObject,\n  parseNumber\n}\n", "// pull in 'today' data for the baseline moment\nconst getNow = function (s) {\n  s.epoch = Date.now()\n  Object.keys(s._today || {}).forEach((k) => {\n    if (typeof s[k] === 'function') {\n      s = s[k](s._today[k])\n    }\n  })\n  return s\n}\n\nconst dates = {\n  now: (s) => {\n    return getNow(s)\n  },\n  today: (s) => {\n    return getNow(s)\n  },\n  tonight: (s) => {\n    s = getNow(s)\n    s = s.hour(18) //6pm\n    return s\n  },\n  tomorrow: (s) => {\n    s = getNow(s)\n    s = s.add(1, 'day')\n    s = s.startOf('day')\n    return s\n  },\n  yesterday: (s) => {\n    s = getNow(s)\n    s = s.subtract(1, 'day')\n    s = s.startOf('day')\n    return s\n  },\n  christmas: (s) => {\n    let year = getNow(s).year()\n    s = s.set([year, 11, 25, 18, 0, 0]) // Dec 25\n    return s\n  },\n  'new years': (s) => {\n    let year = getNow(s).year()\n    s = s.set([year, 11, 31, 18, 0, 0]) // Dec 31\n    return s\n  }\n}\ndates['new years eve'] = dates['new years']\nexport default dates\n", "//little cleanup..\nconst normalize = function (str) {\n  // remove all day-names\n  str = str.replace(/\\b(mon|tues?|wed|wednes|thur?s?|fri|sat|satur|sun)(day)?\\b/i, '')\n  //remove ordinal ending\n  str = str.replace(/([0-9])(th|rd|st|nd)/, '$1')\n  str = str.replace(/,/g, '')\n  str = str.replace(/ +/g, ' ').trim()\n  return str\n}\n\nexport default normalize\n", "let o = {\n  millisecond: 1\n}\no.second = 1000\no.minute = 60000\no.hour = 3.6e6 // dst is supported post-hoc\no.day = 8.64e7 //\no.date = o.day\no.month = 8.64e7 * 29.5 //(average)\no.week = 6.048e8\no.year = 3.154e10 // leap-years are supported post-hoc\n//add plurals\nObject.keys(o).forEach(k => {\n  o[k + 's'] = o[k]\n})\nexport default o\n", "import ms from '../../data/milliseconds.js'\n\n//basically, step-forward/backward until js Date object says we're there.\nconst walk = (s, n, fn, unit, previous) => {\n  let current = s.d[fn]()\n  if (current === n) {\n    return //already there\n  }\n  let startUnit = previous === null ? null : s.d[previous]()\n  let original = s.epoch\n  //try to get it as close as we can\n  let diff = n - current\n  s.epoch += ms[unit] * diff\n  //DST edge-case: if we are going many days, be a little conservative\n  // console.log(unit, diff)\n  if (unit === 'day') {\n    // s.epoch -= ms.minute\n    //but don't push it over a month\n    if (Math.abs(diff) > 28 && n < 28) {\n      s.epoch += ms.hour\n    }\n  }\n  // 1st time: oops, did we change previous unit? revert it.\n  if (previous !== null && startUnit !== s.d[previous]()) {\n    // console.warn('spacetime warning: missed setting ' + unit)\n    s.epoch = original\n    // s.epoch += ms[unit] * diff * 0.89 // maybe try and make it close...?\n  }\n  //repair it if we've gone too far or something\n  //(go by half-steps, just in case)\n  const halfStep = ms[unit] / 2\n  while (s.d[fn]() < n) {\n    s.epoch += halfStep\n  }\n\n  while (s.d[fn]() > n) {\n    s.epoch -= halfStep\n  }\n  // 2nd time: did we change previous unit? revert it.\n  if (previous !== null && startUnit !== s.d[previous]()) {\n    // console.warn('spacetime warning: missed setting ' + unit)\n    s.epoch = original\n  }\n}\n//find the desired date by a increment/check while loop\nconst units = {\n  year: {\n    valid: (n) => n > -4000 && n < 4000,\n    walkTo: (s, n) => walk(s, n, 'getFullYear', 'year', null)\n  },\n  month: {\n    valid: (n) => n >= 0 && n <= 11,\n    walkTo: (s, n) => {\n      let d = s.d\n      let current = d.getMonth()\n      let original = s.epoch\n      let startUnit = d.getFullYear()\n      if (current === n) {\n        return\n      }\n      //try to get it as close as we can..\n      let diff = n - current\n      s.epoch += ms.day * (diff * 28) //special case\n      //oops, did we change the year? revert it.\n      if (startUnit !== s.d.getFullYear()) {\n        s.epoch = original\n      }\n      //increment by day\n      while (s.d.getMonth() < n) {\n        s.epoch += ms.day\n      }\n      while (s.d.getMonth() > n) {\n        s.epoch -= ms.day\n      }\n    }\n  },\n  date: {\n    valid: (n) => n > 0 && n <= 31,\n    walkTo: (s, n) => walk(s, n, 'getDate', 'day', 'getMonth')\n  },\n  hour: {\n    valid: (n) => n >= 0 && n < 24,\n    walkTo: (s, n) => walk(s, n, 'getHours', 'hour', 'getDate')\n  },\n  minute: {\n    valid: (n) => n >= 0 && n < 60,\n    walkTo: (s, n) => walk(s, n, 'getMinutes', 'minute', 'getHours')\n  },\n  second: {\n    valid: (n) => n >= 0 && n < 60,\n    walkTo: (s, n) => {\n      //do this one directly\n      s.epoch = s.seconds(n).epoch\n    }\n  },\n  millisecond: {\n    valid: (n) => n >= 0 && n < 1000,\n    walkTo: (s, n) => {\n      //do this one directly\n      s.epoch = s.milliseconds(n).epoch\n    }\n  }\n}\n\nconst walkTo = (s, wants) => {\n  let keys = Object.keys(units)\n  let old = s.clone()\n  for (let i = 0; i < keys.length; i++) {\n    let k = keys[i]\n    let n = wants[k]\n    if (n === undefined) {\n      n = old[k]()\n    }\n    if (typeof n === 'string') {\n      n = parseInt(n, 10)\n    }\n    //make-sure it's valid\n    if (!units[k].valid(n)) {\n      s.epoch = null\n      if (s.silent === false) {\n        console.warn('invalid ' + k + ': ' + n)\n      }\n      return\n    }\n    units[k].walkTo(s, n)\n  }\n  return\n}\n\nexport default walkTo\n", "const monthLengths = [\n  31, // January - 31 days\n  28, // February - 28 days in a common year and 29 days in leap years\n  31, // March - 31 days\n  30, // April - 30 days\n  31, // May - 31 days\n  30, // June - 30 days\n  31, // July - 31 days\n  31, // August - 31 days\n  30, // September - 30 days\n  31, // October - 31 days\n  30, // November - 30 days\n  31 // December - 31 days\n]\nexport default monthLengths\n\n// 28 - feb\n// 30 - april, june, sept, nov\n// 31 - jan, march, may, july, aug, oct, dec\n", "let shortMonths = [\n  'jan',\n  'feb',\n  'mar',\n  'apr',\n  'may',\n  'jun',\n  'jul',\n  'aug',\n  'sep',\n  'oct',\n  'nov',\n  'dec'\n]\nlet longMonths = [\n  'january',\n  'february',\n  'march',\n  'april',\n  'may',\n  'june',\n  'july',\n  'august',\n  'september',\n  'october',\n  'november',\n  'december'\n]\n\nfunction buildMapping() {\n  const obj = {\n    sep: 8 //support this format\n  }\n  for (let i = 0; i < shortMonths.length; i++) {\n    obj[shortMonths[i]] = i\n  }\n  for (let i = 0; i < longMonths.length; i++) {\n    obj[longMonths[i]] = i\n  }\n  return obj\n}\n\nexport function short() { return shortMonths }\nexport function long() { return longMonths }\nexport function mapping() { return buildMapping() }\nexport function set(i18n) {\n  shortMonths = i18n.short || shortMonths\n  longMonths = i18n.long || longMonths\n}\n", "//pull-apart ISO offsets, like \"+0100\"\nconst parseOffset = (s, offset) => {\n  if (!offset) {\n    return s\n  }\n\n  // according to ISO8601, tz could be hh:mm, hhmm or hh\n  // so need few more steps before the calculation.\n  let num = 0\n\n  // for (+-)hh:mm\n  if (/^[\\+-]?[0-9]{2}:[0-9]{2}$/.test(offset)) {\n    //support \"+01:00\"\n    if (/:00/.test(offset) === true) {\n      offset = offset.replace(/:00/, '')\n    }\n    //support \"+01:30\"\n    if (/:30/.test(offset) === true) {\n      offset = offset.replace(/:30/, '.5')\n    }\n  }\n\n  // for (+-)hhmm\n  if (/^[\\+-]?[0-9]{4}$/.test(offset)) {\n    offset = offset.replace(/30$/, '.5')\n  }\n  num = parseFloat(offset)\n\n  //divide by 100 or 10 - , \"+0100\", \"+01\"\n  if (Math.abs(num) > 100) {\n    num = num / 100\n  }\n  //this is a fancy-move\n  if (num === 0 || offset === 'Z' || offset === 'z') {\n    s.tz = 'etc/gmt'\n    return s\n  }\n  //okay, try to match it to a utc timezone\n  //remember - this is opposite! a -5 offset maps to Etc/GMT+5  \u00AF\\_(:/)_/\u00AF\n  //https://askubuntu.com/questions/519550/why-is-the-8-timezone-called-gmt-8-in-the-filesystem\n  num *= -1\n\n  if (num >= 0) {\n    num = '+' + num\n  }\n  let tz = 'etc/gmt' + num\n  let zones = s.timezones\n\n  if (zones[tz]) {\n    // log a warning if we're over-writing a given timezone?\n    // console.log('changing timezone to: ' + tz)\n    s.tz = tz\n  }\n  return s\n}\nexport default parseOffset\n", "// truncate any sub-millisecond values\nconst parseMs = function (str = '') {\n  str = String(str)\n  //js does not support sub-millisecond values \n  // so truncate these - 2021-11-02T19:55:30.087772\n  if (str.length > 3) {\n    str = str.substr(0, 3)\n  } else if (str.length === 1) {\n    // assume ms are zero-padded on the left\n    // but maybe not on the right.\n    // turn '.10' into '.100'\n    str = str + '00'\n  } else if (str.length === 2) {\n    str = str + '0'\n  }\n  return Number(str) || 0\n}\n\nconst parseTime = (s, str = '') => {\n  // remove all whitespace\n  str = str.replace(/^\\s+/, '').toLowerCase()\n  //formal time format - 04:30.23\n  let arr = str.match(/([0-9]{1,2}):([0-9]{1,2}):?([0-9]{1,2})?[:\\.]?([0-9]{1,4})?/)\n  if (arr !== null) {\n    //validate it a little\n    let h = Number(arr[1])\n    if (h < 0 || h > 24) {\n      return s.startOf('day')\n    }\n    let m = Number(arr[2]) //don't accept '5:3pm'\n    if (arr[2].length < 2 || m < 0 || m > 59) {\n      return s.startOf('day')\n    }\n    s = s.hour(h)\n    s = s.minute(m)\n    s = s.seconds(arr[3] || 0)\n    s = s.millisecond(parseMs(arr[4]))\n    //parse-out am/pm\n    let ampm = str.match(/[\\b0-9] ?(am|pm)\\b/)\n    if (ampm !== null && ampm[1]) {\n      s = s.ampm(ampm[1])\n    }\n    return s\n  }\n\n  //try an informal form - 5pm (no minutes)\n  arr = str.match(/([0-9]+) ?(am|pm)/)\n  if (arr !== null && arr[1]) {\n    let h = Number(arr[1])\n    //validate it a little..\n    if (h > 12 || h < 1) {\n      return s.startOf('day')\n    }\n    s = s.hour(arr[1] || 0)\n    s = s.ampm(arr[2])\n    s = s.startOf('hour')\n    return s\n  }\n\n  //no time info found, use start-of-day\n  s = s.startOf('day')\n  return s\n}\nexport default parseTime\n", "import monthLengths from '../../data/monthLengths.js'\nimport { isLeapYear } from '../../fns.js'\nimport { mapping } from '../../data/months.js'\nlet months = mapping()\n\nimport parseOffset from './parseOffset.js'\nimport parseTime from './parseTime.js'\n\n//given a month, return whether day number exists in it\nconst validate = (obj) => {\n  //invalid values\n  if (monthLengths.hasOwnProperty(obj.month) !== true) {\n    return false\n  }\n  //support leap-year in february\n  if (obj.month === 1) {\n    if (isLeapYear(obj.year) && obj.date <= 29) {\n      return true\n    } else {\n      return obj.date <= 28\n    }\n  }\n  //is this date too-big for this month?\n  let max = monthLengths[obj.month] || 0\n  if (obj.date <= max) {\n    return true\n  }\n  return false\n}\n\nconst parseYear = (str = '', today) => {\n  str = str.trim()\n  // parse '86 shorthand\n  if (/^'[0-9][0-9]$/.test(str) === true) {\n    let num = Number(str.replace(/'/, ''))\n    if (num > 50) {\n      return 1900 + num\n    }\n    return 2000 + num\n  }\n  let year = parseInt(str, 10)\n  // use a given year from options.today\n  if (!year && today) {\n    year = today.year\n  }\n  // fallback to this year\n  year = year || new Date().getFullYear()\n  return year\n}\n\nconst parseMonth = function (str) {\n  str = str.toLowerCase().trim()\n  if (str === 'sept') {\n    return months.sep\n  }\n  return months[str]\n}\n\nexport {\n  parseOffset,\n  parseTime,\n  parseYear,\n  parseMonth,\n  validate\n}", "import walkTo from '../../methods/set/walk.js'\nimport { toCardinal } from '../../fns.js'\nimport { validate, parseTime, parseYear, parseMonth, parseOffset } from './_parsers.js'\n\nexport default [\n  // =====\n  //  y-m-d\n  // =====\n  //iso-this 1998-05-30T22:00:00:000Z, iso-that 2017-04-03T08:00:00-0700\n  {\n    reg: /^(\\-?0?0?[0-9]{3,4})-([0-9]{1,2})-([0-9]{1,2})[T| ]([0-9.:]+)(Z|[0-9\\-\\+:]+)?$/i,\n    parse: (s, m) => {\n      let obj = {\n        year: m[1],\n        month: parseInt(m[2], 10) - 1,\n        date: m[3]\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      parseOffset(s, m[5])\n      walkTo(s, obj)\n      s = parseTime(s, m[4])\n      return s\n    }\n  },\n  //short-iso \"2015-03-25\" or \"2015/03/25\" or \"2015/03/25 12:26:14 PM\"\n  {\n    reg: /^([0-9]{4})[\\-\\/\\. ]([0-9]{1,2})[\\-\\/\\. ]([0-9]{1,2})( [0-9]{1,2}(:[0-9]{0,2})?(:[0-9]{0,3})? ?(am|pm)?)?$/i,\n    parse: (s, m) => {\n      let obj = {\n        year: m[1],\n        month: parseInt(m[2], 10) - 1,\n        date: parseInt(m[3], 10)\n      }\n      if (obj.month >= 12) {\n        //support yyyy/dd/mm (weird, but ok)\n        obj.date = parseInt(m[2], 10)\n        obj.month = parseInt(m[3], 10) - 1\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, m[4])\n      return s\n    }\n  },\n\n  //text-month \"2015-feb-25\"\n  {\n    reg: /^([0-9]{4})[\\-\\/\\. ]([a-z]+)[\\-\\/\\. ]([0-9]{1,2})( [0-9]{1,2}(:[0-9]{0,2})?(:[0-9]{0,3})? ?(am|pm)?)?$/i,\n    parse: (s, m) => {\n      let obj = {\n        year: parseYear(m[1], s._today),\n        month: parseMonth(m[2]),\n        date: toCardinal(m[3] || '')\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, m[4])\n      return s\n    }\n  }\n]\n", "import walkTo from '../../methods/set/walk.js'\nimport { toCardinal } from '../../fns.js'\nimport { validate, parseTime, parseYear, parseMonth } from './_parsers.js'\n\nexport default [\n  // =====\n  //  m-d-y\n  // =====\n  //mm/dd/yyyy - uk/canada \"6/28/2019, 12:26:14 PM\"\n  {\n    reg: /^([0-9]{1,2})[\\-\\/.]([0-9]{1,2})[\\-\\/.]?([0-9]{4})?( [0-9]{1,2}:[0-9]{2}:?[0-9]{0,2}? ?(am|pm|gmt))?$/i,\n    parse: (s, arr) => {\n      let month = parseInt(arr[1], 10) - 1\n      let date = parseInt(arr[2], 10)\n      //support dd/mm/yyy\n      if (s.british || month >= 12) {\n        date = parseInt(arr[1], 10)\n        month = parseInt(arr[2], 10) - 1\n      }\n      let obj = {\n        date,\n        month,\n        year: parseYear(arr[3], s._today) || new Date().getFullYear()\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, arr[4])\n      return s\n    }\n  },\n  //alt short format - \"feb-25-2015\"\n  {\n    reg: /^([a-z]+)[\\-\\/\\. ]([0-9]{1,2})[\\-\\/\\. ]?([0-9]{4}|'[0-9]{2})?( [0-9]{1,2}(:[0-9]{0,2})?(:[0-9]{0,3})? ?(am|pm)?)?$/i,\n    parse: (s, arr) => {\n      let obj = {\n        year: parseYear(arr[3], s._today),\n        month: parseMonth(arr[1]),\n        date: toCardinal(arr[2] || '')\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, arr[4])\n      return s\n    }\n  },\n\n  //Long \"Mar 25 2015\"\n  //February 22, 2017 15:30:00\n  {\n    reg: /^([a-z]+) ([0-9]{1,2})( [0-9]{4})?( ([0-9:]+( ?am| ?pm| ?gmt)?))?$/i,\n    parse: (s, arr) => {\n      let obj = {\n        year: parseYear(arr[3], s._today),\n        month: parseMonth(arr[1]),\n        date: toCardinal(arr[2] || '')\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, arr[4])\n      return s\n    }\n  },\n  // 'Sun Mar 14 15:09:48 +0000 2021'\n  {\n    reg: /^([a-z]+) ([0-9]{1,2})( [0-9:]+)?( \\+[0-9]{4})?( [0-9]{4})?$/i,\n    parse: (s, arr) => {\n      let obj = {\n        year: parseYear(arr[5], s._today),\n        month: parseMonth(arr[1]),\n        date: toCardinal(arr[2] || '')\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, arr[3])\n      return s\n    }\n  }\n]\n", "import walkTo from '../../methods/set/walk.js'\nimport { toCardinal } from '../../fns.js'\nimport { validate, parseTime, parseYear, parseMonth } from './_parsers.js'\n\nexport default [\n  // =====\n  //  d-m-y\n  // =====\n  //common british format - \"25-feb-2015\"\n  {\n    reg: /^([0-9]{1,2})[\\-\\/]([a-z]+)[\\-\\/]?([0-9]{4})?$/i,\n    parse: (s, m) => {\n      let obj = {\n        year: parseYear(m[3], s._today),\n        month: parseMonth(m[2]),\n        date: toCardinal(m[1] || '')\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, m[4])\n      return s\n    }\n  },\n  // \"25 Mar 2015\"\n  {\n    reg: /^([0-9]{1,2})( [a-z]+)( [0-9]{4}| '[0-9]{2})? ?([0-9]{1,2}:[0-9]{2}:?[0-9]{0,2}? ?(am|pm|gmt))?$/i,\n    parse: (s, m) => {\n      let obj = {\n        year: parseYear(m[3], s._today),\n        month: parseMonth(m[2]),\n        date: toCardinal(m[1])\n      }\n      if (!obj.month || validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, m[4])\n      return s\n    }\n  },\n  // 01-jan-2020\n  {\n    reg: /^([0-9]{1,2})[\\. -/]([a-z]+)[\\. -/]([0-9]{4})?( [0-9]{1,2}(:[0-9]{0,2})?(:[0-9]{0,3})? ?(am|pm)?)?$/i,\n    parse: (s, m) => {\n      let obj = {\n        date: Number(m[1]),\n        month: parseMonth(m[2]),\n        year: Number(m[3])\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = s.startOf('day')\n      s = parseTime(s, m[4])\n      return s\n    }\n  }\n]\n", "import walkTo from '../../methods/set/walk.js'\nimport { validate, parseTime, parseYear, parseMonth } from './_parsers.js'\n\nexport default [\n  // =====\n  // no dates\n  // =====\n\n  // '2012-06' month-only\n  {\n    reg: /^([0-9]{4})[\\-\\/]([0-9]{2})$/i,\n    parse: (s, m) => {\n      let obj = {\n        year: m[1],\n        month: parseInt(m[2], 10) - 1,\n        date: 1\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, m[4])\n      return s\n    }\n  },\n\n  //February 2017 (implied date)\n  {\n    reg: /^([a-z]+) ([0-9]{4})$/i,\n    parse: (s, arr) => {\n      let obj = {\n        year: parseYear(arr[2], s._today),\n        month: parseMonth(arr[1]),\n        date: s._today.date || 1\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, arr[4])\n      return s\n    }\n  },\n\n  {\n    // 'q2 2002'\n    reg: /^(q[0-9])( of)?( [0-9]{4})?/i,\n    parse: (s, arr) => {\n      let quarter = arr[1] || ''\n      s = s.quarter(quarter)\n      let year = arr[3] || ''\n      if (year) {\n        year = year.trim()\n        s = s.year(year)\n      }\n      return s\n    }\n  },\n  {\n    // 'summer 2002'\n    reg: /^(spring|summer|winter|fall|autumn)( of)?( [0-9]{4})?/i,\n    parse: (s, arr) => {\n      let season = arr[1] || ''\n      s = s.season(season)\n      let year = arr[3] || ''\n      if (year) {\n        year = year.trim()\n        s = s.year(year)\n      }\n      return s\n    }\n  },\n  {\n    // '200bc'\n    reg: /^[0-9,]+ ?b\\.?c\\.?$/i,\n    parse: (s, arr) => {\n      let str = arr[0] || ''\n      //make year-negative\n      str = str.replace(/^([0-9,]+) ?b\\.?c\\.?$/i, '-$1')\n      let d = new Date()\n      let obj = {\n        year: parseInt(str.trim(), 10),\n        month: d.getMonth(),\n        date: d.getDate()\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s)\n      return s\n    }\n  },\n  {\n    // '200ad'\n    reg: /^[0-9,]+ ?(a\\.?d\\.?|c\\.?e\\.?)$/i,\n    parse: (s, arr) => {\n      let str = arr[0] || ''\n      //remove commas\n      str = str.replace(/,/g, '')\n      let d = new Date()\n      let obj = {\n        year: parseInt(str.trim(), 10),\n        month: d.getMonth(),\n        date: d.getDate()\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s)\n      return s\n    }\n  },\n  {\n    // '1992'\n    reg: /^[0-9]{4}( ?a\\.?d\\.?)?$/i,\n    parse: (s, arr) => {\n      let today = s._today\n      // using today's date, but a new month is awkward.\n      if (today.month && !today.date) {\n        today.date = 1\n      }\n      let d = new Date()\n      let obj = {\n        year: parseYear(arr[0], today),\n        month: today.month || d.getMonth(),\n        date: today.date || d.getDate()\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s)\n      return s\n    }\n  }\n]\n", "import ymd from './01-ymd.js'\nimport mdy from './02-mdy.js'\nimport dmy from './03-dmy.js'\nimport misc from './04-misc.js'\n\nexport default [].concat(ymd, mdy, dmy, misc)\n", "import parsers from './formats/index.js'\n\nconst parseString = function (s, input, givenTz) {\n  // let parsers = s.parsers || []\n  //try each text-parse template, use the first good result\n  for (let i = 0; i < parsers.length; i++) {\n    let m = input.match(parsers[i].reg)\n    if (m) {\n      // console.log(parsers[i].reg)\n      let res = parsers[i].parse(s, m, givenTz)\n      if (res !== null && res.isValid()) {\n        return res\n      }\n    }\n  }\n  if (s.silent === false) {\n    console.warn(\"Warning: couldn't parse date-string: '\" + input + \"'\")\n  }\n  s.epoch = null\n  return s\n}\nexport default parseString\n", "import { isObject, isDate, isArray } from '../fns.js'\nimport fns from './helpers.js'\nconst { parseArray, parseObject, parseNumber } = fns\nimport namedDates from './named-dates.js'\nimport normalize from './normalize.js'\nimport parseString from './parse.js'\n//we have to actually parse these inputs ourselves\n//  -  can't use built-in js parser ;(\n//=========================================\n// ISO Date\t  \"2015-03-25\"\n// Short Date\t\"03/25/2015\" or \"2015/03/25\"\n// Long Date\t\"Mar 25 2015\" or \"25 Mar 2015\"\n// Full Date\t\"Wednesday March 25 2015\"\n//=========================================\n\nconst defaults = {\n  year: new Date().getFullYear(),\n  month: 0,\n  date: 1\n}\n\n//find the epoch from different input styles\nconst parseInput = (s, input) => {\n  let today = s._today || defaults\n  //if we've been given a epoch number, it's easy\n  if (typeof input === 'number') {\n    return parseNumber(s, input)\n  }\n  //set tmp time\n  s.epoch = Date.now()\n  // overwrite tmp time with 'today' value, if exists\n  if (s._today && isObject(s._today) && Object.keys(s._today).length > 0) {\n    let res = parseObject(s, today, defaults)\n    if (res.isValid()) {\n      s.epoch = res.epoch\n    }\n  }\n  // null input means 'now'\n  if (input === null || input === undefined || input === '') {\n    return s //k, we're good.\n  }\n  //support input of Date() object\n  if (isDate(input) === true) {\n    s.epoch = input.getTime()\n    return s\n  }\n  //support [2016, 03, 01] format\n  if (isArray(input) === true) {\n    s = parseArray(s, input, today)\n    return s\n  }\n  //support {year:2016, month:3} format\n  if (isObject(input) === true) {\n    //support spacetime object as input\n    if (input.epoch) {\n      s.epoch = input.epoch\n      s.tz = input.tz\n      return s\n    }\n    s = parseObject(s, input, today)\n    return s\n  }\n  //input as a string..\n  if (typeof input !== 'string') {\n    return s\n  }\n  //little cleanup..\n  input = normalize(input)\n  //try some known-words, like 'now'\n  if (namedDates.hasOwnProperty(input) === true) {\n    s = namedDates[input](s)\n    return s\n  }\n  //try each text-parse template, use the first good result\n  return parseString(s, input)\n}\nexport default parseInput\n", "let shortDays = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat']\nlet longDays = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday']\n\nexport function short() { return shortDays }\nexport function long() { return longDays }\nexport function set(i18n) {\n  shortDays = i18n.short || shortDays\n  longDays = i18n.long || longDays\n}\nexport const aliases = {\n  mo: 1,\n  tu: 2,\n  we: 3,\n  th: 4,\n  fr: 5,\n  sa: 6,\n  su: 7,\n  tues: 2,\n  weds: 3,\n  wedn: 3,\n  thur: 4,\n  thurs: 4\n}\n", "let titleCaseEnabled = true\n\nexport function useTitleCase() {\n  return titleCaseEnabled\n}\n\nexport function set(val) {\n  titleCaseEnabled = val\n}\n", "import { formatTimezone } from '../../fns.js'\n\n// create the timezone offset part of an iso timestamp\n// it's kind of nuts how involved this is\n// \"+01:00\", \"+0100\", or simply \"+01\"\nconst isoOffset = s => {\n  let offset = s.timezone().current.offset\n  return !offset ? 'Z' : formatTimezone(offset, ':')\n}\n\nexport default isoOffset\n", "import { titleCase, zeroPad, ordinal } from '../../fns.js'\nimport { short } from '../../data/months.js'\nimport { short as _short } from '../../data/days.js'\nimport { useTitleCase } from '../../data/caseFormat.js'\nimport isoOffset from './_offset.js'\n\nconst applyCaseFormat = (str) => {\n  if (useTitleCase()) {\n    return titleCase(str)\n  }\n  return str\n}\n\n// iso-year padding\nconst padYear = (num) => {\n  if (num >= 0) {\n    return zeroPad(num, 4)\n  } else {\n    num = Math.abs(num)\n    return '-' + zeroPad(num, 4)\n  }\n}\n\nconst format = {\n  day: (s) => applyCaseFormat(s.dayName()),\n  'day-short': (s) => applyCaseFormat(_short()[s.day()]),\n  'day-number': (s) => s.day(),\n  'day-ordinal': (s) => ordinal(s.day()),\n  'day-pad': (s) => zeroPad(s.day()),\n\n  date: (s) => s.date(),\n  'date-ordinal': (s) => ordinal(s.date()),\n  'date-pad': (s) => zeroPad(s.date()),\n\n  month: (s) => applyCaseFormat(s.monthName()),\n  'month-short': (s) => applyCaseFormat(short()[s.month()]),\n  'month-number': (s) => s.month(),\n  'month-ordinal': (s) => ordinal(s.month()),\n  'month-pad': (s) => zeroPad(s.month()),\n  'iso-month': (s) => zeroPad(s.month() + 1), //1-based months\n\n  year: (s) => {\n    let year = s.year()\n    if (year > 0) {\n      return year\n    }\n    year = Math.abs(year)\n    return year + ' BC'\n  },\n  'year-short': (s) => {\n    let year = s.year()\n    if (year > 0) {\n      return `'${String(s.year()).substr(2, 4)}`\n    }\n    year = Math.abs(year)\n    return year + ' BC'\n  },\n  'iso-year': (s) => {\n    let year = s.year()\n    let isNegative = year < 0\n    let str = zeroPad(Math.abs(year), 4) //0-padded\n    if (isNegative) {\n      //negative years are for some reason 6-digits ('-00008')\n      str = zeroPad(str, 6)\n      str = '-' + str\n    }\n    return str\n  },\n\n  time: (s) => s.time(),\n  'time-24': (s) => `${s.hour24()}:${zeroPad(s.minute())}`,\n\n  hour: (s) => s.hour12(),\n  'hour-pad': (s) => zeroPad(s.hour12()),\n  'hour-24': (s) => s.hour24(),\n  'hour-24-pad': (s) => zeroPad(s.hour24()),\n\n  minute: (s) => s.minute(),\n  'minute-pad': (s) => zeroPad(s.minute()),\n  second: (s) => s.second(),\n  'second-pad': (s) => zeroPad(s.second()),\n  millisecond: (s) => s.millisecond(),\n  'millisecond-pad': (s) => zeroPad(s.millisecond(), 3),\n\n  ampm: (s) => s.ampm(),\n  AMPM: (s) => s.ampm().toUpperCase(),\n  quarter: (s) => 'Q' + s.quarter(),\n  season: (s) => s.season(),\n  era: (s) => s.era(),\n  json: (s) => s.json(),\n  timezone: (s) => s.timezone().name,\n  offset: (s) => isoOffset(s),\n\n  numeric: (s) => `${s.year()}/${zeroPad(s.month() + 1)}/${zeroPad(s.date())}`, // yyyy/mm/dd\n  'numeric-us': (s) => `${zeroPad(s.month() + 1)}/${zeroPad(s.date())}/${s.year()}`, // mm/dd/yyyy\n  'numeric-uk': (s) => `${zeroPad(s.date())}/${zeroPad(s.month() + 1)}/${s.year()}`, //dd/mm/yyyy\n  'mm/dd': (s) => `${zeroPad(s.month() + 1)}/${zeroPad(s.date())}`, //mm/dd\n\n  // ... https://en.wikipedia.org/wiki/ISO_8601 ;(((\n  iso: (s) => {\n    let year = s.format('iso-year')\n    let month = zeroPad(s.month() + 1) //1-based months\n    let date = zeroPad(s.date())\n    let hour = zeroPad(s.h24())\n    let minute = zeroPad(s.minute())\n    let second = zeroPad(s.second())\n    let ms = zeroPad(s.millisecond(), 3)\n    let offset = isoOffset(s)\n    return `${year}-${month}-${date}T${hour}:${minute}:${second}.${ms}${offset}` //2018-03-09T08:50:00.000-05:00\n  },\n  'iso-short': (s) => {\n    let month = zeroPad(s.month() + 1) //1-based months\n    let date = zeroPad(s.date())\n    let year = padYear(s.year())\n    return `${year}-${month}-${date}` //2017-02-15\n  },\n  'iso-utc': (s) => {\n    return new Date(s.epoch).toISOString() //2017-03-08T19:45:28.367Z\n  },\n\n  //i made these up\n  nice: (s) => `${short()[s.month()]} ${ordinal(s.date())}, ${s.time()}`,\n  'nice-24': (s) =>\n    `${short()[s.month()]} ${ordinal(s.date())}, ${s.hour24()}:${zeroPad(\n      s.minute()\n    )}`,\n  'nice-year': (s) => `${short()[s.month()]} ${ordinal(s.date())}, ${s.year()}`,\n  'nice-day': (s) =>\n    `${_short()[s.day()]} ${applyCaseFormat(short()[s.month()])} ${ordinal(\n      s.date()\n    )}`,\n  'nice-full': (s) =>\n    `${s.dayName()} ${applyCaseFormat(s.monthName())} ${ordinal(s.date())}, ${s.time()}`,\n  'nice-full-24': (s) =>\n    `${s.dayName()} ${applyCaseFormat(s.monthName())} ${ordinal(\n      s.date()\n    )}, ${s.hour24()}:${zeroPad(s.minute())}`\n}\n//aliases\nconst aliases = {\n  'day-name': 'day',\n  'month-name': 'month',\n  'iso 8601': 'iso',\n  'time-h24': 'time-24',\n  'time-12': 'time',\n  'time-h12': 'time',\n  tz: 'timezone',\n  'day-num': 'day-number',\n  'month-num': 'month-number',\n  'month-iso': 'iso-month',\n  'year-iso': 'iso-year',\n  'nice-short': 'nice',\n  'nice-short-24': 'nice-24',\n  mdy: 'numeric-us',\n  dmy: 'numeric-uk',\n  ymd: 'numeric',\n  'yyyy/mm/dd': 'numeric',\n  'mm/dd/yyyy': 'numeric-us',\n  'dd/mm/yyyy': 'numeric-us',\n  'little-endian': 'numeric-uk',\n  'big-endian': 'numeric',\n  'day-nice': 'nice-day'\n}\nObject.keys(aliases).forEach((k) => (format[k] = format[aliases[k]]))\n\nconst printFormat = (s, str = '') => {\n  //don't print anything if it's an invalid date\n  if (s.isValid() !== true) {\n    return ''\n  }\n  //support .format('month')\n  if (format.hasOwnProperty(str)) {\n    let out = format[str](s) || ''\n    if (str !== 'json') {\n      out = String(out)\n      if (str.toLowerCase() !== 'ampm') {\n        out = applyCaseFormat(out)\n      }\n    }\n    return out\n  }\n  //support '{hour}:{minute}' notation\n  if (str.indexOf('{') !== -1) {\n    let sections = /\\{(.+?)\\}/g\n    str = str.replace(sections, (_, fmt) => {\n      fmt = fmt.toLowerCase().trim()\n      if (format.hasOwnProperty(fmt)) {\n        let out = String(format[fmt](s))\n        if (fmt.toLowerCase() !== 'ampm') {\n          return applyCaseFormat(out)\n        }\n        return out\n      }\n      return ''\n    })\n    return str\n  }\n\n  return s.format('iso-short')\n}\nexport default printFormat\n", "import { zeroPad as pad } from '../../fns.js'\nimport { formatTimezone } from '../../fns.js'\n//parse this insane unix-time-templating thing, from the 19th century\n//http://unicode.org/reports/tr35/tr35-25.html#Date_Format_Patterns\n\n//time-symbols we support\nconst mapping = {\n  G: (s) => s.era(),\n  GG: (s) => s.era(),\n  GGG: (s) => s.era(),\n  GGGG: (s) => (s.era() === 'AD' ? 'Anno Domini' : 'Before Christ'),\n  //year\n  y: (s) => s.year(),\n  yy: (s) => {\n    //last two chars\n    return pad(Number(String(s.year()).substr(2, 4)))\n  },\n  yyy: (s) => s.year(),\n  yyyy: (s) => s.year(),\n  yyyyy: (s) => '0' + s.year(),\n  // u: (s) => {},//extended non-gregorian years\n\n  //quarter\n  Q: (s) => s.quarter(),\n  QQ: (s) => s.quarter(),\n  QQQ: (s) => s.quarter(),\n  QQQQ: (s) => s.quarter(),\n\n  //month\n  M: (s) => s.month() + 1,\n  MM: (s) => pad(s.month() + 1),\n  MMM: (s) => s.format('month-short'),\n  MMMM: (s) => s.format('month'),\n\n  //week\n  w: (s) => s.week(),\n  ww: (s) => pad(s.week()),\n  //week of month\n  // W: (s) => s.week(),\n\n  //date of month\n  d: (s) => s.date(),\n  dd: (s) => pad(s.date()),\n  //date of year\n  D: (s) => s.dayOfYear(),\n  DD: (s) => pad(s.dayOfYear()),\n  DDD: (s) => pad(s.dayOfYear(), 3),\n\n  // F: (s) => {},//date of week in month\n  // g: (s) => {},//modified julian day\n\n  //day\n  E: (s) => s.format('day-short'),\n  EE: (s) => s.format('day-short'),\n  EEE: (s) => s.format('day-short'),\n  EEEE: (s) => s.format('day'),\n  EEEEE: (s) => s.format('day')[0],\n  e: (s) => s.day(),\n  ee: (s) => s.day(),\n  eee: (s) => s.format('day-short'),\n  eeee: (s) => s.format('day'),\n  eeeee: (s) => s.format('day')[0],\n\n  //am/pm\n  a: (s) => s.ampm().toUpperCase(),\n  aa: (s) => s.ampm().toUpperCase(),\n  aaa: (s) => s.ampm().toUpperCase(),\n  aaaa: (s) => s.ampm().toUpperCase(),\n\n  //hour\n  h: (s) => s.h12(),\n  hh: (s) => pad(s.h12()),\n  H: (s) => s.hour(),\n  HH: (s) => pad(s.hour()),\n  // j: (s) => {},//weird hour format\n\n  m: (s) => s.minute(),\n  mm: (s) => pad(s.minute()),\n  s: (s) => s.second(),\n  ss: (s) => pad(s.second()),\n\n  //milliseconds\n  SSS: (s) => pad(s.millisecond(), 3),\n  //milliseconds in the day\n  A: (s) => s.epoch - s.startOf('day').epoch,\n  //timezone\n  z: (s) => s.timezone().name,\n  zz: (s) => s.timezone().name,\n  zzz: (s) => s.timezone().name,\n  zzzz: (s) => s.timezone().name,\n  Z: (s) => formatTimezone(s.timezone().current.offset),\n  ZZ: (s) => formatTimezone(s.timezone().current.offset),\n  ZZZ: (s) => formatTimezone(s.timezone().current.offset),\n  ZZZZ: (s) => formatTimezone(s.timezone().current.offset, ':')\n}\n\nconst addAlias = (char, to, n) => {\n  let name = char\n  let toName = to\n  for (let i = 0; i < n; i += 1) {\n    mapping[name] = mapping[toName]\n    name += char\n    toName += to\n  }\n}\naddAlias('q', 'Q', 4)\naddAlias('L', 'M', 4)\naddAlias('Y', 'y', 4)\naddAlias('c', 'e', 4)\naddAlias('k', 'H', 2)\naddAlias('K', 'h', 2)\naddAlias('S', 's', 2)\naddAlias('v', 'z', 4)\naddAlias('V', 'Z', 4)\n\n// support unix-style escaping with ' character\nconst escapeChars = function (arr) {\n  for (let i = 0; i < arr.length; i += 1) {\n    if (arr[i] === `'`) {\n      // greedy-search for next apostrophe\n      for (let o = i + 1; o < arr.length; o += 1) {\n        if (arr[o]) {\n          arr[i] += arr[o]\n        }\n        if (arr[o] === `'`) {\n          arr[o] = null\n          break\n        }\n        arr[o] = null\n      }\n    }\n  }\n  return arr.filter((ch) => ch)\n}\n\n//combine consecutive chars, like 'yyyy' as one.\nconst combineRepeated = function (arr) {\n  for (let i = 0; i < arr.length; i += 1) {\n    let c = arr[i]\n    // greedy-forward\n    for (let o = i + 1; o < arr.length; o += 1) {\n      if (arr[o] === c) {\n        arr[i] += arr[o]\n        arr[o] = null\n      } else {\n        break\n      }\n    }\n  }\n  // '' means one apostrophe\n  arr = arr.filter((ch) => ch)\n  arr = arr.map((str) => {\n    if (str === `''`) {\n      str = `'`\n    }\n    return str\n  })\n  return arr\n}\n\nconst unixFmt = (s, str) => {\n  let arr = str.split('')\n  // support character escaping\n  arr = escapeChars(arr)\n  //combine 'yyyy' as string.\n  arr = combineRepeated(arr)\n  return arr.reduce((txt, c) => {\n    if (mapping[c] !== undefined) {\n      txt += mapping[c](s) || ''\n    } else {\n      // 'unescape'\n      if (/^'.{1,}'$/.test(c)) {\n        c = c.replace(/'/g, '')\n      }\n      txt += c\n    }\n    return txt\n  }, '')\n}\nexport default unixFmt\n", "import { normalize } from '../fns.js'\nconst units = ['year', 'season', 'quarter', 'month', 'week', 'day', 'quarterHour', 'hour', 'minute']\n\nconst doUnit = function (s, k) {\n  let start = s.clone().startOf(k)\n  let end = s.clone().endOf(k)\n  let duration = end.epoch - start.epoch\n  let percent = (s.epoch - start.epoch) / duration\n  return parseFloat(percent.toFixed(2))\n}\n\n//how far it is along, from 0-1\nconst progress = (s, unit) => {\n  if (unit) {\n    unit = normalize(unit)\n    return doUnit(s, unit)\n  }\n  let obj = {}\n  units.forEach(k => {\n    obj[k] = doUnit(s, k)\n  })\n  return obj\n}\n\nexport default progress\n", "import { normalize } from '../fns.js'\n\n//round to either current, or +1 of this unit\nconst nearest = (s, unit) => {\n  //how far have we gone?\n  let prog = s.progress()\n  unit = normalize(unit)\n  //fix camel-case for this one\n  if (unit === 'quarterhour') {\n    unit = 'quarterHour'\n  }\n  if (prog[unit] !== undefined) {\n    // go forward one?\n    if (prog[unit] > 0.5) {\n      s = s.add(1, unit)\n    }\n    // go to start\n    s = s.startOf(unit)\n  } else if (s.silent === false) {\n    console.warn(\"no known unit '\" + unit + \"'\")\n  }\n  return s\n}\nexport default nearest\n", "//increment until dates are the same\nconst climb = (a, b, unit) => {\n  let i = 0\n  a = a.clone()\n  while (a.isBefore(b)) {\n    //do proper, expensive increment to catch all-the-tricks\n    a = a.add(1, unit)\n    i += 1\n  }\n  //oops, we went too-far..\n  if (a.isAfter(b, unit)) {\n    i -= 1\n  }\n  return i\n}\n\n// do a thurough +=1 on the unit, until they match\n// for speed-reasons, only used on day, month, week.\nconst diffOne = (a, b, unit) => {\n  if (a.isBefore(b)) {\n    return climb(a, b, unit)\n  } else {\n    return climb(b, a, unit) * -1 //reverse it\n  }\n}\n\nexport default diffOne\n", "import diffOne from './one.js'\n\n// don't do anything too fancy here.\n// 2020 - 2019 may be 1 year, or 0 years\n// - '1 year difference' means 366 days during a leap year\nconst fastYear = (a, b) => {\n  let years = b.year() - a.year()\n  // should we decrement it by 1?\n  a = a.year(b.year())\n  if (a.isAfter(b)) {\n    years -= 1\n  }\n  return years\n}\n\n// use a waterfall-method for computing a diff of any 'pre-knowable' units\n// compute years, then compute months, etc..\n// ... then ms-math for any very-small units\nconst diff = function (a, b) {\n  // an hour is always the same # of milliseconds\n  // so these units can be 'pre-calculated'\n  let msDiff = b.epoch - a.epoch\n  let obj = {\n    milliseconds: msDiff,\n    seconds: parseInt(msDiff / 1000, 10)\n  }\n  obj.minutes = parseInt(obj.seconds / 60, 10)\n  obj.hours = parseInt(obj.minutes / 60, 10)\n\n  //do the year\n  let tmp = a.clone()\n  obj.years = fastYear(tmp, b)\n  tmp = a.add(obj.years, 'year')\n\n  //there's always 12 months in a year...\n  obj.months = obj.years * 12\n  tmp = a.add(obj.months, 'month')\n  obj.months += diffOne(tmp, b, 'month')\n\n  // there's always 4 quarters in a year...\n  obj.quarters = obj.years * 4\n  obj.quarters += parseInt((obj.months % 12) / 3, 10)\n\n  // there's always atleast 52 weeks in a year..\n  // (month * 4) isn't as close\n  obj.weeks = obj.years * 52\n  tmp = a.add(obj.weeks, 'week')\n  obj.weeks += diffOne(tmp, b, 'week')\n\n  // there's always atleast 7 days in a week\n  obj.days = obj.weeks * 7\n  tmp = a.add(obj.days, 'day')\n  obj.days += diffOne(tmp, b, 'day')\n\n  return obj\n}\nexport default diff\n", "import { beADate, normalize } from '../../fns.js'\nimport waterfall from './waterfall.js'\n\nconst reverseDiff = function (obj) {\n  Object.keys(obj).forEach((k) => {\n    obj[k] *= -1\n  })\n  return obj\n}\n\n// this method counts a total # of each unit, between a, b.\n// '1 month' means 28 days in february\n// '1 year' means 366 days in a leap year\nconst main = function (a, b, unit) {\n  b = beADate(b, a)\n  //reverse values, if necessary\n  let reversed = false\n  if (a.isAfter(b)) {\n    let tmp = a\n    a = b\n    b = tmp\n    reversed = true\n  }\n  //compute them all (i know!)\n  let obj = waterfall(a, b)\n  if (reversed) {\n    obj = reverseDiff(obj)\n  }\n  //return just the requested unit\n  if (unit) {\n    //make sure it's plural-form\n    unit = normalize(unit)\n    if (/s$/.test(unit) !== true) {\n      unit += 's'\n    }\n    if (unit === 'dates') {\n      unit = 'days'\n    }\n    return obj[unit]\n  }\n  return obj\n}\n\nexport default main\n", "/*\nISO 8601 duration format\n// https://en.wikipedia.org/wiki/ISO_8601#Durations\n\"P3Y6M4DT12H30M5S\"\nP the start of the duration representation.\nY the number of years.\nM the number of months.\nW the number of weeks.\nD the number of days.\nT of the representation.\nH the number of hours.\nM the number of minutes.\nS the number of seconds.\n*/\n\nconst fmt = (n) => Math.abs(n) || 0\n\nconst toISO = function (diff) {\n  let iso = 'P'\n  iso += fmt(diff.years) + 'Y'\n  iso += fmt(diff.months) + 'M'\n  iso += fmt(diff.days) + 'DT'\n  iso += fmt(diff.hours) + 'H'\n  iso += fmt(diff.minutes) + 'M'\n  iso += fmt(diff.seconds) + 'S'\n  return iso\n}\nexport default toISO", "\n//get number of hours/minutes... between the two dates\nfunction getDiff(a, b) {\n  const isBefore = a.isBefore(b)\n  const later = isBefore ? b : a\n  let earlier = isBefore ? a : b\n  earlier = earlier.clone()\n  const diff = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  }\n  Object.keys(diff).forEach((unit) => {\n    if (earlier.isSame(later, unit)) {\n      return\n    }\n    let max = earlier.diff(later, unit)\n    earlier = earlier.add(max, unit)\n    diff[unit] = max\n  })\n  //reverse it, if necessary\n  if (isBefore) {\n    Object.keys(diff).forEach((u) => {\n      if (diff[u] !== 0) {\n        diff[u] *= -1\n      }\n    })\n  }\n  return diff\n}\nexport default getDiff", "let units = {\n    second: 'second',\n    seconds: 'seconds',\n    minute: 'minute',\n    minutes: 'minutes',\n    hour: 'hour',\n    hours: 'hours',\n    day: 'day',\n    days: 'days',\n    month: 'month',\n    months: 'months',\n    year: 'year',\n    years: 'years',\n};\n\nexport function unitsString(unit) {\n    return units[unit] || '';\n}\n\nexport function set(i18n = {}) {\n    units = {\n        second: i18n.second || units.second,\n        seconds: i18n.seconds || units.seconds,\n        minute: i18n.minute || units.minute,\n        minutes: i18n.minutes || units.minutes,\n        hour: i18n.hour || units.hour,\n        hours: i18n.hours || units.hours,\n        day: i18n.day || units.day,\n        days: i18n.days || units.days,\n        month: i18n.month || units.month,\n        months: i18n.months || units.months,\n        year: i18n.year || units.year,\n        years: i18n.years || units.years,\n    };\n}", "let past = 'past'\nlet future = 'future'\nlet present = 'present'\nlet now = 'now'\nlet almost = 'almost'\nlet over = 'over'\nlet pastDistance = (value) => `${value} ago`\nlet futureDistance = (value) => `in ${value}`\n\nexport function pastDistanceString(value) { return pastDistance(value) }\nexport function futureDistanceString(value) { return futureDistance(value) }\nexport function pastString() { return past }\nexport function futureString() { return future }\nexport function presentString() { return present }\nexport function nowString() { return now }\nexport function almostString() { return almost }\nexport function overString() { return over }\n\nexport function set(i18n) {\n    pastDistance = i18n.pastDistance || pastDistance\n    futureDistance = i18n.futureDistance || futureDistance\n    past = i18n.past || past\n    future = i18n.future || future\n    present = i18n.present || present\n    now = i18n.now || now\n    almost = i18n.almost || almost\n    over = i18n.over || over\n}", "//our conceptual 'break-points' for each unit\nimport {\n unitsString,\n} from \"../../data/units.js\";\nimport {\n  almostString,\n  overString\n} from \"../../data/distance.js\";\n\nconst qualifiers = {\n  months: {\n    almost: 10,\n    over: 4\n  },\n  days: {\n    almost: 25,\n    over: 10\n  },\n  hours: {\n    almost: 20,\n    over: 8\n  },\n  minutes: {\n    almost: 50,\n    over: 20\n  },\n  seconds: {\n    almost: 50,\n    over: 20\n  }\n}\n\n// Expects a plural unit arg\nfunction pluralize(value, unit) {\n  if (value === 1) {\n    return value + ' ' + unitsString(unit.slice(0, -1))\n  }\n  return value + ' ' + unitsString(unit)\n}\n\nconst toSoft = function (diff) {\n  let rounded = null\n  let qualified = null\n  let abbreviated = []\n  let englishValues = []\n  //go through each value and create its text-representation\n  Object.keys(diff).forEach((unit, i, units) => {\n    const value = Math.abs(diff[unit])\n    if (value === 0) {\n      return\n    }\n    abbreviated.push(value + unit[0])\n    const englishValue = pluralize(value, unit)\n    englishValues.push(englishValue)\n    if (!rounded) {\n      rounded = qualified = englishValue\n      if (i > 4) {\n        return\n      }\n      //is it a 'almost' something, etc?\n      const nextUnit = units[i + 1]\n      const nextValue = Math.abs(diff[nextUnit])\n      if (nextValue > qualifiers[nextUnit].almost) {\n        rounded = pluralize(value + 1, unit)\n        qualified = almostString() + ' ' + rounded\n      } else if (nextValue > qualifiers[nextUnit].over) {\n        qualified = overString() + ' ' + englishValue\n      }\n    }\n  })\n\n  return { qualified, rounded, abbreviated, englishValues }\n}\nexport default toSoft", "import { beADate } from '../../fns.js'\nimport toISO from './_iso.js'\nimport getDiff from './getDiff.js'\nimport soften from './soften.js'\nimport {\n  pastString,\n  futureString,\n  nowString,\n  presentString,\n  pastDistanceString,\n  futureDistanceString\n} from \"../../data/distance.js\";\n//by spencermountain + Shaun Grady\n\n//create the human-readable diff between the two dates\nconst since = (start, end) => {\n  end = beADate(end, start)\n  const diff = getDiff(start, end)\n  const isNow = Object.keys(diff).every((u) => !diff[u])\n  if (isNow === true) {\n    return {\n      diff,\n      rounded: nowString(),\n      qualified: nowString(),\n      precise: nowString(),\n      abbreviated: [],\n      iso: 'P0Y0M0DT0H0M0S',\n      direction: presentString(),\n    }\n  }\n  let precise\n  let direction = futureString()\n\n  let { rounded, qualified, englishValues, abbreviated } = soften(diff)\n\n  //make them into a string\n  precise = englishValues.splice(0, 2).join(', ')\n  //handle before/after logic\n  if (start.isAfter(end) === true) {\n    rounded = pastDistanceString(rounded)\n    qualified = pastDistanceString(qualified)\n    precise = pastDistanceString(precise)\n    direction = pastString()\n  } else {\n    rounded = futureDistanceString(rounded)\n    qualified = futureDistanceString(qualified)\n    precise = futureDistanceString(precise)\n  }\n  // https://en.wikipedia.org/wiki/ISO_8601#Durations\n  // P[n]Y[n]M[n]DT[n]H[n]M[n]S \n  let iso = toISO(diff)\n  return {\n    diff,\n    rounded,\n    qualified,\n    precise,\n    abbreviated,\n    iso,\n    direction,\n  }\n}\n\nexport default since\n", "//https://www.timeanddate.com/calendar/aboutseasons.html\n// Spring - from March 1 to May 31;\n// Summer - from June 1 to August 31;\n// Fall (autumn) - from September 1 to November 30; and,\n// Winter - from December 1 to February 28 (February 29 in a leap year).\nconst north = [\n  ['spring', 2, 1],\n  ['summer', 5, 1],\n  ['fall', 8, 1],\n  ['autumn', 8, 1],\n  ['winter', 11, 1] //dec 1\n];\nconst south = [\n  ['fall', 2, 1],\n  ['autumn', 2, 1],\n  ['winter', 5, 1],\n  ['spring', 8, 1],\n  ['summer', 11, 1] //dec 1\n];\n\nexport default { north, south }", "export default [\n  null,\n  [0, 1], //jan 1\n  [3, 1], //apr 1\n  [6, 1], //july 1\n  [9, 1] //oct 1\n]\n", "import seasons from '../data/seasons.js'\nimport quarters from '../data/quarters.js'\nimport walkTo from './set/walk.js'\nimport { normalize } from '../fns.js'\n\nconst units = {\n  second: (s) => {\n    walkTo(s, {\n      millisecond: 0\n    })\n    return s\n  },\n  minute: (s) => {\n    walkTo(s, {\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  quarterhour: (s) => {\n    let minute = s.minutes()\n    if (minute >= 45) {\n      s = s.minutes(45)\n    } else if (minute >= 30) {\n      s = s.minutes(30)\n    } else if (minute >= 15) {\n      s = s.minutes(15)\n    } else {\n      s = s.minutes(0)\n    }\n    walkTo(s, {\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  hour: (s) => {\n    walkTo(s, {\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  day: (s) => {\n    walkTo(s, {\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  week: (s) => {\n    let original = s.clone()\n    s = s.day(s._weekStart) //monday\n    if (s.isAfter(original)) {\n      s = s.subtract(1, 'week')\n    }\n    walkTo(s, {\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  month: (s) => {\n    walkTo(s, {\n      date: 1,\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  quarter: (s) => {\n    let q = s.quarter()\n    if (quarters[q]) {\n      walkTo(s, {\n        month: quarters[q][0],\n        date: quarters[q][1],\n        hour: 0,\n        minute: 0,\n        second: 0,\n        millisecond: 0\n      })\n    }\n    return s\n  },\n  season: (s) => {\n    let current = s.season()\n    let hem = 'north'\n    if (s.hemisphere() === 'South') {\n      hem = 'south'\n    }\n    for (let i = 0; i < seasons[hem].length; i++) {\n      if (seasons[hem][i][0] === current) {\n        //winter goes between years\n        let year = s.year()\n        if (current === 'winter' && s.month() < 3) {\n          year -= 1\n        }\n        walkTo(s, {\n          year,\n          month: seasons[hem][i][1],\n          date: seasons[hem][i][2],\n          hour: 0,\n          minute: 0,\n          second: 0,\n          millisecond: 0\n        })\n        return s\n      }\n    }\n    return s\n  },\n  year: (s) => {\n    walkTo(s, {\n      month: 0,\n      date: 1,\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  decade: (s) => {\n    s = s.startOf('year')\n    let year = s.year()\n    let decade = parseInt(year / 10, 10) * 10\n    s = s.year(decade)\n    return s\n  },\n  century: (s) => {\n    s = s.startOf('year')\n    let year = s.year()\n    // near 0AD goes '-1 | +1'\n    let decade = parseInt(year / 100, 10) * 100\n    s = s.year(decade)\n    return s\n  }\n}\nunits.date = units.day\n\nconst startOf = (a, unit) => {\n  let s = a.clone()\n  unit = normalize(unit)\n  if (units[unit]) {\n    return units[unit](s)\n  }\n  if (unit === 'summer' || unit === 'winter') {\n    s = s.season(unit)\n    return units.season(s)\n  }\n  return s\n}\n\n//piggy-backs off startOf\nconst endOf = (a, unit) => {\n  let s = a.clone()\n  unit = normalize(unit)\n  if (units[unit]) {\n    // go to beginning, go to next one, step back 1ms\n    s = units[unit](s) // startof\n    s = s.add(1, unit)\n    s = s.subtract(1, 'millisecond')\n    return s\n  }\n  return s\n}\nexport {\n  startOf,\n  endOf\n}\n", "import { normalize } from '../fns.js'\nimport { short, long } from '../data/days.js'\n\n//is it 'wednesday'?\nconst isDay = function (unit) {\n  if (short().find((s) => s === unit)) {\n    return true\n  }\n  if (long().find((s) => s === unit)) {\n    return true\n  }\n  return false\n}\n\n// return a list of the weeks/months/days between a -> b\n// returns spacetime objects in the timezone of the input\nconst every = function (start, unit, end) {\n  if (!unit || !end) {\n    return []\n  }\n  //cleanup unit param\n  unit = normalize(unit)\n  //cleanup to param\n  end = start.clone().set(end)\n  //swap them, if they're backwards\n  if (start.isAfter(end)) {\n    let tmp = start\n    start = end\n    end = tmp\n  }\n\n  //support 'every wednesday'\n  let d = start.clone()\n  if (isDay(unit)) {\n    d = d.next(unit)\n    unit = 'week'\n  } else {\n    let first = d.startOf(unit)\n    if (first.isBefore(start)) {\n      d = d.next(unit)\n    }\n  }\n  //okay, actually start doing it\n  let result = []\n  while (d.isBefore(end)) {\n    result.push(d)\n    d = d.add(1, unit)\n  }\n  return result\n}\nexport default every\n", "import findTz from './find.js'\nimport inSummerTime from './summerTime.js'\n\nconst parseDst = dst => {\n  if (!dst) {\n    return []\n  }\n  return dst.split('->')\n}\n\n//iana codes are case-sensitive, technically\nconst titleCase = str => {\n  str = str[0].toUpperCase() + str.substr(1)\n  str = str.replace(/[\\/_-]([a-z])/gi, s => {\n    return s.toUpperCase()\n  })\n  str = str.replace(/_(of|es)_/i, (s) => s.toLowerCase())\n  str = str.replace(/\\/gmt/i, '/GMT')\n  str = str.replace(/\\/Dumontdurville$/i, '/DumontDUrville')\n  str = str.replace(/\\/Mcmurdo$/i, '/McMurdo')\n  str = str.replace(/\\/Port-au-prince$/i, '/Port-au-Prince')\n  return str\n}\n\n//get metadata about this timezone\nconst timezone = s => {\n  let zones = s.timezones\n  let tz = s.tz\n  if (zones.hasOwnProperty(tz) === false) {\n    tz = findTz(s.tz, zones)\n  }\n  if (tz === null) {\n    if (s.silent === false) {\n      console.warn(\"Warn: could not find given or local timezone - '\" + s.tz + \"'\")\n    }\n    return {\n      current: {\n        epochShift: 0\n      }\n    }\n  }\n  let found = zones[tz]\n  let result = {\n    name: titleCase(tz),\n    hasDst: Boolean(found.dst),\n    default_offset: found.offset,\n    //do north-hemisphere version as default (sorry!)\n    hemisphere: found.hem === 's' ? 'South' : 'North',\n    current: {}\n  }\n\n  if (result.hasDst) {\n    let arr = parseDst(found.dst)\n    result.change = {\n      start: arr[0],\n      back: arr[1]\n    }\n  }\n  //find the offsets for summer/winter times\n  //(these variable names are north-centric)\n  let summer = found.offset // (july)\n  let winter = summer // (january) assume it's the same for now\n  if (result.hasDst === true) {\n    if (result.hemisphere === 'North') {\n      winter = summer - 1\n    } else {\n      //southern hemisphere\n      winter = found.offset + 1\n    }\n  }\n\n  //find out which offset to use right now\n  //use 'summer' time july-time\n  if (result.hasDst === false) {\n    result.current.offset = summer\n    result.current.isDST = false\n  } else if (inSummerTime(s.epoch, result.change.start, result.change.back, summer, winter) === true) {\n    result.current.offset = summer\n    result.current.isDST = result.hemisphere === 'North' //dst 'on' in winter in north\n  } else {\n    //use 'winter' january-time\n    result.current.offset = winter\n    result.current.isDST = result.hemisphere === 'South' //dst 'on' in summer in south\n  }\n  return result\n}\nexport default timezone\n", "import format from './methods/format/index.js'\nimport unixFmt from './methods/format/unixFmt.js'\nimport progress from './methods/progress.js'\nimport nearest from './methods/nearest.js'\nimport diff from './methods/diff/index.js'\nimport since from './methods/since/index.js'\nimport { startOf as _startOf, endOf as _endOf } from './methods/startOf.js'\nimport every from './methods/every.js'\nimport timezone from './timezone/index.js'\nimport findTz from './timezone/find.js'\nimport handleInput from './input/index.js'\nimport { isLeapYear } from './fns.js'\nimport { short, long } from './data/days.js'\nconst units = [\n  'century',\n  'decade',\n  'year',\n  'month',\n  'date',\n  'day',\n  'hour',\n  'minute',\n  'second',\n  'millisecond'\n]\n\n//the spacetime instance methods (also, the API)\nconst methods = {\n  set: function (input, tz) {\n    let s = this.clone()\n    s = handleInput(s, input, null)\n    if (tz) {\n      this.tz = findTz(tz)\n    }\n    return s\n  },\n  timezone: function () {\n    return timezone(this)\n  },\n  isDST: function () {\n    return timezone(this).current.isDST\n  },\n  hasDST: function () {\n    return timezone(this).hasDst\n  },\n  offset: function () {\n    return timezone(this).current.offset * 60\n  },\n  hemisphere: function () {\n    return timezone(this).hemisphere\n  },\n  format: function (fmt) {\n    return format(this, fmt)\n  },\n  unixFmt: function (fmt) {\n    return unixFmt(this, fmt)\n  },\n  startOf: function (unit) {\n    return _startOf(this, unit)\n  },\n  endOf: function (unit) {\n    return _endOf(this, unit)\n  },\n  leapYear: function () {\n    let year = this.year()\n    return isLeapYear(year)\n  },\n  progress: function (unit) {\n    return progress(this, unit)\n  },\n  nearest: function (unit) {\n    return nearest(this, unit)\n  },\n  diff: function (d, unit) {\n    return diff(this, d, unit)\n  },\n  since: function (d) {\n    if (!d) {\n      d = this.clone().set()\n    }\n    return since(this, d)\n  },\n  next: function (unit) {\n    let s = this.add(1, unit)\n    return s.startOf(unit)\n  },\n  //the start of the previous year/week/century\n  last: function (unit) {\n    let s = this.subtract(1, unit)\n    return s.startOf(unit)\n  },\n  isValid: function () {\n    //null/undefined epochs\n    if (!this.epoch && this.epoch !== 0) {\n      return false\n    }\n    return !isNaN(this.d.getTime())\n  },\n  //travel to this timezone\n  goto: function (tz) {\n    let s = this.clone()\n    s.tz = findTz(tz, s.timezones) //science!\n    return s\n  },\n  //get each week/month/day between a -> b\n  every: function (unit, to) {\n    // allow swapping these params:\n    if (typeof unit === 'object' && typeof to === 'string') {\n      let tmp = to\n      to = unit\n      unit = tmp\n    }\n    return every(this, unit, to)\n  },\n  isAwake: function () {\n    let hour = this.hour()\n    //10pm -> 8am\n    if (hour < 8 || hour > 22) {\n      return false\n    }\n    return true\n  },\n  isAsleep: function () {\n    return !this.isAwake()\n  },\n  daysInMonth: function () {\n    switch (this.month()) {\n      case 0:\n        return 31\n      case 1:\n        return this.leapYear() ? 29 : 28\n      case 2:\n        return 31\n      case 3:\n        return 30\n      case 4:\n        return 31\n      case 5:\n        return 30\n      case 6:\n        return 31\n      case 7:\n        return 31\n      case 8:\n        return 30\n      case 9:\n        return 31\n      case 10:\n        return 30\n      case 11:\n        return 31\n      default:\n        throw new Error('Invalid Month state.')\n    }\n  },\n  //pretty-printing\n  log: function () {\n    console.log('')\n    console.log(format(this, 'nice-short'))\n    return this\n  },\n  logYear: function () {\n    console.log('')\n    console.log(format(this, 'full-short'))\n    return this\n  },\n  json: function () {\n    return units.reduce((h, unit) => {\n      h[unit] = this[unit]()\n      return h\n    }, {})\n  },\n  debug: function () {\n    let tz = this.timezone()\n    let date = this.format('MM') + ' ' + this.format('date-ordinal') + ' ' + this.year()\n    date += '\\n     - ' + this.format('time')\n    console.log('\\n\\n', date + '\\n     - ' + tz.name + ' (' + tz.current.offset + ')')\n    return this\n  },\n  //alias of 'since' but opposite - like moment.js\n  from: function (d) {\n    d = this.clone().set(d)\n    return d.since(this)\n  },\n  fromNow: function () {\n    let d = this.clone().set(Date.now())\n    return d.since(this)\n  },\n  weekStart: function (input) {\n    //accept a number directly\n    if (typeof input === 'number') {\n      this._weekStart = input\n      return this\n    }\n    if (typeof input === 'string') {\n      // accept 'wednesday'\n      input = input.toLowerCase().trim()\n      let num = short().indexOf(input)\n      if (num === -1) {\n        num = long().indexOf(input)\n      }\n      if (num === -1) {\n        num = 1 //go back to default\n      }\n      this._weekStart = num\n    } else {\n      console.warn('Spacetime Error: Cannot understand .weekStart() input:', input)\n    }\n    return this\n  }\n}\n// aliases\nmethods.inDST = methods.isDST\nmethods.round = methods.nearest\nmethods.each = methods.every\nexport default methods\n", "// javascript setX methods like setDate() can't be used because of the local bias\n//these methods wrap around them.\nimport ms from '../../data/milliseconds.js'\nimport { mapping } from '../../data/months.js'\nimport monthLength from '../../data/monthLengths.js'\nimport walkTo from './walk.js'\nimport { isLeapYear } from '../../fns.js'\n\nconst validate = (n) => {\n  //handle number as a string\n  if (typeof n === 'string') {\n    n = parseInt(n, 10)\n  }\n  return n\n}\n\nconst order = ['year', 'month', 'date', 'hour', 'minute', 'second', 'millisecond']\n\n//reduce hostile micro-changes when moving dates by millisecond\nconst confirm = (s, tmp, unit) => {\n  let n = order.indexOf(unit)\n  let arr = order.slice(n, order.length)\n  for (let i = 0; i < arr.length; i++) {\n    let want = tmp[arr[i]]()\n    s[arr[i]](want)\n  }\n  return s\n}\n\n// allow specifying setter direction\nconst fwdBkwd = function (s, old, goFwd, unit) {\n  if (goFwd === true && s.isBefore(old)) {\n    s = s.add(1, unit)\n  } else if (goFwd === false && s.isAfter(old)) {\n    s = s.minus(1, unit)\n  }\n  return s\n}\n\nconst milliseconds = function (s, n) {\n  n = validate(n)\n  let current = s.millisecond()\n  let diff = current - n //milliseconds to shift by\n  return s.epoch - diff\n}\n\nconst seconds = function (s, n, goFwd) {\n  n = validate(n)\n  let old = s.clone()\n  let diff = s.second() - n\n  let shift = diff * ms.second\n  s.epoch = s.epoch - shift\n  s = fwdBkwd(s, old, goFwd, 'minute') // specify direction\n  return s.epoch\n}\n\nconst minutes = function (s, n, goFwd) {\n  n = validate(n)\n  let old = s.clone()\n  let diff = s.minute() - n\n  let shift = diff * ms.minute\n  s.epoch -= shift\n  confirm(s, old, 'second')\n  s = fwdBkwd(s, old, goFwd, 'hour') // specify direction\n  return s.epoch\n}\n\nconst hours = function (s, n, goFwd) {\n  n = validate(n)\n  if (n >= 24) {\n    n = 24\n  } else if (n < 0) {\n    n = 0\n  }\n  let old = s.clone()\n  let diff = s.hour() - n\n  let shift = diff * ms.hour\n  s.epoch -= shift\n  // oops, did we change the day?\n  if (s.date() !== old.date()) {\n    s = old.clone()\n    if (diff > 1) {\n      diff -= 1\n    }\n    if (diff < 1) {\n      diff += 1\n    }\n    shift = diff * ms.hour\n    s.epoch -= shift\n  }\n  walkTo(s, {\n    hour: n\n  })\n  confirm(s, old, 'minute')\n  s = fwdBkwd(s, old, goFwd, 'day') // specify direction\n  return s.epoch\n}\n\nconst time = function (s, str, goFwd) {\n  let m = str.match(/([0-9]{1,2})[:h]([0-9]{1,2})(:[0-9]{1,2})? ?(am|pm)?/)\n  if (!m) {\n    //fallback to support just '2am'\n    m = str.match(/([0-9]{1,2}) ?(am|pm)/)\n    if (!m) {\n      return s.epoch\n    }\n    m.splice(2, 0, '0') //add implicit 0 minutes\n    m.splice(3, 0, '') //add implicit seconds\n  }\n  let h24 = false\n  let hour = parseInt(m[1], 10)\n  let minute = parseInt(m[2], 10)\n  if (minute >= 60) {\n    minute = 59\n  }\n  if (hour > 12) {\n    h24 = true\n  }\n  //make the hour into proper 24h time\n  if (h24 === false) {\n    if (m[4] === 'am' && hour === 12) {\n      //12am is midnight\n      hour = 0\n    }\n    if (m[4] === 'pm' && hour < 12) {\n      //12pm is noon\n      hour += 12\n    }\n  }\n  // handle seconds\n  m[3] = m[3] || ''\n  m[3] = m[3].replace(/:/, '')\n  let sec = parseInt(m[3], 10) || 0\n  let old = s.clone()\n  s = s.hour(hour)\n  s = s.minute(minute)\n  s = s.second(sec)\n  s = s.millisecond(0)\n  s = fwdBkwd(s, old, goFwd, 'day') // specify direction\n  return s.epoch\n}\n\nconst date = function (s, n, goFwd) {\n  n = validate(n)\n  //avoid setting february 31st\n  if (n > 28) {\n    let month = s.month()\n    let max = monthLength[month]\n    // support leap day in february\n    if (month === 1 && n === 29 && isLeapYear(s.year())) {\n      max = 29\n    }\n    if (n > max) {\n      n = max\n    }\n  }\n  //avoid setting < 0\n  if (n <= 0) {\n    n = 1\n  }\n  let old = s.clone()\n  walkTo(s, {\n    date: n\n  })\n  s = fwdBkwd(s, old, goFwd, 'month') // specify direction\n  return s.epoch\n}\n\nconst month = function (s, n, goFwd) {\n  if (typeof n === 'string') {\n    if (n === 'sept') {\n      n = 'sep'\n    }\n    n = mapping()[n.toLowerCase()]\n  }\n  n = validate(n)\n  //don't go past december\n  if (n >= 12) {\n    n = 11\n  }\n  if (n <= 0) {\n    n = 0\n  }\n\n  let d = s.date()\n  //there's no 30th of february, etc.\n  if (d > monthLength[n]) {\n    //make it as close as we can..\n    d = monthLength[n]\n  }\n  let old = s.clone()\n  walkTo(s, {\n    month: n,\n    d\n  })\n  s = fwdBkwd(s, old, goFwd, 'year') // specify direction\n  return s.epoch\n}\n\nconst year = function (s, n) {\n  // support '97\n  if (typeof n === 'string' && /^'[0-9]{2}$/.test(n)) {\n    n = n.replace(/'/, '').trim()\n    n = Number(n)\n    // '89 is 1989\n    if (n > 30) {\n      //change this in 10y\n      n = 1900 + n\n    } else {\n      // '12 is 2012\n      n = 2000 + n\n    }\n  }\n  n = validate(n)\n  walkTo(s, {\n    year: n\n  })\n  return s.epoch\n}\n\nconst week = function (s, n, goFwd) {\n  let old = s.clone()\n  n = validate(n)\n  s = s.month(0)\n  s = s.date(1)\n  s = s.day('monday')\n  //first week starts first Thurs in Jan\n  // so mon dec 28th is 1st week\n  // so mon dec 29th is not the week\n  if (s.monthName() === 'december' && s.date() >= 28) {\n    s = s.add(1, 'week')\n  }\n  n -= 1 //1-based\n  s = s.add(n, 'weeks')\n  s = fwdBkwd(s, old, goFwd, 'year') // specify direction\n  return s.epoch\n}\n\nconst dayOfYear = function (s, n, goFwd) {\n  n = validate(n)\n  let old = s.clone()\n  n -= 1 //days are 1-based\n  if (n <= 0) {\n    n = 0\n  } else if (n >= 365) {\n    if (isLeapYear(s.year())) {\n      n = 365\n    } else {\n      n = 364\n    }\n  }\n  s = s.startOf('year')\n  s = s.add(n, 'day')\n  confirm(s, old, 'hour')\n  s = fwdBkwd(s, old, goFwd, 'year') // specify direction\n  return s.epoch\n}\n\nexport {\n  milliseconds,\n  seconds,\n  minutes,\n  hours,\n  time,\n  date,\n  month,\n  year,\n  week,\n  dayOfYear,\n}\n", "let morning = 'am'\nlet evening = 'pm'\n\nexport function am() { return morning }\nexport function pm() { return evening }\nexport function set(i18n) {\n    morning = i18n.am || morning\n    evening = i18n.pm || evening\n}", "import { milliseconds, seconds, minutes, hours, time as _time } from '../set/set.js'\nimport { am, pm } from '../../data/ampm.js'\nimport { zeroPad } from '../../fns.js'\n\nconst methods = {\n  millisecond: function (num) {\n    if (num !== undefined) {\n      let s = this.clone()\n      s.epoch = milliseconds(s, num)\n      return s\n    }\n    return this.d.getMilliseconds()\n  },\n  second: function (num, goFwd) {\n    if (num !== undefined) {\n      let s = this.clone()\n      s.epoch = seconds(s, num, goFwd)\n      return s\n    }\n    return this.d.getSeconds()\n  },\n  minute: function (num, goFwd) {\n    if (num !== undefined) {\n      let s = this.clone()\n      s.epoch = minutes(s, num, goFwd)\n      return s\n    }\n    return this.d.getMinutes()\n  },\n  hour: function (num, goFwd) {\n    let d = this.d\n    if (num !== undefined) {\n      let s = this.clone()\n      s.epoch = hours(s, num, goFwd)\n      return s\n    }\n    return d.getHours()\n  },\n\n  //'3:30' is 3.5\n  hourFloat: function (num, goFwd) {\n    if (num !== undefined) {\n      let s = this.clone()\n      let minute = num % 1\n      minute = minute * 60\n      let hour = parseInt(num, 10)\n      s.epoch = hours(s, hour, goFwd)\n      s.epoch = minutes(s, minute, goFwd)\n      return s\n    }\n    let d = this.d\n    let hour = d.getHours()\n    let minute = d.getMinutes()\n    minute = minute / 60\n    return hour + minute\n  },\n\n  // hour in 12h format\n  hour12: function (str, goFwd) {\n    let d = this.d\n    if (str !== undefined) {\n      let s = this.clone()\n      str = '' + str\n      let m = str.match(/^([0-9]+)(am|pm)$/)\n      if (m) {\n        let hour = parseInt(m[1], 10)\n        if (m[2] === 'pm') {\n          hour += 12\n        }\n        s.epoch = hours(s, hour, goFwd)\n      }\n      return s\n    }\n    //get the hour\n    let hour12 = d.getHours()\n    if (hour12 > 12) {\n      hour12 = hour12 - 12\n    }\n    if (hour12 === 0) {\n      hour12 = 12\n    }\n    return hour12\n  },\n\n  //some ambiguity here with 12/24h\n  time: function (str, goFwd) {\n    if (str !== undefined) {\n      let s = this.clone()\n      str = str.toLowerCase().trim()\n      s.epoch = _time(s, str, goFwd)\n      return s\n    }\n    return `${this.h12()}:${zeroPad(this.minute())}${this.ampm()}`\n  },\n\n  // either 'am' or 'pm'\n  ampm: function (input, goFwd) {\n    // let which = 'am'\n    let which = am()\n    let hour = this.hour()\n    if (hour >= 12) {\n      // which = 'pm'\n      which = pm()\n    }\n    if (typeof input !== 'string') {\n      return which\n    }\n    //okay, we're doing a setter\n    let s = this.clone()\n    input = input.toLowerCase().trim()\n    //ampm should never change the day\n    // - so use `.hour(n)` instead of `.minus(12,'hour')`\n    if (hour >= 12 && input === 'am') {\n      //noon is 12pm\n      hour -= 12\n      return s.hour(hour, goFwd)\n    }\n    if (hour < 12 && input === 'pm') {\n      hour += 12\n      return s.hour(hour, goFwd)\n    }\n    return s\n  },\n\n  //some hard-coded times of day, like 'noon'\n  dayTime: function (str, goFwd) {\n    if (str !== undefined) {\n      const times = {\n        morning: '7:00',\n        breakfast: '7:00',\n        noon: '12:00',\n        lunch: '12:00',\n        afternoon: '14:00',\n        evening: '18:00',\n        dinner: '18:00',\n        night: '23:00',\n        midnight: '00:00'\n      }\n      let s = this.clone()\n      str = str || ''\n      str = str.toLowerCase()\n      if (times.hasOwnProperty(str) === true) {\n        s = s.time(times[str], goFwd)\n      }\n      return s\n    }\n    let h = this.hour()\n    if (h < 6) {\n      return 'night'\n    }\n    if (h < 12) {\n      //until noon\n      return 'morning'\n    }\n    if (h < 17) {\n      //until 5pm\n      return 'afternoon'\n    }\n    if (h < 22) {\n      //until 10pm\n      return 'evening'\n    }\n    return 'night'\n  },\n\n  //parse a proper iso string\n  iso: function (num) {\n    if (num !== undefined) {\n      return this.set(num)\n    }\n    return this.format('iso')\n  }\n}\nexport default methods\n", "import { date as _date } from '../set/set.js'\nimport { aliases, short, long } from '../../data/days.js'\nimport walkTo from '../set/walk.js'\n\nconst methods = {\n  // # day in the month\n  date: function (num, goFwd) {\n    if (num !== undefined) {\n      let s = this.clone()\n      num = parseInt(num, 10)\n      if (num) {\n        s.epoch = _date(s, num, goFwd)\n      }\n      return s\n    }\n    return this.d.getDate()\n  },\n\n  //like 'wednesday' (hard!)\n  day: function (input, goFwd) {\n    if (input === undefined) {\n      return this.d.getDay()\n    }\n    let original = this.clone()\n    let want = input\n    // accept 'wednesday'\n    if (typeof input === 'string') {\n      input = input.toLowerCase()\n      if (aliases.hasOwnProperty(input)) {\n        want = aliases[input]\n      } else {\n        want = short().indexOf(input)\n        if (want === -1) {\n          want = long().indexOf(input)\n        }\n      }\n    }\n    //move approx\n    let day = this.d.getDay()\n    let diff = day - want\n    if (goFwd === true && diff > 0) {\n      diff = diff - 7\n    }\n    if (goFwd === false && diff < 0) {\n      diff = diff + 7\n    }\n    let s = this.subtract(diff, 'days')\n    //tighten it back up\n    walkTo(s, {\n      hour: original.hour(),\n      minute: original.minute(),\n      second: original.second()\n    })\n    return s\n  },\n\n  //these are helpful name-wrappers\n  dayName: function (input, goFwd) {\n    if (input === undefined) {\n      return long()[this.day()]\n    }\n    let s = this.clone()\n    s = s.day(input, goFwd)\n    return s\n  }\n}\nexport default methods\n", "import { dayOfYear as _dayOfYear, week as _week, month as _month, year as _year } from '../set/set.js'\nimport { long } from '../../data/months.js'\nimport quarters from '../../data/quarters.js'\nimport seasons from '../../data/seasons.js'\nimport ms from '../../data/milliseconds.js'\n\nconst clearMinutes = (s) => {\n  s = s.minute(0)\n  s = s.second(0)\n  s = s.millisecond(1)\n  return s\n}\n\nconst methods = {\n  // day 0-366\n  dayOfYear: function (num, goFwd) {\n    if (num !== undefined) {\n      let s = this.clone()\n      s.epoch = _dayOfYear(s, num, goFwd)\n      return s\n    }\n    //days since newyears - jan 1st is 1, jan 2nd is 2...\n    let sum = 0\n    let month = this.d.getMonth()\n    let tmp\n    //count the num days in each month\n    for (let i = 1; i <= month; i++) {\n      tmp = new Date()\n      tmp.setDate(1)\n      tmp.setFullYear(this.d.getFullYear()) //the year matters, because leap-years\n      tmp.setHours(1)\n      tmp.setMinutes(1)\n      tmp.setMonth(i)\n      tmp.setHours(-2) //the last day of the month\n      sum += tmp.getDate()\n    }\n    return sum + this.d.getDate()\n  },\n\n  //since the start of the year\n  week: function (num, goFwd) {\n    // week-setter\n    if (num !== undefined) {\n      let s = this.clone()\n      s.epoch = _week(this, num, goFwd)\n      s = clearMinutes(s)\n      return s\n    }\n    //find-out which week it is\n    let tmp = this.clone()\n    tmp = tmp.month(0)\n    tmp = tmp.date(1)\n    tmp = clearMinutes(tmp)\n    tmp = tmp.day('monday')\n    //don't go into last-year\n    if (tmp.month() === 11 && tmp.date() >= 25) {\n      tmp = tmp.add(1, 'week')\n    }\n\n    // is first monday the 1st?\n    let toAdd = 1\n    if (tmp.date() === 1) {\n      toAdd = 0\n    }\n    tmp = tmp.minus(1, 'second')\n    const thisOne = this.epoch\n    //if the week technically hasn't started yet\n    if (tmp.epoch > thisOne) {\n      return 1\n    }\n    //speed it up, if we can\n    let i = 0\n    let skipWeeks = this.month() * 4\n    // console.log(ms.week+ \" \"+ skipWeeks);\n    tmp.epoch += ms.week * skipWeeks\n    i += skipWeeks\n    for (; i <= 52; i++) {\n      if (tmp.epoch > thisOne) {\n        return i + toAdd\n      }\n      tmp = tmp.add(1, 'week')\n    }\n    return 52\n  },\n  //either name or number\n  month: function (input, goFwd) {\n    if (input !== undefined) {\n      let s = this.clone()\n      s.epoch = _month(s, input, goFwd)\n      return s\n    }\n    return this.d.getMonth()\n  },\n  //'january'\n  monthName: function (input, goFwd) {\n    if (input !== undefined) {\n      let s = this.clone()\n      s = s.month(input, goFwd)\n      return s\n    }\n    return long()[this.month()]\n  },\n\n  //q1, q2, q3, q4\n  quarter: function (num, goFwd) {\n    if (num !== undefined) {\n      if (typeof num === 'string') {\n        num = num.replace(/^q/i, '')\n        num = parseInt(num, 10)\n      }\n      if (quarters[num]) {\n        let s = this.clone()\n        let month = quarters[num][0]\n        s = s.month(month, goFwd)\n        s = s.date(1, goFwd)\n        s = s.startOf('day')\n        return s\n      }\n    }\n    let month = this.d.getMonth()\n    for (let i = 1; i < quarters.length; i++) {\n      if (month < quarters[i][0]) {\n        return i - 1\n      }\n    }\n    return 4\n  },\n\n  //spring, summer, winter, fall\n  season: function (input, goFwd) {\n    let hem = 'north'\n    if (this.hemisphere() === 'South') {\n      hem = 'south'\n    }\n    if (input !== undefined) {    // setter\n      let s = this.clone()\n      for (let i = 0; i < seasons[hem].length; i++) {\n        if (input === seasons[hem][i][0]) {\n          s = s.month(seasons[hem][i][1], goFwd)\n          s = s.date(1)\n          s = s.startOf('day')\n        }\n      }\n      return s\n    }\n    let month = this.d.getMonth()\n    for (let i = 0; i < seasons[hem].length - 1; i++) {\n      if (month >= seasons[hem][i][1] && month < seasons[hem][i + 1][1]) {\n        return seasons[hem][i][0]\n      }\n    }\n    return hem === 'north' ? 'winter' : 'summer'\n  },\n\n  //the year number\n  year: function (num) {\n    if (num !== undefined) {\n      let s = this.clone()\n      s.epoch = _year(s, num)\n      return s\n    }\n    return this.d.getFullYear()\n  },\n\n  //bc/ad years\n  era: function (str) {\n    if (str !== undefined) {\n      let s = this.clone()\n      str = str.toLowerCase()\n      //TODO: there is no year-0AD i think. may have off-by-1 error here\n      let year = s.d.getFullYear()\n      //make '1992' into 1992bc..\n      if (str === 'bc' && year > 0) {\n        s.epoch = _year(s, year * -1)\n      }\n      //make '1992bc' into '1992'\n      if (str === 'ad' && year < 0) {\n        s.epoch = _year(s, year * -1)\n      }\n      return s\n    }\n    if (this.d.getFullYear() < 0) {\n      return 'BC'\n    }\n    return 'AD'\n  },\n\n  // 2019 -> 2010\n  decade: function (input) {\n    if (input !== undefined) {\n      input = String(input)\n      input = input.replace(/([0-9])'?s$/, '$1') //1950's\n      input = input.replace(/([0-9])(th|rd|st|nd)/, '$1') //fix ordinals\n      if (!input) {\n        console.warn('Spacetime: Invalid decade input')\n        return this\n      }\n      // assume 20th century?? for '70s'.\n      if (input.length === 2 && /[0-9][0-9]/.test(input)) {\n        input = '19' + input\n      }\n      let year = Number(input)\n      if (isNaN(year)) {\n        return this\n      }\n      // round it down to the decade\n      year = Math.floor(year / 10) * 10\n      return this.year(year) //.startOf('decade')\n    }\n    return this.startOf('decade').year()\n  },\n  // 1950 -> 19+1\n  century: function (input) {\n    if (input !== undefined) {\n      if (typeof input === 'string') {\n        input = input.replace(/([0-9])(th|rd|st|nd)/, '$1') //fix ordinals\n        input = input.replace(/([0-9]+) ?(b\\.?c\\.?|a\\.?d\\.?)/i, (a, b, c) => {\n          if (c.match(/b\\.?c\\.?/i)) {\n            b = '-' + b\n          }\n          return b\n        })\n        input = input.replace(/c$/, '') //20thC\n      }\n      let year = Number(input)\n      if (isNaN(input)) {\n        console.warn('Spacetime: Invalid century input')\n        return this\n      }\n      // there is no century 0\n      if (year === 0) {\n        year = 1\n      }\n      if (year >= 0) {\n        year = (year - 1) * 100\n      } else {\n        year = (year + 1) * 100\n      }\n      return this.year(year)\n    }\n    // century getter\n    let num = this.startOf('century').year()\n    num = Math.floor(num / 100)\n    if (num < 0) {\n      return num - 1\n    }\n    return num + 1\n  },\n  // 2019 -> 2+1\n  millenium: function (input) {\n    if (input !== undefined) {\n      if (typeof input === 'string') {\n        input = input.replace(/([0-9])(th|rd|st|nd)/, '$1') //fix ordinals\n        input = Number(input)\n        if (isNaN(input)) {\n          console.warn('Spacetime: Invalid millenium input')\n          return this\n        }\n      }\n      if (input > 0) {\n        input -= 1\n      }\n      let year = input * 1000\n      // there is no year 0\n      if (year === 0) {\n        year = 1\n      }\n      return this.year(year)\n    }\n    // get the current millenium\n    let num = Math.floor(this.year() / 1000)\n    if (num >= 0) {\n      num += 1\n    }\n    return num\n  }\n}\nexport default methods\n", "import timeFns from './01-time.js'\nimport dateFns from './02-date.js'\nimport yearFns from './03-year.js'\n\nconst methods = Object.assign({}, timeFns, dateFns, yearFns)\n\n//aliases\nmethods.milliseconds = methods.millisecond\nmethods.seconds = methods.second\nmethods.minutes = methods.minute\nmethods.hours = methods.hour\nmethods.hour24 = methods.hour\nmethods.h12 = methods.hour12\nmethods.h24 = methods.hour24\nmethods.days = methods.day\n\nconst addMethods = Space => {\n  //hook the methods into prototype\n  Object.keys(methods).forEach(k => {\n    Space.prototype[k] = methods[k]\n  })\n}\n\nexport default addMethods\n", "import monthLength from '../../data/monthLengths.js'\nimport { isLeapYear } from '../../fns.js'\n\nconst getMonthLength = function (month, year) {\n  if (month === 1 && isLeapYear(year)) {\n    return 29\n  }\n  return monthLength[month]\n}\n\n//month is the one thing we 'model/compute'\n//- because ms-shifting can be off by enough\nconst rollMonth = (want, old) => {\n  //increment year\n  if (want.month > 0) {\n    let years = parseInt(want.month / 12, 10)\n    want.year = old.year() + years\n    want.month = want.month % 12\n  } else if (want.month < 0) {\n    let m = Math.abs(want.month)\n    let years = parseInt(m / 12, 10)\n    if (m % 12 !== 0) {\n      years += 1\n    }\n    want.year = old.year() - years\n    //ignore extras\n    want.month = want.month % 12\n    want.month = want.month + 12\n    if (want.month === 12) {\n      want.month = 0\n    }\n  }\n  return want\n}\n\n// briefly support day=-2 (this does not need to be perfect.)\nconst rollDaysDown = (want, old, sum) => {\n  want.year = old.year()\n  want.month = old.month()\n  let date = old.date()\n  want.date = date - Math.abs(sum)\n  while (want.date < 1) {\n    want.month -= 1\n    if (want.month < 0) {\n      want.month = 11\n      want.year -= 1\n    }\n    let max = getMonthLength(want.month, want.year)\n    want.date += max\n  }\n  return want\n}\n\n// briefly support day=33 (this does not need to be perfect.)\nconst rollDaysUp = (want, old, sum) => {\n  let year = old.year()\n  let month = old.month()\n  let max = getMonthLength(month, year)\n  while (sum > max) {\n    sum -= max\n    month += 1\n    if (month >= 12) {\n      month -= 12\n      year += 1\n    }\n    max = getMonthLength(month, year)\n  }\n  want.month = month\n  want.date = sum\n  return want\n}\n\nexport const months = rollMonth\nexport const days = rollDaysUp\nexport const daysBack = rollDaysDown\n", "import walkTo from './set/walk.js'\nimport ms from '../data/milliseconds.js'\nimport monthLength from '../data/monthLengths.js'\nimport { months, daysBack, days } from './set/_model.js'\nimport { normalize } from '../fns.js'\n// this logic is a bit of a mess,\n// but briefly:\n// millisecond-math, and some post-processing covers most-things\n// we 'model' the calendar here only a little bit\n// and that usually works-out...\n\nconst order = ['millisecond', 'second', 'minute', 'hour', 'date', 'month']\nlet keep = {\n  second: order.slice(0, 1),\n  minute: order.slice(0, 2),\n  quarterhour: order.slice(0, 2),\n  hour: order.slice(0, 3),\n  date: order.slice(0, 4),\n  month: order.slice(0, 4),\n  quarter: order.slice(0, 4),\n  season: order.slice(0, 4),\n  year: order,\n  decade: order,\n  century: order\n}\nkeep.week = keep.hour\nkeep.season = keep.date\nkeep.quarter = keep.date\n\n// Units need to be dst adjuested\nconst dstAwareUnits = {\n  year: true,\n  quarter: true,\n  season: true,\n  month: true,\n  week: true,\n  date: true\n}\n\nconst keepDate = {\n  month: true,\n  quarter: true,\n  season: true,\n  year: true\n}\n\nconst addMethods = (SpaceTime) => {\n  SpaceTime.prototype.add = function (num, unit) {\n    let s = this.clone()\n\n    if (!unit || num === 0) {\n      return s //don't bother\n    }\n    let old = this.clone()\n    unit = normalize(unit)\n    if (unit === 'millisecond') {\n      s.epoch += num\n      return s\n    }\n    // support 'fortnight' alias\n    if (unit === 'fortnight') {\n      num *= 2\n      unit = 'week'\n    }\n    //move forward by the estimated milliseconds (rough)\n    if (ms[unit]) {\n      s.epoch += ms[unit] * num\n    } else if (unit === 'week' || unit === 'weekend') {\n      s.epoch += ms.day * (num * 7)\n    } else if (unit === 'quarter' || unit === 'season') {\n      s.epoch += ms.month * (num * 3)\n    } else if (unit === 'quarterhour') {\n      s.epoch += ms.minute * 15 * num\n    }\n    //now ensure our milliseconds/etc are in-line\n    let want = {}\n    if (keep[unit]) {\n      keep[unit].forEach((u) => {\n        want[u] = old[u]()\n      })\n    }\n\n    if (dstAwareUnits[unit]) {\n      const diff = old.timezone().current.offset - s.timezone().current.offset\n      s.epoch += diff * 3600 * 1000\n    }\n\n    //ensure month/year has ticked-over\n    if (unit === 'month') {\n      want.month = old.month() + num\n      //month is the one unit we 'model' directly\n      want = months(want, old)\n    }\n    //support coercing a week, too\n    if (unit === 'week') {\n      let sum = old.date() + num * 7\n      if (sum <= 28 && sum > 1) {\n        want.date = sum\n      }\n    }\n    if (unit === 'weekend' && s.dayName() !== 'saturday') {\n      s = s.day('saturday', true) //ensure it's saturday\n    }\n    //support 25-hour day-changes on dst-changes\n    else if (unit === 'date') {\n      if (num < 0) {\n        want = daysBack(want, old, num)\n      } else {\n        //specify a naive date number, if it's easy to do...\n        let sum = old.date() + num\n        // ok, model this one too\n        want = days(want, old, sum)\n      }\n      //manually punt it if we haven't moved at all..\n      if (num !== 0 && old.isSame(s, 'day')) {\n        want.date = old.date() + num\n      }\n    }\n    // ensure a quarter is 3 months over\n    else if (unit === 'quarter') {\n      want.month = old.month() + num * 3\n      want.year = old.year()\n      // handle rollover\n      if (want.month < 0) {\n        let years = Math.floor(want.month / 12)\n        let remainder = want.month + Math.abs(years) * 12\n        want.month = remainder\n        want.year += years\n      } else if (want.month >= 12) {\n        let years = Math.floor(want.month / 12)\n        want.month = want.month % 12\n        want.year += years\n      }\n      want.date = old.date()\n    }\n    //ensure year has changed (leap-years)\n    else if (unit === 'year') {\n      let wantYear = old.year() + num\n      let haveYear = s.year()\n      if (haveYear < wantYear) {\n        let toAdd = Math.floor(num / 4) || 1 //approx num of leap-days\n        s.epoch += Math.abs(ms.day * toAdd)\n      } else if (haveYear > wantYear) {\n        let toAdd = Math.floor(num / 4) || 1 //approx num of leap-days\n        s.epoch += ms.day * toAdd\n      }\n    }\n    //these are easier\n    else if (unit === 'decade') {\n      want.year = s.year() + 10\n    } else if (unit === 'century') {\n      want.year = s.year() + 100\n    }\n    //keep current date, unless the month doesn't have it.\n    if (keepDate[unit]) {\n      let max = monthLength[want.month]\n      want.date = old.date()\n      if (want.date > max) {\n        want.date = max\n      }\n    }\n    if (Object.keys(want).length > 1) {\n      walkTo(s, want)\n    }\n    return s\n  }\n\n  //subtract is only add *-1\n  SpaceTime.prototype.subtract = function (num, unit) {\n    let s = this.clone()\n    return s.add(num * -1, unit)\n  }\n  //add aliases\n  SpaceTime.prototype.minus = SpaceTime.prototype.subtract\n  SpaceTime.prototype.plus = SpaceTime.prototype.add\n}\n\nexport default addMethods\n", "//make a string, for easy comparison between dates\nconst print = {\n  millisecond: (s) => {\n    return s.epoch\n  },\n  second: (s) => {\n    return [s.year(), s.month(), s.date(), s.hour(), s.minute(), s.second()].join('-')\n  },\n  minute: (s) => {\n    return [s.year(), s.month(), s.date(), s.hour(), s.minute()].join('-')\n  },\n  hour: (s) => {\n    return [s.year(), s.month(), s.date(), s.hour()].join('-')\n  },\n  day: (s) => {\n    return [s.year(), s.month(), s.date()].join('-')\n  },\n  week: (s) => {\n    return [s.year(), s.week()].join('-')\n  },\n  month: (s) => {\n    return [s.year(), s.month()].join('-')\n  },\n  quarter: (s) => {\n    return [s.year(), s.quarter()].join('-')\n  },\n  year: (s) => {\n    return s.year()\n  }\n}\nprint.date = print.day\n\nconst addMethods = (SpaceTime) => {\n  SpaceTime.prototype.isSame = function (b, unit, tzAware = true) {\n    let a = this\n    if (!unit) {\n      return null\n    }\n    // support swapped params\n    if (typeof b === 'string' && typeof unit === 'object') {\n      let tmp = b\n      b = unit\n      unit = tmp\n    }\n    if (typeof b === 'string' || typeof b === 'number') {\n      b = new SpaceTime(b, this.timezone.name)\n    }\n    //support 'seconds' aswell as 'second'\n    unit = unit.replace(/s$/, '')\n\n    // make them the same timezone for proper comparison\n    if (tzAware === true && a.tz !== b.tz) {\n      b = b.clone()\n      b.tz = a.tz\n    }\n    if (print[unit]) {\n      return print[unit](a) === print[unit](b)\n    }\n    return null\n  }\n}\n\nexport default addMethods\n", "import { beADate, getEpoch } from '../fns.js'\n\nconst addMethods = SpaceTime => {\n  const methods = {\n    isAfter: function (d) {\n      d = beADate(d, this)\n      let epoch = getEpoch(d)\n      if (epoch === null) {\n        return null\n      }\n      return this.epoch > epoch\n    },\n    isBefore: function (d) {\n      d = beADate(d, this)\n      let epoch = getEpoch(d)\n      if (epoch === null) {\n        return null\n      }\n      return this.epoch < epoch\n    },\n    isEqual: function (d) {\n      d = beADate(d, this)\n      let epoch = getEpoch(d)\n      if (epoch === null) {\n        return null\n      }\n      return this.epoch === epoch\n    },\n    isBetween: function (start, end, isInclusive = false) {\n      start = beADate(start, this)\n      end = beADate(end, this)\n      let startEpoch = getEpoch(start)\n      if (startEpoch === null) {\n        return null\n      }\n      let endEpoch = getEpoch(end)\n      if (endEpoch === null) {\n        return null\n      }\n      if (isInclusive) {\n        return this.isBetween(start, end) || this.isEqual(start) || this.isEqual(end);\n      }\n      return startEpoch < this.epoch && this.epoch < endEpoch\n    }\n  }\n\n  //hook them into proto\n  Object.keys(methods).forEach(k => {\n    SpaceTime.prototype[k] = methods[k]\n  })\n}\n\nexport default addMethods\n", "import { isObject, isBoolean } from '../fns.js'\nimport { set as setD } from '../data/days.js'\nimport { set as setM } from '../data/months.js'\nimport { set as setTcf } from '../data/caseFormat.js'\nimport { set as setAmpm } from '../data/ampm.js'\nimport { set as setDistance } from '../data/distance.js'\nimport { set as setUnits } from '../data/units.js'\n\nconst addMethods = SpaceTime => {\n  const methods = {\n    i18n: function (data) {\n      //change the day names\n      if (isObject(data.days)) {\n        setD(data.days)\n      }\n      //change the month names\n      if (isObject(data.months)) {\n        setM(data.months)\n      }\n\n      //change the display style of the month / day names\n      if (isBoolean(data.useTitleCase)) {\n        setTcf(data.useTitleCase)\n      }\n\n      //change am and pm strings\n      if (isObject(data.ampm)) {\n        setAmpm(data.ampm)\n      }\n\n      //change distance strings\n      if(isObject(data.distance)){\n        setDistance(data.distance)\n      }\n\n      //change units strings\n      if(isObject(data.units)){\n        setUnits(data.units)\n      }\n\n      return this\n    }\n  }\n\n  //hook them into proto\n  Object.keys(methods).forEach(k => {\n    SpaceTime.prototype[k] = methods[k]\n  })\n}\n\nexport default addMethods\n", "import quickOffset from './timezone/quick.js'\nimport findTz from './timezone/find.js'\nimport handleInput from './input/index.js'\nimport methods from './methods.js'\nimport zones from '../zonefile/unpack.js'\nimport queryFns from './methods/query/index.js'\nimport addFns from './methods/add.js'\nimport sameFns from './methods/same.js'\nimport compareFns from './methods/compare.js'\nimport i18nFns from './methods/i18n.js'\n\nlet timezones = zones\n// fake timezone-support, for fakers (es5 class)\nconst SpaceTime = function (input, tz, options = {}) {\n  // the holy moment\n  this.epoch = null\n  // the shift for the given timezone\n  this.tz = findTz(tz, timezones)\n  // whether to output warnings to console\n  this.silent = typeof options.silent !== 'undefined' ? options.silent : true\n  // favour british interpretation of 02/02/2018, etc\n  this.british = options.dmy || options.british\n\n  // does the week start on sunday, or monday:\n  this._weekStart = 1 // default to monday\n  if (options.weekStart !== undefined) {\n    this._weekStart = options.weekStart\n  }\n  // the reference today date object, (for testing)\n  this._today = {}\n  if (options.today !== undefined) {\n    this._today = options.today\n  }\n  // dunno if this is a good idea, or not\n  // Object.defineProperty(this, 'parsers', {\n  //   enumerable: false,\n  //   writable: true,\n  //   value: parsers\n  // })\n  // add getter/setters\n  Object.defineProperty(this, 'd', {\n    // return a js date object\n    get: function () {\n      let offset = quickOffset(this)\n      // every computer is somewhere- get this computer's built-in offset\n      let bias = new Date(this.epoch).getTimezoneOffset() || 0\n      // movement\n      let shift = bias + offset * 60 //in minutes\n      shift = shift * 60 * 1000 //in ms\n      // remove this computer's offset\n      let epoch = this.epoch + shift\n      let d = new Date(epoch)\n      return d\n    }\n  })\n  // add this data on the object, to allow adding new timezones\n  Object.defineProperty(this, 'timezones', {\n    get: () => timezones,\n    set: (obj) => {\n      timezones = obj\n      return obj\n    }\n  })\n  // parse the various formats\n  let tmp = handleInput(this, input)\n  this.epoch = tmp.epoch\n}\n\n// (add instance methods to prototype)\nObject.keys(methods).forEach((k) => {\n  SpaceTime.prototype[k] = methods[k]\n})\n\n// \u00AF\\_(\u30C4)_/\u00AF\nSpaceTime.prototype.clone = function () {\n  return new SpaceTime(this.epoch, this.tz, {\n    silent: this.silent,\n    weekStart: this._weekStart,\n    today: this._today,\n    parsers: this.parsers\n  })\n}\n\n/**\n * @deprecated use toNativeDate()\n * @returns native date object at the same epoch\n */\nSpaceTime.prototype.toLocalDate = function () {\n  return this.toNativeDate()\n}\n\n/**\n * @returns native date object at the same epoch\n */\nSpaceTime.prototype.toNativeDate = function () {\n  return new Date(this.epoch)\n}\n\n// append more methods\nqueryFns(SpaceTime)\naddFns(SpaceTime)\nsameFns(SpaceTime)\ncompareFns(SpaceTime)\ni18nFns(SpaceTime)\n\nexport default SpaceTime\n", "import Spacetime from './spacetime.js'\n// const timezones = require('../data');\n\nconst whereIts = (a, b) => {\n  let start = new Spacetime(null)\n  let end = new Spacetime(null)\n  start = start.time(a)\n  //if b is undefined, use as 'within one hour'\n  if (b) {\n    end = end.time(b)\n  } else {\n    end = start.add(59, 'minutes')\n  }\n\n  let startHour = start.hour()\n  let endHour = end.hour()\n  let tzs = Object.keys(start.timezones).filter((tz) => {\n    if (tz.indexOf('/') === -1) {\n      return false\n    }\n    let m = new Spacetime(null, tz)\n    let hour = m.hour()\n    //do 'calendar-compare' not real-time-compare\n    if (hour >= startHour && hour <= endHour) {\n      //test minutes too, if applicable\n      if (hour === startHour && m.minute() < start.minute()) {\n        return false\n      }\n      if (hour === endHour && m.minute() > end.minute()) {\n        return false\n      }\n      return true\n    }\n    return false\n  })\n  return tzs\n}\nexport default whereIts\n", "export default '7.5.0'", "import Spacetime from './spacetime.js'\nimport whereIts from './whereIts.js'\nimport version from './_version.js'\n\nconst main = (input, tz, options) => new Spacetime(input, tz, options)\n\n// set all properties of a given 'today' object\nconst setToday = function (s) {\n  let today = s._today || {}\n  Object.keys(today).forEach((k) => {\n    s = s[k](today[k])\n  })\n  return s\n}\n\n//some helper functions on the main method\nmain.now = (tz, options) => {\n  let s = new Spacetime(new Date().getTime(), tz, options)\n  s = setToday(s)\n  return s\n}\nmain.today = (tz, options) => {\n  let s = new Spacetime(new Date().getTime(), tz, options)\n  s = setToday(s)\n  return s.startOf('day')\n}\nmain.tomorrow = (tz, options) => {\n  let s = new Spacetime(new Date().getTime(), tz, options)\n  s = setToday(s)\n  return s.add(1, 'day').startOf('day')\n}\nmain.yesterday = (tz, options) => {\n  let s = new Spacetime(new Date().getTime(), tz, options)\n  s = setToday(s)\n  return s.subtract(1, 'day').startOf('day')\n}\nmain.extend = function (obj = {}) {\n  Object.keys(obj).forEach((k) => {\n    Spacetime.prototype[k] = obj[k]\n  })\n  return this\n}\nmain.timezones = function () {\n  let s = new Spacetime()\n  return s.timezones\n}\nmain.max = function (tz, options) {\n  let s = new Spacetime(null, tz, options)\n  s.epoch = 8640000000000000\n  return s\n}\nmain.min = function (tz, options) {\n  let s = new Spacetime(null, tz, options)\n  s.epoch = -8640000000000000\n  return s\n}\n\n//find tz by time\nmain.whereIts = whereIts\nmain.version = version\n\n//aliases:\nmain.plugin = main.extend\nexport default main\n"],
  "mappings": ";;;AAAA,IAAM,eAAe,KAAK,KAAK;AAG/B,IAAM,QAAQ,CAAC,WAAW,QAAQA,UAAS;AACzC,QAAM,CAACC,QAAO,IAAI,IAAI,UAAU,MAAM,GAAG;AACzC,QAAM,CAAC,KAAK,IAAI,IAAI,KAAK,MAAM,GAAG;AAClC,SAAO,KAAK,IAAID,OAAMC,SAAQ,GAAG,KAAK,IAAI,IAAI,SAAS;AACzD;AAGA,IAAM,eAAe,CAAC,OAAO,OAAO,KAAK,cAAc,iBAAiB;AACtE,QAAMD,QAAO,IAAI,KAAK,KAAK,EAAE,eAAe;AAC5C,QAAM,WAAW,MAAM,OAAO,cAAcA,KAAI;AAChD,QAAM,SAAS,MAAM,KAAK,cAAcA,KAAI;AAE5C,SAAO,SAAS,YAAY,QAAQ;AACtC;AAEA,IAAO,qBAAQ;;;ACdf,IAAM,cAAc,OAAK;AACvB,MAAI,QAAQ,EAAE;AACd,MAAI,MAAM,MAAM,EAAE;AAClB,MAAI,QAAQ,QAAW;AACrB,YAAQ,KAAK,qCAAqC,EAAE,EAAE;AACtD,WAAO;AAAA,EACT;AACA,MAAI,IAAI,QAAQ,QAAW;AACzB,WAAO,IAAI;AAAA,EACb;AAGA,MAAI,MAAM,IAAI;AACd,MAAI,MAAM,IAAI,SAAS;AACvB,MAAI,IAAI,QAAQ,KAAK;AACnB,UAAM,MAAM;AAAA,EACd;AACA,MAAI,QAAQ,IAAI,IAAI,MAAM,IAAI;AAC9B,MAAI,WAAW,mBAAS,EAAE,OAAO,MAAM,IAAI,MAAM,IAAI,KAAK,GAAG;AAC7D,MAAI,aAAa,MAAM;AACrB,WAAO;AAAA,EACT;AACA,SAAO;AACT;AACA,IAAO,gBAAQ;;;AC5Bf,IAAO,gBAAQ;AAAA,EACb,OAAO;AAAA,EACP,OAAO;AAAA,EACP,4BAA4B;AAAA,EAC5B,SAAS;AAAA,EACT,0BAA0B;AAAA,EAC1B,OAAO;AAAA,EACP,OAAO;AAAA,EACP,UAAU;AAAA,EACV,OAAO;AAAA,EACP,OAAO;AAAA,EACP,OAAO;AAAA,EACP,OAAO;AAAA,EACP,SAAS;AAAA,EACT,OAAO;AAAA,EACP,OAAO;AAAA,EACP,UAAU;AAAA,EACV,SAAS;AAAA,EACT,OAAO;AAAA,EACP,OAAO;AAAA,EACP,SAAS;AAAA,EACT,OAAO;AAAA,EACP,0BAA0B;AAAA,EAC1B,0BAA0B;AAAA,EAC1B,0BAA0B;AAAA,EAC1B,0BAA0B;AAAA,EAC1B,0BAA0B;AAAA,EAC1B,0BAA0B;AAAA,EAC1B,0BAA0B;AAAA,EAC1B,OAAO;AAAA,EACP,SAAS;AAAA,EACT,0BAA0B;AAAA,EAC1B,OAAO;AAAA,EACP,0BAA0B;AAAA,EAC1B,OAAO;AAAA,EACP,OAAO;AAAA,EACP,0BAA0B;AAAA,EAC1B,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,2BAA2B;AAAA,EAC3B,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,8BAA8B;AAAA,EAC9B,2BAA2B;AAAA,EAC3B,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,6BAA6B;AAAA,EAC7B,2BAA2B;AAAA,EAC3B,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,6BAA6B;AAAA,EAC7B,0BAA0B;AAAA,EAC1B,0BAA0B;AAAA,EAC1B,OAAO;AAAA,EACP,2BAA2B;AAAA,EAC3B,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,2BAA2B;AAAA,EAC3B,QAAQ;AAAA,EACR,2BAA2B;AAAA,EAC3B,QAAQ;AAAA,EACR,2BAA2B;AAAA,EAC3B,2BAA2B;AAAA,EAC3B,2BAA2B;AAAA,EAC3B,2BAA2B;AAAA,EAC3B,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,2BAA2B;AAAA,EAC3B,QAAQ;AAAA,EACR,2BAA2B;AAAA,EAC3B,2BAA2B;AAAA,EAC3B,QAAQ;AAAA,EACR,2BAA2B;AAAA,EAC3B,2BAA2B;AAAA,EAC3B,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,2BAA2B;AAAA,EAC3B,QAAQ;AAAA,EACR,2BAA2B;AAAA,EAC3B,2BAA2B;AAAA,EAC3B,QAAQ;AAAA,EACR,6BAA6B;AAAA,EAC7B,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,SAAS;AACX;;;ACtFA,IAAO,mBAAQ;AAAA,EACb;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;;;ACbA,IAAI,MAAM,CAAC;AACX,OAAO,KAAK,aAAI,EAAE,QAAQ,CAAC,MAAM;AAC/B,MAAI,QAAQ,EAAE,MAAM,GAAG;AACvB,MAAI,MAAM;AAAA,IACR,QAAQ,OAAO,MAAM,EAAE;AAAA,IACvB,KAAK,MAAM;AAAA,EACb;AACA,MAAI,MAAM,IAAI;AACZ,QAAI,MAAM,MAAM;AAAA,EAClB;AACA,MAAI,QAAQ,cAAK,GAAG,MAAM,GAAG;AAC7B,QAAM,QAAQ,CAAC,QAAQ;AACrB,UAAM,IAAI,QAAQ,eAAe,CAAC,QAAQ,QAAQ;AAChD,YAAM,OAAO,GAAG;AAChB,aAAO,iBAAS,OAAO;AAAA,IACzB,CAAC;AACD,QAAI,OAAO;AAAA,EACb,CAAC;AACH,CAAC;AAED,IAAI,MAAM;AAAA,EACR,QAAQ;AAAA,EACR,KAAK;AACP;AAGA,SAAS,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK;AACnC,MAAI,MAAM;AACV,MAAI,MAAM,GAAG;AACX,UAAM,MAAM;AAAA,EACd;AACA,MAAI,OAAO,YAAY;AACvB,MAAI,QAAQ;AAAA,IACV,QAAQ,IAAI;AAAA,IACZ,KAAK;AAAA,EACP;AACA,SAAO,YAAY;AACnB,MAAI,QAAQ;AAAA,IACV,QAAQ,IAAI;AAAA,IACZ,KAAK;AAAA,EACP;AACF;AAEA,IAAO,iBAAQ;;;AC3Cf,IAAM,aAAa;AAGnB,IAAM,WAAW,MAAM;AACrB,MAAI,OAAO,SAAS,eAAe,OAAO,KAAK,mBAAmB,aAAa;AAC7E,WAAO;AAAA,EACT;AACA,MAAIE,UAAS,KAAK,eAAe;AACjC,MAAI,OAAOA,YAAW,eAAe,OAAOA,QAAO,oBAAoB,aAAa;AAClF,WAAO;AAAA,EACT;AACA,MAAIC,YAAWD,QAAO,gBAAgB,EAAE;AACxC,MAAI,CAACC,WAAU;AACb,WAAO;AAAA,EACT;AACA,SAAOA,UAAS,YAAY;AAC9B;AAEA,IAAM,UAAU,MAAM;AACpB,MAAIA,YAAW,SAAS;AACxB,MAAIA,cAAa,MAAM;AACrB,WAAO;AAAA,EACT;AACA,SAAOA;AACT;AAEA,IAAO,kBAAQ;;;AC7Bf,IAAM,WAAW;AACjB,IAAM,WAAW;AACjB,IAAM,YAAY;AAClB,IAAM,YAAY;AAElB,IAAM,SAAS,SAAU,KAAK;AAC5B,QAAM,OAAO,GAAG;AAChB,MAAI,OAAO,OAAO,OAAO,IAAI;AAC3B,UAAM,MAAM;AACZ,WAAO,MAAM,IAAI,MAAM,MAAM;AAC7B,WAAO,YAAY;AAAA,EACrB;AACA,SAAO;AACT;AAEA,IAAM,cAAc,SAAU,IAAI;AAEhC,MAAI,IAAI,GAAG,MAAM,QAAQ;AACzB,MAAI,MAAM,MAAM;AACd,WAAO,OAAO,EAAE,EAAE;AAAA,EACpB;AAEA,MAAI,GAAG,MAAM,SAAS;AACtB,MAAI,MAAM,MAAM;AACd,WAAO,OAAO,EAAE,EAAE;AAAA,EACpB;AAEA,MAAI,GAAG,MAAM,SAAS;AACtB,MAAI,MAAM,MAAM;AACd,QAAI,MAAM,OAAO,EAAE,EAAE,IAAI;AACzB,WAAO,OAAO,GAAG;AAAA,EACnB;AAEA,MAAI,GAAG,MAAM,QAAQ;AACrB,MAAI,MAAM,MAAM;AACd,WAAO,OAAO,EAAE,EAAE;AAAA,EACpB;AACA,SAAO;AACT;AACA,IAAO,sBAAQ;;;ACnCf,IAAI,QAAQ,gBAAQ;AAGpB,IAAM,SAAS,OAAO,KAAK,cAAG,EAAE,OAAO,CAAC,GAAG,MAAM;AAC/C,MAAI,OAAO,EAAE,MAAM,GAAG,EAAE,MAAM;AAC9B,SAAO,KAAK,QAAQ,MAAM,GAAG;AAC7B,IAAE,QAAQ;AACV,SAAO;AACT,GAAG,CAAC,CAAC;AAGL,IAAM,YAAY,CAAC,OAAO;AACxB,OAAK,GAAG,QAAQ,UAAU,EAAE;AAC5B,OAAK,GAAG,QAAQ,gCAAgC,EAAE;AAClD,OAAK,GAAG,QAAQ,iCAAiC,IAAI;AACrD,OAAK,GAAG,QAAQ,kCAAkC,IAAI;AACtD,OAAK,GAAG,QAAQ,eAAe,QAAQ;AACvC,OAAK,GAAG,QAAQ,aAAa,QAAQ;AACrC,SAAO;AACT;AAGA,IAAM,WAAW,CAAC,KAAK,UAAU;AAC/B,MAAI,CAAC,KAAK;AAER,QAAI,CAAC,MAAM,eAAe,KAAK,GAAG;AAChC,cAAQ,KAAK,yBAAyB,qCAAqC;AAC3E,cAAQ;AAAA,IACV;AACA,WAAO;AAAA,EACT;AACA,MAAI,OAAO,QAAQ,UAAU;AAC3B,YAAQ,MAAM,2CAA2C,KAAK,KAAK;AAAA,EACrE;AACA,MAAI,KAAK,IAAI,KAAK;AAMlB,OAAK,GAAG,YAAY;AACpB,MAAI,MAAM,eAAe,EAAE,MAAM,MAAM;AACrC,WAAO;AAAA,EACT;AAEA,OAAK,UAAU,EAAE;AACjB,MAAI,MAAM,eAAe,EAAE,MAAM,MAAM;AACrC,WAAO;AAAA,EACT;AAEA,MAAI,OAAO,eAAe,EAAE,MAAM,MAAM;AACtC,WAAO,OAAO;AAAA,EAChB;AAEA,MAAI,QAAQ,KAAK,EAAE,MAAM,MAAM;AAC7B,QAAI,KAAK,oBAAY,EAAE;AACvB,QAAI,IAAI;AACN,aAAO;AAAA,IACT;AAAA,EACF;AAEA,QAAM,IAAI;AAAA,IACR,6CAA6C,MAAM;AAAA,EACrD;AACF;AACA,IAAO,eAAQ;;;ACpER,SAAS,WAAWC,OAAM;AAAE,SAAQA,QAAO,MAAM,KAAKA,QAAO,QAAQ,KAAMA,QAAO,QAAQ;AAAE;AAE5F,SAAS,OAAO,GAAG;AAAE,SAAO,OAAO,UAAU,SAAS,KAAK,CAAC,MAAM,mBAAmB,CAAC,MAAM,EAAE,QAAQ,CAAC;AAAE;AACzG,SAAS,QAAQ,OAAO;AAAE,SAAO,OAAO,UAAU,SAAS,KAAK,KAAK,MAAM;AAAiB;AAC5F,SAAS,SAAS,OAAO;AAAE,SAAO,OAAO,UAAU,SAAS,KAAK,KAAK,MAAM;AAAkB;AAC9F,SAAS,UAAU,OAAO;AAAE,SAAO,OAAO,UAAU,SAAS,KAAK,KAAK,MAAM;AAAmB;AAEhG,SAAS,QAAQ,KAAK,MAAM,GAAG;AACpC,MAAI,MAAM;AACV,QAAM,MAAM;AACZ,SAAO,IAAI,UAAU,MAAM,MAAM,IAAI,MAAM,MAAM,IAAI,SAAS,CAAC,EAAE,KAAK,GAAG,IAAI;AAC/E;AAEO,SAAS,UAAU,KAAK;AAC7B,MAAI,CAAC,KAAK;AACR,WAAO;AAAA,EACT;AACA,SAAO,IAAI,GAAG,YAAY,IAAI,IAAI,OAAO,CAAC;AAC5C;AAEO,SAAS,QAAQ,GAAG;AACzB,MAAI,IAAI,IAAI;AACZ,MAAI,IAAI,IAAI;AACZ,MAAI,MAAM,KAAK,MAAM,IAAI;AACvB,WAAO,IAAI;AAAA,EACb;AACA,MAAI,MAAM,KAAK,MAAM,IAAI;AACvB,WAAO,IAAI;AAAA,EACb;AACA,MAAI,MAAM,KAAK,MAAM,IAAI;AACvB,WAAO,IAAI;AAAA,EACb;AACA,SAAO,IAAI;AACb;AAGO,SAAS,WAAW,KAAK;AAC9B,QAAM,OAAO,GAAG;AAChB,QAAM,IAAI,QAAQ,0BAA0B,IAAI;AAChD,SAAO,SAAS,KAAK,EAAE;AACzB;AAGO,SAASC,WAAU,MAAM,IAAI;AAClC,QAAM,IAAI,YAAY,EAAE,KAAK;AAC7B,QAAM,IAAI,QAAQ,QAAQ,GAAG;AAC7B,QAAM,IAAI,QAAQ,MAAM,EAAE;AAC1B,QAAM,IAAI,QAAQ,MAAM,EAAE;AAC1B,MAAI,QAAQ,SAAS,QAAQ,QAAQ;AACnC,WAAO;AAAA,EACT;AACA,MAAI,QAAQ,SAAS,QAAQ,QAAQ;AACnC,WAAO;AAAA,EACT;AACA,SAAO;AACT;AAEO,SAAS,SAAS,KAAK;AAE5B,MAAI,OAAO,QAAQ,UAAU;AAC3B,WAAO;AAAA,EACT;AAEA,MAAI,OAAO,GAAG,GAAG;AACf,WAAO,IAAI,QAAQ;AAAA,EACrB;AACA,MAAI,IAAI,OAAO;AACb,WAAO,IAAI;AAAA,EACb;AACA,SAAO;AACT;AAGO,SAAS,QAAQ,GAAG,GAAG;AAC5B,MAAI,SAAS,CAAC,MAAM,OAAO;AACzB,WAAO,EAAE,MAAM,EAAE,IAAI,CAAC;AAAA,EACxB;AACA,SAAO;AACT;AAEO,SAAS,eAAe,QAAQ,YAAY,IAAI;AACrD,QAAM,OAAO,SAAS,IAAI,MAAM;AAChC,QAAM,YAAY,KAAK,IAAI,MAAM;AACjC,QAAMC,SAAQ,QAAQ,SAAS,KAAK,WAAW,EAAE,CAAC;AAClD,QAAMC,WAAU,QAAS,YAAY,IAAK,EAAE;AAC5C,SAAO,GAAG,OAAOD,SAAQ,YAAYC;AACvC;;;ACvFA,IAAM,WAAW;AAAA,EACf,MAAM,IAAI,KAAK,EAAE,YAAY;AAAA,EAC7B,OAAO;AAAA,EACP,MAAM;AACR;AAGA,IAAM,aAAa,CAAC,GAAG,KAAK,UAAU;AACpC,MAAI,IAAI,WAAW,GAAG;AACpB,WAAO;AAAA,EACT;AACA,MAAIC,SAAQ,CAAC,QAAQ,SAAS,QAAQ,QAAQ,UAAU,UAAU,aAAa;AAC/E,WAAS,IAAI,GAAG,IAAIA,OAAM,QAAQ,KAAK;AACrC,QAAI,MAAM,IAAI,MAAM,MAAMA,OAAM,OAAO,SAASA,OAAM,OAAO;AAC7D,QAAI,EAAEA,OAAM,IAAI,GAAG;AAAA,EACrB;AACA,SAAO;AACT;AAGA,IAAM,cAAc,CAAC,GAAG,KAAK,UAAU;AAErC,MAAI,OAAO,KAAK,GAAG,EAAE,WAAW,GAAG;AACjC,WAAO;AAAA,EACT;AACA,QAAM,OAAO,OAAO,CAAC,GAAG,UAAU,OAAO,GAAG;AAC5C,MAAI,OAAO,OAAO,KAAK,GAAG;AAC1B,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,QAAI,OAAO,KAAK;AAEhB,QAAI,EAAE,UAAU,UAAa,OAAO,EAAE,UAAU,YAAY;AAC1D;AAAA,IACF;AAEA,QAAI,IAAI,UAAU,QAAQ,IAAI,UAAU,UAAa,IAAI,UAAU,IAAI;AACrE;AAAA,IACF;AACA,QAAI,MAAM,IAAI,SAAS,MAAM,SAAS,SAAS,SAAS;AACxD,QAAI,EAAE,MAAM,GAAG;AAAA,EACjB;AACA,SAAO;AACT;AAIA,IAAM,cAAc,SAAU,GAAG,OAAO;AACtC,QAAM,eAAe;AAGrB,MAAI,QAAQ,KAAK,QAAQ,gBAAgB,EAAE,WAAW,OAAO;AAC3D,YAAQ,KAAK,wDAAwD;AACrE,YAAQ,KAAK,uDAAuD;AAAA,EACtE;AACA,IAAE,QAAQ;AACV,SAAO;AACT;AAEA,IAAO,kBAAQ;AAAA,EACb;AAAA,EACA;AAAA,EACA;AACF;;;AC5DA,IAAM,SAAS,SAAU,GAAG;AAC1B,IAAE,QAAQ,KAAK,IAAI;AACnB,SAAO,KAAK,EAAE,UAAU,CAAC,CAAC,EAAE,QAAQ,CAAC,MAAM;AACzC,QAAI,OAAO,EAAE,OAAO,YAAY;AAC9B,UAAI,EAAE,GAAG,EAAE,OAAO,EAAE;AAAA,IACtB;AAAA,EACF,CAAC;AACD,SAAO;AACT;AAEA,IAAM,QAAQ;AAAA,EACZ,KAAK,CAAC,MAAM;AACV,WAAO,OAAO,CAAC;AAAA,EACjB;AAAA,EACA,OAAO,CAAC,MAAM;AACZ,WAAO,OAAO,CAAC;AAAA,EACjB;AAAA,EACA,SAAS,CAAC,MAAM;AACd,QAAI,OAAO,CAAC;AACZ,QAAI,EAAE,KAAK,EAAE;AACb,WAAO;AAAA,EACT;AAAA,EACA,UAAU,CAAC,MAAM;AACf,QAAI,OAAO,CAAC;AACZ,QAAI,EAAE,IAAI,GAAG,KAAK;AAClB,QAAI,EAAE,QAAQ,KAAK;AACnB,WAAO;AAAA,EACT;AAAA,EACA,WAAW,CAAC,MAAM;AAChB,QAAI,OAAO,CAAC;AACZ,QAAI,EAAE,SAAS,GAAG,KAAK;AACvB,QAAI,EAAE,QAAQ,KAAK;AACnB,WAAO;AAAA,EACT;AAAA,EACA,WAAW,CAAC,MAAM;AAChB,QAAIC,QAAO,OAAO,CAAC,EAAE,KAAK;AAC1B,QAAI,EAAE,IAAI,CAACA,OAAM,IAAI,IAAI,IAAI,GAAG,CAAC,CAAC;AAClC,WAAO;AAAA,EACT;AAAA,EACA,aAAa,CAAC,MAAM;AAClB,QAAIA,QAAO,OAAO,CAAC,EAAE,KAAK;AAC1B,QAAI,EAAE,IAAI,CAACA,OAAM,IAAI,IAAI,IAAI,GAAG,CAAC,CAAC;AAClC,WAAO;AAAA,EACT;AACF;AACA,MAAM,mBAAmB,MAAM;AAC/B,IAAO,sBAAQ;;;AC9Cf,IAAMC,aAAY,SAAU,KAAK;AAE/B,QAAM,IAAI,QAAQ,+DAA+D,EAAE;AAEnF,QAAM,IAAI,QAAQ,wBAAwB,IAAI;AAC9C,QAAM,IAAI,QAAQ,MAAM,EAAE;AAC1B,QAAM,IAAI,QAAQ,OAAO,GAAG,EAAE,KAAK;AACnC,SAAO;AACT;AAEA,IAAO,oBAAQA;;;ACXf,IAAI,IAAI;AAAA,EACN,aAAa;AACf;AACA,EAAE,SAAS;AACX,EAAE,SAAS;AACX,EAAE,OAAO;AACT,EAAE,MAAM;AACR,EAAE,OAAO,EAAE;AACX,EAAE,QAAQ,QAAS;AACnB,EAAE,OAAO;AACT,EAAE,OAAO;AAET,OAAO,KAAK,CAAC,EAAE,QAAQ,OAAK;AAC1B,IAAE,IAAI,OAAO,EAAE;AACjB,CAAC;AACD,IAAO,uBAAQ;;;ACZf,IAAM,OAAO,CAAC,GAAG,GAAG,IAAI,MAAM,aAAa;AACzC,MAAI,UAAU,EAAE,EAAE,IAAI;AACtB,MAAI,YAAY,GAAG;AACjB;AAAA,EACF;AACA,MAAI,YAAY,aAAa,OAAO,OAAO,EAAE,EAAE,UAAU;AACzD,MAAI,WAAW,EAAE;AAEjB,MAAIC,QAAO,IAAI;AACf,IAAE,SAAS,qBAAG,QAAQA;AAGtB,MAAI,SAAS,OAAO;AAGlB,QAAI,KAAK,IAAIA,KAAI,IAAI,MAAM,IAAI,IAAI;AACjC,QAAE,SAAS,qBAAG;AAAA,IAChB;AAAA,EACF;AAEA,MAAI,aAAa,QAAQ,cAAc,EAAE,EAAE,UAAU,GAAG;AAEtD,MAAE,QAAQ;AAAA,EAEZ;AAGA,QAAM,WAAW,qBAAG,QAAQ;AAC5B,SAAO,EAAE,EAAE,IAAI,IAAI,GAAG;AACpB,MAAE,SAAS;AAAA,EACb;AAEA,SAAO,EAAE,EAAE,IAAI,IAAI,GAAG;AACpB,MAAE,SAAS;AAAA,EACb;AAEA,MAAI,aAAa,QAAQ,cAAc,EAAE,EAAE,UAAU,GAAG;AAEtD,MAAE,QAAQ;AAAA,EACZ;AACF;AAEA,IAAM,QAAQ;AAAA,EACZ,MAAM;AAAA,IACJ,OAAO,CAAC,MAAM,IAAI,QAAS,IAAI;AAAA,IAC/B,QAAQ,CAAC,GAAG,MAAM,KAAK,GAAG,GAAG,eAAe,QAAQ,IAAI;AAAA,EAC1D;AAAA,EACA,OAAO;AAAA,IACL,OAAO,CAAC,MAAM,KAAK,KAAK,KAAK;AAAA,IAC7B,QAAQ,CAAC,GAAG,MAAM;AAChB,UAAI,IAAI,EAAE;AACV,UAAI,UAAU,EAAE,SAAS;AACzB,UAAI,WAAW,EAAE;AACjB,UAAI,YAAY,EAAE,YAAY;AAC9B,UAAI,YAAY,GAAG;AACjB;AAAA,MACF;AAEA,UAAIA,QAAO,IAAI;AACf,QAAE,SAAS,qBAAG,OAAOA,QAAO;AAE5B,UAAI,cAAc,EAAE,EAAE,YAAY,GAAG;AACnC,UAAE,QAAQ;AAAA,MACZ;AAEA,aAAO,EAAE,EAAE,SAAS,IAAI,GAAG;AACzB,UAAE,SAAS,qBAAG;AAAA,MAChB;AACA,aAAO,EAAE,EAAE,SAAS,IAAI,GAAG;AACzB,UAAE,SAAS,qBAAG;AAAA,MAChB;AAAA,IACF;AAAA,EACF;AAAA,EACA,MAAM;AAAA,IACJ,OAAO,CAAC,MAAM,IAAI,KAAK,KAAK;AAAA,IAC5B,QAAQ,CAAC,GAAG,MAAM,KAAK,GAAG,GAAG,WAAW,OAAO,UAAU;AAAA,EAC3D;AAAA,EACA,MAAM;AAAA,IACJ,OAAO,CAAC,MAAM,KAAK,KAAK,IAAI;AAAA,IAC5B,QAAQ,CAAC,GAAG,MAAM,KAAK,GAAG,GAAG,YAAY,QAAQ,SAAS;AAAA,EAC5D;AAAA,EACA,QAAQ;AAAA,IACN,OAAO,CAAC,MAAM,KAAK,KAAK,IAAI;AAAA,IAC5B,QAAQ,CAAC,GAAG,MAAM,KAAK,GAAG,GAAG,cAAc,UAAU,UAAU;AAAA,EACjE;AAAA,EACA,QAAQ;AAAA,IACN,OAAO,CAAC,MAAM,KAAK,KAAK,IAAI;AAAA,IAC5B,QAAQ,CAAC,GAAG,MAAM;AAEhB,QAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE;AAAA,IACzB;AAAA,EACF;AAAA,EACA,aAAa;AAAA,IACX,OAAO,CAAC,MAAM,KAAK,KAAK,IAAI;AAAA,IAC5B,QAAQ,CAAC,GAAG,MAAM;AAEhB,QAAE,QAAQ,EAAE,aAAa,CAAC,EAAE;AAAA,IAC9B;AAAA,EACF;AACF;AAEA,IAAM,SAAS,CAAC,GAAG,UAAU;AAC3B,MAAI,OAAO,OAAO,KAAK,KAAK;AAC5B,MAAI,MAAM,EAAE,MAAM;AAClB,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,QAAI,IAAI,KAAK;AACb,QAAI,IAAI,MAAM;AACd,QAAI,MAAM,QAAW;AACnB,UAAI,IAAI,GAAG;AAAA,IACb;AACA,QAAI,OAAO,MAAM,UAAU;AACzB,UAAI,SAAS,GAAG,EAAE;AAAA,IACpB;AAEA,QAAI,CAAC,MAAM,GAAG,MAAM,CAAC,GAAG;AACtB,QAAE,QAAQ;AACV,UAAI,EAAE,WAAW,OAAO;AACtB,gBAAQ,KAAK,aAAa,IAAI,OAAO,CAAC;AAAA,MACxC;AACA;AAAA,IACF;AACA,UAAM,GAAG,OAAO,GAAG,CAAC;AAAA,EACtB;AACA;AACF;AAEA,IAAO,eAAQ;;;ACjIf,IAAM,eAAe;AAAA,EACnB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AACA,IAAO,uBAAQ;;;ACdf,IAAI,cAAc;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AACA,IAAI,aAAa;AAAA,EACf;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEA,SAAS,eAAe;AACtB,QAAM,MAAM;AAAA,IACV,KAAK;AAAA,EACP;AACA,WAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,KAAK;AAC3C,QAAI,YAAY,MAAM;AAAA,EACxB;AACA,WAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK;AAC1C,QAAI,WAAW,MAAM;AAAA,EACvB;AACA,SAAO;AACT;AAEO,SAAS,QAAQ;AAAE,SAAO;AAAY;AACtC,SAAS,OAAO;AAAE,SAAO;AAAW;AACpC,SAAS,UAAU;AAAE,SAAO,aAAa;AAAE;AAC3C,SAAS,IAAI,MAAM;AACxB,gBAAc,KAAK,SAAS;AAC5B,eAAa,KAAK,QAAQ;AAC5B;;;AC/CA,IAAMC,eAAc,CAAC,GAAG,WAAW;AACjC,MAAI,CAAC,QAAQ;AACX,WAAO;AAAA,EACT;AAIA,MAAI,MAAM;AAGV,MAAI,4BAA4B,KAAK,MAAM,GAAG;AAE5C,QAAI,MAAM,KAAK,MAAM,MAAM,MAAM;AAC/B,eAAS,OAAO,QAAQ,OAAO,EAAE;AAAA,IACnC;AAEA,QAAI,MAAM,KAAK,MAAM,MAAM,MAAM;AAC/B,eAAS,OAAO,QAAQ,OAAO,IAAI;AAAA,IACrC;AAAA,EACF;AAGA,MAAI,mBAAmB,KAAK,MAAM,GAAG;AACnC,aAAS,OAAO,QAAQ,OAAO,IAAI;AAAA,EACrC;AACA,QAAM,WAAW,MAAM;AAGvB,MAAI,KAAK,IAAI,GAAG,IAAI,KAAK;AACvB,UAAM,MAAM;AAAA,EACd;AAEA,MAAI,QAAQ,KAAK,WAAW,OAAO,WAAW,KAAK;AACjD,MAAE,KAAK;AACP,WAAO;AAAA,EACT;AAIA,SAAO;AAEP,MAAI,OAAO,GAAG;AACZ,UAAM,MAAM;AAAA,EACd;AACA,MAAI,KAAK,YAAY;AACrB,MAAI,QAAQ,EAAE;AAEd,MAAI,MAAM,KAAK;AAGb,MAAE,KAAK;AAAA,EACT;AACA,SAAO;AACT;AACA,IAAOC,uBAAQD;;;ACtDf,IAAM,UAAU,SAAU,MAAM,IAAI;AAClC,QAAM,OAAO,GAAG;AAGhB,MAAI,IAAI,SAAS,GAAG;AAClB,UAAM,IAAI,OAAO,GAAG,CAAC;AAAA,EACvB,WAAW,IAAI,WAAW,GAAG;AAI3B,UAAM,MAAM;AAAA,EACd,WAAW,IAAI,WAAW,GAAG;AAC3B,UAAM,MAAM;AAAA,EACd;AACA,SAAO,OAAO,GAAG,KAAK;AACxB;AAEA,IAAM,YAAY,CAAC,GAAG,MAAM,OAAO;AAEjC,QAAM,IAAI,QAAQ,QAAQ,EAAE,EAAE,YAAY;AAE1C,MAAI,MAAM,IAAI,MAAM,6DAA6D;AACjF,MAAI,QAAQ,MAAM;AAEhB,QAAI,IAAI,OAAO,IAAI,EAAE;AACrB,QAAI,IAAI,KAAK,IAAI,IAAI;AACnB,aAAO,EAAE,QAAQ,KAAK;AAAA,IACxB;AACA,QAAI,IAAI,OAAO,IAAI,EAAE;AACrB,QAAI,IAAI,GAAG,SAAS,KAAK,IAAI,KAAK,IAAI,IAAI;AACxC,aAAO,EAAE,QAAQ,KAAK;AAAA,IACxB;AACA,QAAI,EAAE,KAAK,CAAC;AACZ,QAAI,EAAE,OAAO,CAAC;AACd,QAAI,EAAE,QAAQ,IAAI,MAAM,CAAC;AACzB,QAAI,EAAE,YAAY,QAAQ,IAAI,EAAE,CAAC;AAEjC,QAAI,OAAO,IAAI,MAAM,oBAAoB;AACzC,QAAI,SAAS,QAAQ,KAAK,IAAI;AAC5B,UAAI,EAAE,KAAK,KAAK,EAAE;AAAA,IACpB;AACA,WAAO;AAAA,EACT;AAGA,QAAM,IAAI,MAAM,mBAAmB;AACnC,MAAI,QAAQ,QAAQ,IAAI,IAAI;AAC1B,QAAI,IAAI,OAAO,IAAI,EAAE;AAErB,QAAI,IAAI,MAAM,IAAI,GAAG;AACnB,aAAO,EAAE,QAAQ,KAAK;AAAA,IACxB;AACA,QAAI,EAAE,KAAK,IAAI,MAAM,CAAC;AACtB,QAAI,EAAE,KAAK,IAAI,EAAE;AACjB,QAAI,EAAE,QAAQ,MAAM;AACpB,WAAO;AAAA,EACT;AAGA,MAAI,EAAE,QAAQ,KAAK;AACnB,SAAO;AACT;AACA,IAAO,oBAAQ;;;AC5Df,IAAI,SAAS,QAAQ;AAMrB,IAAM,WAAW,CAAC,QAAQ;AAExB,MAAI,qBAAa,eAAe,IAAI,KAAK,MAAM,MAAM;AACnD,WAAO;AAAA,EACT;AAEA,MAAI,IAAI,UAAU,GAAG;AACnB,QAAI,WAAW,IAAI,IAAI,KAAK,IAAI,QAAQ,IAAI;AAC1C,aAAO;AAAA,IACT,OAAO;AACL,aAAO,IAAI,QAAQ;AAAA,IACrB;AAAA,EACF;AAEA,MAAI,MAAM,qBAAa,IAAI,UAAU;AACrC,MAAI,IAAI,QAAQ,KAAK;AACnB,WAAO;AAAA,EACT;AACA,SAAO;AACT;AAEA,IAAM,YAAY,CAAC,MAAM,IAAI,UAAU;AACrC,QAAM,IAAI,KAAK;AAEf,MAAI,gBAAgB,KAAK,GAAG,MAAM,MAAM;AACtC,QAAI,MAAM,OAAO,IAAI,QAAQ,KAAK,EAAE,CAAC;AACrC,QAAI,MAAM,IAAI;AACZ,aAAO,OAAO;AAAA,IAChB;AACA,WAAO,MAAO;AAAA,EAChB;AACA,MAAIE,QAAO,SAAS,KAAK,EAAE;AAE3B,MAAI,CAACA,SAAQ,OAAO;AAClB,IAAAA,QAAO,MAAM;AAAA,EACf;AAEA,EAAAA,QAAOA,SAAQ,IAAI,KAAK,EAAE,YAAY;AACtC,SAAOA;AACT;AAEA,IAAM,aAAa,SAAU,KAAK;AAChC,QAAM,IAAI,YAAY,EAAE,KAAK;AAC7B,MAAI,QAAQ,QAAQ;AAClB,WAAO,OAAO;AAAA,EAChB;AACA,SAAO,OAAO;AAChB;;;ACpDA,IAAO,cAAQ;AAAA,EAKb;AAAA,IACE,KAAK;AAAA,IACL,OAAO,CAAC,GAAG,MAAM;AACf,UAAI,MAAM;AAAA,QACR,MAAM,EAAE;AAAA,QACR,OAAO,SAAS,EAAE,IAAI,EAAE,IAAI;AAAA,QAC5B,MAAM,EAAE;AAAA,MACV;AACA,UAAI,SAAS,GAAG,MAAM,OAAO;AAC3B,UAAE,QAAQ;AACV,eAAO;AAAA,MACT;AACA,MAAAC,qBAAY,GAAG,EAAE,EAAE;AACnB,mBAAO,GAAG,GAAG;AACb,UAAI,kBAAU,GAAG,EAAE,EAAE;AACrB,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EAEA;AAAA,IACE,KAAK;AAAA,IACL,OAAO,CAAC,GAAG,MAAM;AACf,UAAI,MAAM;AAAA,QACR,MAAM,EAAE;AAAA,QACR,OAAO,SAAS,EAAE,IAAI,EAAE,IAAI;AAAA,QAC5B,MAAM,SAAS,EAAE,IAAI,EAAE;AAAA,MACzB;AACA,UAAI,IAAI,SAAS,IAAI;AAEnB,YAAI,OAAO,SAAS,EAAE,IAAI,EAAE;AAC5B,YAAI,QAAQ,SAAS,EAAE,IAAI,EAAE,IAAI;AAAA,MACnC;AACA,UAAI,SAAS,GAAG,MAAM,OAAO;AAC3B,UAAE,QAAQ;AACV,eAAO;AAAA,MACT;AACA,mBAAO,GAAG,GAAG;AACb,UAAI,kBAAU,GAAG,EAAE,EAAE;AACrB,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EAGA;AAAA,IACE,KAAK;AAAA,IACL,OAAO,CAAC,GAAG,MAAM;AACf,UAAI,MAAM;AAAA,QACR,MAAM,UAAU,EAAE,IAAI,EAAE,MAAM;AAAA,QAC9B,OAAO,WAAW,EAAE,EAAE;AAAA,QACtB,MAAM,WAAW,EAAE,MAAM,EAAE;AAAA,MAC7B;AACA,UAAI,SAAS,GAAG,MAAM,OAAO;AAC3B,UAAE,QAAQ;AACV,eAAO;AAAA,MACT;AACA,mBAAO,GAAG,GAAG;AACb,UAAI,kBAAU,GAAG,EAAE,EAAE;AACrB,aAAO;AAAA,IACT;AAAA,EACF;AACF;;;ACjEA,IAAO,cAAQ;AAAA,EAKb;AAAA,IACE,KAAK;AAAA,IACL,OAAO,CAAC,GAAG,QAAQ;AACjB,UAAIC,SAAQ,SAAS,IAAI,IAAI,EAAE,IAAI;AACnC,UAAIC,QAAO,SAAS,IAAI,IAAI,EAAE;AAE9B,UAAI,EAAE,WAAWD,UAAS,IAAI;AAC5B,QAAAC,QAAO,SAAS,IAAI,IAAI,EAAE;AAC1B,QAAAD,SAAQ,SAAS,IAAI,IAAI,EAAE,IAAI;AAAA,MACjC;AACA,UAAI,MAAM;AAAA,QACR,MAAAC;AAAA,QACA,OAAAD;AAAA,QACA,MAAM,UAAU,IAAI,IAAI,EAAE,MAAM,KAAK,IAAI,KAAK,EAAE,YAAY;AAAA,MAC9D;AACA,UAAI,SAAS,GAAG,MAAM,OAAO;AAC3B,UAAE,QAAQ;AACV,eAAO;AAAA,MACT;AACA,mBAAO,GAAG,GAAG;AACb,UAAI,kBAAU,GAAG,IAAI,EAAE;AACvB,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EAEA;AAAA,IACE,KAAK;AAAA,IACL,OAAO,CAAC,GAAG,QAAQ;AACjB,UAAI,MAAM;AAAA,QACR,MAAM,UAAU,IAAI,IAAI,EAAE,MAAM;AAAA,QAChC,OAAO,WAAW,IAAI,EAAE;AAAA,QACxB,MAAM,WAAW,IAAI,MAAM,EAAE;AAAA,MAC/B;AACA,UAAI,SAAS,GAAG,MAAM,OAAO;AAC3B,UAAE,QAAQ;AACV,eAAO;AAAA,MACT;AACA,mBAAO,GAAG,GAAG;AACb,UAAI,kBAAU,GAAG,IAAI,EAAE;AACvB,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EAIA;AAAA,IACE,KAAK;AAAA,IACL,OAAO,CAAC,GAAG,QAAQ;AACjB,UAAI,MAAM;AAAA,QACR,MAAM,UAAU,IAAI,IAAI,EAAE,MAAM;AAAA,QAChC,OAAO,WAAW,IAAI,EAAE;AAAA,QACxB,MAAM,WAAW,IAAI,MAAM,EAAE;AAAA,MAC/B;AACA,UAAI,SAAS,GAAG,MAAM,OAAO;AAC3B,UAAE,QAAQ;AACV,eAAO;AAAA,MACT;AACA,mBAAO,GAAG,GAAG;AACb,UAAI,kBAAU,GAAG,IAAI,EAAE;AACvB,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EAEA;AAAA,IACE,KAAK;AAAA,IACL,OAAO,CAAC,GAAG,QAAQ;AACjB,UAAI,MAAM;AAAA,QACR,MAAM,UAAU,IAAI,IAAI,EAAE,MAAM;AAAA,QAChC,OAAO,WAAW,IAAI,EAAE;AAAA,QACxB,MAAM,WAAW,IAAI,MAAM,EAAE;AAAA,MAC/B;AACA,UAAI,SAAS,GAAG,MAAM,OAAO;AAC3B,UAAE,QAAQ;AACV,eAAO;AAAA,MACT;AACA,mBAAO,GAAG,GAAG;AACb,UAAI,kBAAU,GAAG,IAAI,EAAE;AACvB,aAAO;AAAA,IACT;AAAA,EACF;AACF;;;ACrFA,IAAO,cAAQ;AAAA,EAKb;AAAA,IACE,KAAK;AAAA,IACL,OAAO,CAAC,GAAG,MAAM;AACf,UAAI,MAAM;AAAA,QACR,MAAM,UAAU,EAAE,IAAI,EAAE,MAAM;AAAA,QAC9B,OAAO,WAAW,EAAE,EAAE;AAAA,QACtB,MAAM,WAAW,EAAE,MAAM,EAAE;AAAA,MAC7B;AACA,UAAI,SAAS,GAAG,MAAM,OAAO;AAC3B,UAAE,QAAQ;AACV,eAAO;AAAA,MACT;AACA,mBAAO,GAAG,GAAG;AACb,UAAI,kBAAU,GAAG,EAAE,EAAE;AACrB,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EAEA;AAAA,IACE,KAAK;AAAA,IACL,OAAO,CAAC,GAAG,MAAM;AACf,UAAI,MAAM;AAAA,QACR,MAAM,UAAU,EAAE,IAAI,EAAE,MAAM;AAAA,QAC9B,OAAO,WAAW,EAAE,EAAE;AAAA,QACtB,MAAM,WAAW,EAAE,EAAE;AAAA,MACvB;AACA,UAAI,CAAC,IAAI,SAAS,SAAS,GAAG,MAAM,OAAO;AACzC,UAAE,QAAQ;AACV,eAAO;AAAA,MACT;AACA,mBAAO,GAAG,GAAG;AACb,UAAI,kBAAU,GAAG,EAAE,EAAE;AACrB,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EAEA;AAAA,IACE,KAAK;AAAA,IACL,OAAO,CAAC,GAAG,MAAM;AACf,UAAI,MAAM;AAAA,QACR,MAAM,OAAO,EAAE,EAAE;AAAA,QACjB,OAAO,WAAW,EAAE,EAAE;AAAA,QACtB,MAAM,OAAO,EAAE,EAAE;AAAA,MACnB;AACA,UAAI,SAAS,GAAG,MAAM,OAAO;AAC3B,UAAE,QAAQ;AACV,eAAO;AAAA,MACT;AACA,mBAAO,GAAG,GAAG;AACb,UAAI,EAAE,QAAQ,KAAK;AACnB,UAAI,kBAAU,GAAG,EAAE,EAAE;AACrB,aAAO;AAAA,IACT;AAAA,EACF;AACF;;;AC5DA,IAAO,eAAQ;AAAA,EAMb;AAAA,IACE,KAAK;AAAA,IACL,OAAO,CAAC,GAAG,MAAM;AACf,UAAI,MAAM;AAAA,QACR,MAAM,EAAE;AAAA,QACR,OAAO,SAAS,EAAE,IAAI,EAAE,IAAI;AAAA,QAC5B,MAAM;AAAA,MACR;AACA,UAAI,SAAS,GAAG,MAAM,OAAO;AAC3B,UAAE,QAAQ;AACV,eAAO;AAAA,MACT;AACA,mBAAO,GAAG,GAAG;AACb,UAAI,kBAAU,GAAG,EAAE,EAAE;AACrB,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EAGA;AAAA,IACE,KAAK;AAAA,IACL,OAAO,CAAC,GAAG,QAAQ;AACjB,UAAI,MAAM;AAAA,QACR,MAAM,UAAU,IAAI,IAAI,EAAE,MAAM;AAAA,QAChC,OAAO,WAAW,IAAI,EAAE;AAAA,QACxB,MAAM,EAAE,OAAO,QAAQ;AAAA,MACzB;AACA,UAAI,SAAS,GAAG,MAAM,OAAO;AAC3B,UAAE,QAAQ;AACV,eAAO;AAAA,MACT;AACA,mBAAO,GAAG,GAAG;AACb,UAAI,kBAAU,GAAG,IAAI,EAAE;AACvB,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EAEA;AAAA,IAEE,KAAK;AAAA,IACL,OAAO,CAAC,GAAG,QAAQ;AACjB,UAAI,UAAU,IAAI,MAAM;AACxB,UAAI,EAAE,QAAQ,OAAO;AACrB,UAAIE,QAAO,IAAI,MAAM;AACrB,UAAIA,OAAM;AACR,QAAAA,QAAOA,MAAK,KAAK;AACjB,YAAI,EAAE,KAAKA,KAAI;AAAA,MACjB;AACA,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EACA;AAAA,IAEE,KAAK;AAAA,IACL,OAAO,CAAC,GAAG,QAAQ;AACjB,UAAI,SAAS,IAAI,MAAM;AACvB,UAAI,EAAE,OAAO,MAAM;AACnB,UAAIA,QAAO,IAAI,MAAM;AACrB,UAAIA,OAAM;AACR,QAAAA,QAAOA,MAAK,KAAK;AACjB,YAAI,EAAE,KAAKA,KAAI;AAAA,MACjB;AACA,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EACA;AAAA,IAEE,KAAK;AAAA,IACL,OAAO,CAAC,GAAG,QAAQ;AACjB,UAAI,MAAM,IAAI,MAAM;AAEpB,YAAM,IAAI,QAAQ,0BAA0B,KAAK;AACjD,UAAI,IAAI,IAAI,KAAK;AACjB,UAAI,MAAM;AAAA,QACR,MAAM,SAAS,IAAI,KAAK,GAAG,EAAE;AAAA,QAC7B,OAAO,EAAE,SAAS;AAAA,QAClB,MAAM,EAAE,QAAQ;AAAA,MAClB;AACA,UAAI,SAAS,GAAG,MAAM,OAAO;AAC3B,UAAE,QAAQ;AACV,eAAO;AAAA,MACT;AACA,mBAAO,GAAG,GAAG;AACb,UAAI,kBAAU,CAAC;AACf,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EACA;AAAA,IAEE,KAAK;AAAA,IACL,OAAO,CAAC,GAAG,QAAQ;AACjB,UAAI,MAAM,IAAI,MAAM;AAEpB,YAAM,IAAI,QAAQ,MAAM,EAAE;AAC1B,UAAI,IAAI,IAAI,KAAK;AACjB,UAAI,MAAM;AAAA,QACR,MAAM,SAAS,IAAI,KAAK,GAAG,EAAE;AAAA,QAC7B,OAAO,EAAE,SAAS;AAAA,QAClB,MAAM,EAAE,QAAQ;AAAA,MAClB;AACA,UAAI,SAAS,GAAG,MAAM,OAAO;AAC3B,UAAE,QAAQ;AACV,eAAO;AAAA,MACT;AACA,mBAAO,GAAG,GAAG;AACb,UAAI,kBAAU,CAAC;AACf,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EACA;AAAA,IAEE,KAAK;AAAA,IACL,OAAO,CAAC,GAAG,QAAQ;AACjB,UAAI,QAAQ,EAAE;AAEd,UAAI,MAAM,SAAS,CAAC,MAAM,MAAM;AAC9B,cAAM,OAAO;AAAA,MACf;AACA,UAAI,IAAI,IAAI,KAAK;AACjB,UAAI,MAAM;AAAA,QACR,MAAM,UAAU,IAAI,IAAI,KAAK;AAAA,QAC7B,OAAO,MAAM,SAAS,EAAE,SAAS;AAAA,QACjC,MAAM,MAAM,QAAQ,EAAE,QAAQ;AAAA,MAChC;AACA,UAAI,SAAS,GAAG,MAAM,OAAO;AAC3B,UAAE,QAAQ;AACV,eAAO;AAAA,MACT;AACA,mBAAO,GAAG,GAAG;AACb,UAAI,kBAAU,CAAC;AACf,aAAO;AAAA,IACT;AAAA,EACF;AACF;;;ACzIA,IAAO,kBAAQ,CAAC,EAAE,OAAO,aAAK,aAAK,aAAK,YAAI;;;ACH5C,IAAM,cAAc,SAAU,GAAG,OAAO,SAAS;AAG/C,WAAS,IAAI,GAAG,IAAI,gBAAQ,QAAQ,KAAK;AACvC,QAAI,IAAI,MAAM,MAAM,gBAAQ,GAAG,GAAG;AAClC,QAAI,GAAG;AAEL,UAAI,MAAM,gBAAQ,GAAG,MAAM,GAAG,GAAG,OAAO;AACxC,UAAI,QAAQ,QAAQ,IAAI,QAAQ,GAAG;AACjC,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AACA,MAAI,EAAE,WAAW,OAAO;AACtB,YAAQ,KAAK,2CAA2C,QAAQ,GAAG;AAAA,EACrE;AACA,IAAE,QAAQ;AACV,SAAO;AACT;AACA,IAAO,gBAAQ;;;ACnBf,IAAM,EAAE,YAAAC,aAAY,aAAAC,cAAa,aAAAC,aAAY,IAAI;AAajD,IAAMC,YAAW;AAAA,EACf,MAAM,IAAI,KAAK,EAAE,YAAY;AAAA,EAC7B,OAAO;AAAA,EACP,MAAM;AACR;AAGA,IAAM,aAAa,CAAC,GAAG,UAAU;AAC/B,MAAI,QAAQ,EAAE,UAAUA;AAExB,MAAI,OAAO,UAAU,UAAU;AAC7B,WAAOD,aAAY,GAAG,KAAK;AAAA,EAC7B;AAEA,IAAE,QAAQ,KAAK,IAAI;AAEnB,MAAI,EAAE,UAAU,SAAS,EAAE,MAAM,KAAK,OAAO,KAAK,EAAE,MAAM,EAAE,SAAS,GAAG;AACtE,QAAI,MAAMD,aAAY,GAAG,OAAOE,SAAQ;AACxC,QAAI,IAAI,QAAQ,GAAG;AACjB,QAAE,QAAQ,IAAI;AAAA,IAChB;AAAA,EACF;AAEA,MAAI,UAAU,QAAQ,UAAU,UAAa,UAAU,IAAI;AACzD,WAAO;AAAA,EACT;AAEA,MAAI,OAAO,KAAK,MAAM,MAAM;AAC1B,MAAE,QAAQ,MAAM,QAAQ;AACxB,WAAO;AAAA,EACT;AAEA,MAAI,QAAQ,KAAK,MAAM,MAAM;AAC3B,QAAIH,YAAW,GAAG,OAAO,KAAK;AAC9B,WAAO;AAAA,EACT;AAEA,MAAI,SAAS,KAAK,MAAM,MAAM;AAE5B,QAAI,MAAM,OAAO;AACf,QAAE,QAAQ,MAAM;AAChB,QAAE,KAAK,MAAM;AACb,aAAO;AAAA,IACT;AACA,QAAIC,aAAY,GAAG,OAAO,KAAK;AAC/B,WAAO;AAAA,EACT;AAEA,MAAI,OAAO,UAAU,UAAU;AAC7B,WAAO;AAAA,EACT;AAEA,UAAQ,kBAAU,KAAK;AAEvB,MAAI,oBAAW,eAAe,KAAK,MAAM,MAAM;AAC7C,QAAI,oBAAW,OAAO,CAAC;AACvB,WAAO;AAAA,EACT;AAEA,SAAO,cAAY,GAAG,KAAK;AAC7B;AACA,IAAO,gBAAQ;;;AC5Ef,IAAI,YAAY,CAAC,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,KAAK;AAChE,IAAI,WAAW,CAAC,UAAU,UAAU,WAAW,aAAa,YAAY,UAAU,UAAU;AAErF,SAASG,SAAQ;AAAE,SAAO;AAAU;AACpC,SAASC,QAAO;AAAE,SAAO;AAAS;AAClC,SAASC,KAAI,MAAM;AACxB,cAAY,KAAK,SAAS;AAC1B,aAAW,KAAK,QAAQ;AAC1B;AACO,IAAM,UAAU;AAAA,EACrB,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,OAAO;AACT;;;ACtBA,IAAI,mBAAmB;AAEhB,SAAS,eAAe;AAC7B,SAAO;AACT;AAEO,SAASC,KAAI,KAAK;AACvB,qBAAmB;AACrB;;;ACHA,IAAM,YAAY,OAAK;AACrB,MAAI,SAAS,EAAE,SAAS,EAAE,QAAQ;AAClC,SAAO,CAAC,SAAS,MAAM,eAAe,QAAQ,GAAG;AACnD;AAEA,IAAO,iBAAQ;;;ACJf,IAAM,kBAAkB,CAAC,QAAQ;AAC/B,MAAI,aAAa,GAAG;AAClB,WAAO,UAAU,GAAG;AAAA,EACtB;AACA,SAAO;AACT;AAGA,IAAM,UAAU,CAAC,QAAQ;AACvB,MAAI,OAAO,GAAG;AACZ,WAAO,QAAQ,KAAK,CAAC;AAAA,EACvB,OAAO;AACL,UAAM,KAAK,IAAI,GAAG;AAClB,WAAO,MAAM,QAAQ,KAAK,CAAC;AAAA,EAC7B;AACF;AAEA,IAAM,SAAS;AAAA,EACb,KAAK,CAAC,MAAM,gBAAgB,EAAE,QAAQ,CAAC;AAAA,EACvC,aAAa,CAAC,MAAM,gBAAgBC,OAAO,EAAE,EAAE,IAAI,EAAE;AAAA,EACrD,cAAc,CAAC,MAAM,EAAE,IAAI;AAAA,EAC3B,eAAe,CAAC,MAAM,QAAQ,EAAE,IAAI,CAAC;AAAA,EACrC,WAAW,CAAC,MAAM,QAAQ,EAAE,IAAI,CAAC;AAAA,EAEjC,MAAM,CAAC,MAAM,EAAE,KAAK;AAAA,EACpB,gBAAgB,CAAC,MAAM,QAAQ,EAAE,KAAK,CAAC;AAAA,EACvC,YAAY,CAAC,MAAM,QAAQ,EAAE,KAAK,CAAC;AAAA,EAEnC,OAAO,CAAC,MAAM,gBAAgB,EAAE,UAAU,CAAC;AAAA,EAC3C,eAAe,CAAC,MAAM,gBAAgB,MAAM,EAAE,EAAE,MAAM,EAAE;AAAA,EACxD,gBAAgB,CAAC,MAAM,EAAE,MAAM;AAAA,EAC/B,iBAAiB,CAAC,MAAM,QAAQ,EAAE,MAAM,CAAC;AAAA,EACzC,aAAa,CAAC,MAAM,QAAQ,EAAE,MAAM,CAAC;AAAA,EACrC,aAAa,CAAC,MAAM,QAAQ,EAAE,MAAM,IAAI,CAAC;AAAA,EAEzC,MAAM,CAAC,MAAM;AACX,QAAIC,QAAO,EAAE,KAAK;AAClB,QAAIA,QAAO,GAAG;AACZ,aAAOA;AAAA,IACT;AACA,IAAAA,QAAO,KAAK,IAAIA,KAAI;AACpB,WAAOA,QAAO;AAAA,EAChB;AAAA,EACA,cAAc,CAAC,MAAM;AACnB,QAAIA,QAAO,EAAE,KAAK;AAClB,QAAIA,QAAO,GAAG;AACZ,aAAO,IAAI,OAAO,EAAE,KAAK,CAAC,EAAE,OAAO,GAAG,CAAC;AAAA,IACzC;AACA,IAAAA,QAAO,KAAK,IAAIA,KAAI;AACpB,WAAOA,QAAO;AAAA,EAChB;AAAA,EACA,YAAY,CAAC,MAAM;AACjB,QAAIA,QAAO,EAAE,KAAK;AAClB,QAAI,aAAaA,QAAO;AACxB,QAAI,MAAM,QAAQ,KAAK,IAAIA,KAAI,GAAG,CAAC;AACnC,QAAI,YAAY;AAEd,YAAM,QAAQ,KAAK,CAAC;AACpB,YAAM,MAAM;AAAA,IACd;AACA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,CAAC,MAAM,EAAE,KAAK;AAAA,EACpB,WAAW,CAAC,MAAM,GAAG,EAAE,OAAO,KAAK,QAAQ,EAAE,OAAO,CAAC;AAAA,EAErD,MAAM,CAAC,MAAM,EAAE,OAAO;AAAA,EACtB,YAAY,CAAC,MAAM,QAAQ,EAAE,OAAO,CAAC;AAAA,EACrC,WAAW,CAAC,MAAM,EAAE,OAAO;AAAA,EAC3B,eAAe,CAAC,MAAM,QAAQ,EAAE,OAAO,CAAC;AAAA,EAExC,QAAQ,CAAC,MAAM,EAAE,OAAO;AAAA,EACxB,cAAc,CAAC,MAAM,QAAQ,EAAE,OAAO,CAAC;AAAA,EACvC,QAAQ,CAAC,MAAM,EAAE,OAAO;AAAA,EACxB,cAAc,CAAC,MAAM,QAAQ,EAAE,OAAO,CAAC;AAAA,EACvC,aAAa,CAAC,MAAM,EAAE,YAAY;AAAA,EAClC,mBAAmB,CAAC,MAAM,QAAQ,EAAE,YAAY,GAAG,CAAC;AAAA,EAEpD,MAAM,CAAC,MAAM,EAAE,KAAK;AAAA,EACpB,MAAM,CAAC,MAAM,EAAE,KAAK,EAAE,YAAY;AAAA,EAClC,SAAS,CAAC,MAAM,MAAM,EAAE,QAAQ;AAAA,EAChC,QAAQ,CAAC,MAAM,EAAE,OAAO;AAAA,EACxB,KAAK,CAAC,MAAM,EAAE,IAAI;AAAA,EAClB,MAAM,CAAC,MAAM,EAAE,KAAK;AAAA,EACpB,UAAU,CAAC,MAAM,EAAE,SAAS,EAAE;AAAA,EAC9B,QAAQ,CAAC,MAAM,eAAU,CAAC;AAAA,EAE1B,SAAS,CAAC,MAAM,GAAG,EAAE,KAAK,KAAK,QAAQ,EAAE,MAAM,IAAI,CAAC,KAAK,QAAQ,EAAE,KAAK,CAAC;AAAA,EACzE,cAAc,CAAC,MAAM,GAAG,QAAQ,EAAE,MAAM,IAAI,CAAC,KAAK,QAAQ,EAAE,KAAK,CAAC,KAAK,EAAE,KAAK;AAAA,EAC9E,cAAc,CAAC,MAAM,GAAG,QAAQ,EAAE,KAAK,CAAC,KAAK,QAAQ,EAAE,MAAM,IAAI,CAAC,KAAK,EAAE,KAAK;AAAA,EAC9E,SAAS,CAAC,MAAM,GAAG,QAAQ,EAAE,MAAM,IAAI,CAAC,KAAK,QAAQ,EAAE,KAAK,CAAC;AAAA,EAG7D,KAAK,CAAC,MAAM;AACV,QAAIA,QAAO,EAAE,OAAO,UAAU;AAC9B,QAAIC,SAAQ,QAAQ,EAAE,MAAM,IAAI,CAAC;AACjC,QAAIC,QAAO,QAAQ,EAAE,KAAK,CAAC;AAC3B,QAAI,OAAO,QAAQ,EAAE,IAAI,CAAC;AAC1B,QAAI,SAAS,QAAQ,EAAE,OAAO,CAAC;AAC/B,QAAI,SAAS,QAAQ,EAAE,OAAO,CAAC;AAC/B,QAAI,KAAK,QAAQ,EAAE,YAAY,GAAG,CAAC;AACnC,QAAI,SAAS,eAAU,CAAC;AACxB,WAAO,GAAGF,SAAQC,UAASC,SAAQ,QAAQ,UAAU,UAAU,KAAK;AAAA,EACtE;AAAA,EACA,aAAa,CAAC,MAAM;AAClB,QAAID,SAAQ,QAAQ,EAAE,MAAM,IAAI,CAAC;AACjC,QAAIC,QAAO,QAAQ,EAAE,KAAK,CAAC;AAC3B,QAAIF,QAAO,QAAQ,EAAE,KAAK,CAAC;AAC3B,WAAO,GAAGA,SAAQC,UAASC;AAAA,EAC7B;AAAA,EACA,WAAW,CAAC,MAAM;AAChB,WAAO,IAAI,KAAK,EAAE,KAAK,EAAE,YAAY;AAAA,EACvC;AAAA,EAGA,MAAM,CAAC,MAAM,GAAG,MAAM,EAAE,EAAE,MAAM,MAAM,QAAQ,EAAE,KAAK,CAAC,MAAM,EAAE,KAAK;AAAA,EACnE,WAAW,CAAC,MACV,GAAG,MAAM,EAAE,EAAE,MAAM,MAAM,QAAQ,EAAE,KAAK,CAAC,MAAM,EAAE,OAAO,KAAK;AAAA,IAC3D,EAAE,OAAO;AAAA,EACX;AAAA,EACF,aAAa,CAAC,MAAM,GAAG,MAAM,EAAE,EAAE,MAAM,MAAM,QAAQ,EAAE,KAAK,CAAC,MAAM,EAAE,KAAK;AAAA,EAC1E,YAAY,CAAC,MACX,GAAGH,OAAO,EAAE,EAAE,IAAI,MAAM,gBAAgB,MAAM,EAAE,EAAE,MAAM,EAAE,KAAK;AAAA,IAC7D,EAAE,KAAK;AAAA,EACT;AAAA,EACF,aAAa,CAAC,MACZ,GAAG,EAAE,QAAQ,KAAK,gBAAgB,EAAE,UAAU,CAAC,KAAK,QAAQ,EAAE,KAAK,CAAC,MAAM,EAAE,KAAK;AAAA,EACnF,gBAAgB,CAAC,MACf,GAAG,EAAE,QAAQ,KAAK,gBAAgB,EAAE,UAAU,CAAC,KAAK;AAAA,IAClD,EAAE,KAAK;AAAA,EACT,MAAM,EAAE,OAAO,KAAK,QAAQ,EAAE,OAAO,CAAC;AAC1C;AAEA,IAAMI,WAAU;AAAA,EACd,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,IAAI;AAAA,EACJ,WAAW;AAAA,EACX,aAAa;AAAA,EACb,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,iBAAiB;AAAA,EACjB,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,iBAAiB;AAAA,EACjB,cAAc;AAAA,EACd,YAAY;AACd;AACA,OAAO,KAAKA,QAAO,EAAE,QAAQ,CAAC,MAAO,OAAO,KAAK,OAAOA,SAAQ,GAAI;AAEpE,IAAM,cAAc,CAAC,GAAG,MAAM,OAAO;AAEnC,MAAI,EAAE,QAAQ,MAAM,MAAM;AACxB,WAAO;AAAA,EACT;AAEA,MAAI,OAAO,eAAe,GAAG,GAAG;AAC9B,QAAI,MAAM,OAAO,KAAK,CAAC,KAAK;AAC5B,QAAI,QAAQ,QAAQ;AAClB,YAAM,OAAO,GAAG;AAChB,UAAI,IAAI,YAAY,MAAM,QAAQ;AAChC,cAAM,gBAAgB,GAAG;AAAA,MAC3B;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAEA,MAAI,IAAI,QAAQ,GAAG,MAAM,IAAI;AAC3B,QAAI,WAAW;AACf,UAAM,IAAI,QAAQ,UAAU,CAAC,GAAGC,SAAQ;AACtC,MAAAA,OAAMA,KAAI,YAAY,EAAE,KAAK;AAC7B,UAAI,OAAO,eAAeA,IAAG,GAAG;AAC9B,YAAI,MAAM,OAAO,OAAOA,MAAK,CAAC,CAAC;AAC/B,YAAIA,KAAI,YAAY,MAAM,QAAQ;AAChC,iBAAO,gBAAgB,GAAG;AAAA,QAC5B;AACA,eAAO;AAAA,MACT;AACA,aAAO;AAAA,IACT,CAAC;AACD,WAAO;AAAA,EACT;AAEA,SAAO,EAAE,OAAO,WAAW;AAC7B;AACA,IAAO,iBAAQ;;;AClMf,IAAMC,WAAU;AAAA,EACd,GAAG,CAAC,MAAM,EAAE,IAAI;AAAA,EAChB,IAAI,CAAC,MAAM,EAAE,IAAI;AAAA,EACjB,KAAK,CAAC,MAAM,EAAE,IAAI;AAAA,EAClB,MAAM,CAAC,MAAO,EAAE,IAAI,MAAM,OAAO,gBAAgB;AAAA,EAEjD,GAAG,CAAC,MAAM,EAAE,KAAK;AAAA,EACjB,IAAI,CAAC,MAAM;AAET,WAAO,QAAI,OAAO,OAAO,EAAE,KAAK,CAAC,EAAE,OAAO,GAAG,CAAC,CAAC,CAAC;AAAA,EAClD;AAAA,EACA,KAAK,CAAC,MAAM,EAAE,KAAK;AAAA,EACnB,MAAM,CAAC,MAAM,EAAE,KAAK;AAAA,EACpB,OAAO,CAAC,MAAM,MAAM,EAAE,KAAK;AAAA,EAI3B,GAAG,CAAC,MAAM,EAAE,QAAQ;AAAA,EACpB,IAAI,CAAC,MAAM,EAAE,QAAQ;AAAA,EACrB,KAAK,CAAC,MAAM,EAAE,QAAQ;AAAA,EACtB,MAAM,CAAC,MAAM,EAAE,QAAQ;AAAA,EAGvB,GAAG,CAAC,MAAM,EAAE,MAAM,IAAI;AAAA,EACtB,IAAI,CAAC,MAAM,QAAI,EAAE,MAAM,IAAI,CAAC;AAAA,EAC5B,KAAK,CAAC,MAAM,EAAE,OAAO,aAAa;AAAA,EAClC,MAAM,CAAC,MAAM,EAAE,OAAO,OAAO;AAAA,EAG7B,GAAG,CAAC,MAAM,EAAE,KAAK;AAAA,EACjB,IAAI,CAAC,MAAM,QAAI,EAAE,KAAK,CAAC;AAAA,EAKvB,GAAG,CAAC,MAAM,EAAE,KAAK;AAAA,EACjB,IAAI,CAAC,MAAM,QAAI,EAAE,KAAK,CAAC;AAAA,EAEvB,GAAG,CAAC,MAAM,EAAE,UAAU;AAAA,EACtB,IAAI,CAAC,MAAM,QAAI,EAAE,UAAU,CAAC;AAAA,EAC5B,KAAK,CAAC,MAAM,QAAI,EAAE,UAAU,GAAG,CAAC;AAAA,EAMhC,GAAG,CAAC,MAAM,EAAE,OAAO,WAAW;AAAA,EAC9B,IAAI,CAAC,MAAM,EAAE,OAAO,WAAW;AAAA,EAC/B,KAAK,CAAC,MAAM,EAAE,OAAO,WAAW;AAAA,EAChC,MAAM,CAAC,MAAM,EAAE,OAAO,KAAK;AAAA,EAC3B,OAAO,CAAC,MAAM,EAAE,OAAO,KAAK,EAAE;AAAA,EAC9B,GAAG,CAAC,MAAM,EAAE,IAAI;AAAA,EAChB,IAAI,CAAC,MAAM,EAAE,IAAI;AAAA,EACjB,KAAK,CAAC,MAAM,EAAE,OAAO,WAAW;AAAA,EAChC,MAAM,CAAC,MAAM,EAAE,OAAO,KAAK;AAAA,EAC3B,OAAO,CAAC,MAAM,EAAE,OAAO,KAAK,EAAE;AAAA,EAG9B,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,YAAY;AAAA,EAC/B,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,YAAY;AAAA,EAChC,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,YAAY;AAAA,EACjC,MAAM,CAAC,MAAM,EAAE,KAAK,EAAE,YAAY;AAAA,EAGlC,GAAG,CAAC,MAAM,EAAE,IAAI;AAAA,EAChB,IAAI,CAAC,MAAM,QAAI,EAAE,IAAI,CAAC;AAAA,EACtB,GAAG,CAAC,MAAM,EAAE,KAAK;AAAA,EACjB,IAAI,CAAC,MAAM,QAAI,EAAE,KAAK,CAAC;AAAA,EAGvB,GAAG,CAAC,MAAM,EAAE,OAAO;AAAA,EACnB,IAAI,CAAC,MAAM,QAAI,EAAE,OAAO,CAAC;AAAA,EACzB,GAAG,CAAC,MAAM,EAAE,OAAO;AAAA,EACnB,IAAI,CAAC,MAAM,QAAI,EAAE,OAAO,CAAC;AAAA,EAGzB,KAAK,CAAC,MAAM,QAAI,EAAE,YAAY,GAAG,CAAC;AAAA,EAElC,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,KAAK,EAAE;AAAA,EAErC,GAAG,CAAC,MAAM,EAAE,SAAS,EAAE;AAAA,EACvB,IAAI,CAAC,MAAM,EAAE,SAAS,EAAE;AAAA,EACxB,KAAK,CAAC,MAAM,EAAE,SAAS,EAAE;AAAA,EACzB,MAAM,CAAC,MAAM,EAAE,SAAS,EAAE;AAAA,EAC1B,GAAG,CAAC,MAAM,eAAe,EAAE,SAAS,EAAE,QAAQ,MAAM;AAAA,EACpD,IAAI,CAAC,MAAM,eAAe,EAAE,SAAS,EAAE,QAAQ,MAAM;AAAA,EACrD,KAAK,CAAC,MAAM,eAAe,EAAE,SAAS,EAAE,QAAQ,MAAM;AAAA,EACtD,MAAM,CAAC,MAAM,eAAe,EAAE,SAAS,EAAE,QAAQ,QAAQ,GAAG;AAC9D;AAEA,IAAM,WAAW,CAAC,MAAM,IAAI,MAAM;AAChC,MAAI,OAAO;AACX,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,GAAG,KAAK,GAAG;AAC7B,IAAAA,SAAQ,QAAQA,SAAQ;AACxB,YAAQ;AACR,cAAU;AAAA,EACZ;AACF;AACA,SAAS,KAAK,KAAK,CAAC;AACpB,SAAS,KAAK,KAAK,CAAC;AACpB,SAAS,KAAK,KAAK,CAAC;AACpB,SAAS,KAAK,KAAK,CAAC;AACpB,SAAS,KAAK,KAAK,CAAC;AACpB,SAAS,KAAK,KAAK,CAAC;AACpB,SAAS,KAAK,KAAK,CAAC;AACpB,SAAS,KAAK,KAAK,CAAC;AACpB,SAAS,KAAK,KAAK,CAAC;AAGpB,IAAM,cAAc,SAAU,KAAK;AACjC,WAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK,GAAG;AACtC,QAAI,IAAI,OAAO,KAAK;AAElB,eAASC,KAAI,IAAI,GAAGA,KAAI,IAAI,QAAQA,MAAK,GAAG;AAC1C,YAAI,IAAIA,KAAI;AACV,cAAI,MAAM,IAAIA;AAAA,QAChB;AACA,YAAI,IAAIA,QAAO,KAAK;AAClB,cAAIA,MAAK;AACT;AAAA,QACF;AACA,YAAIA,MAAK;AAAA,MACX;AAAA,IACF;AAAA,EACF;AACA,SAAO,IAAI,OAAO,CAAC,OAAO,EAAE;AAC9B;AAGA,IAAM,kBAAkB,SAAU,KAAK;AACrC,WAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK,GAAG;AACtC,QAAI,IAAI,IAAI;AAEZ,aAASA,KAAI,IAAI,GAAGA,KAAI,IAAI,QAAQA,MAAK,GAAG;AAC1C,UAAI,IAAIA,QAAO,GAAG;AAChB,YAAI,MAAM,IAAIA;AACd,YAAIA,MAAK;AAAA,MACX,OAAO;AACL;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,QAAM,IAAI,OAAO,CAAC,OAAO,EAAE;AAC3B,QAAM,IAAI,IAAI,CAAC,QAAQ;AACrB,QAAI,QAAQ,MAAM;AAChB,YAAM;AAAA,IACR;AACA,WAAO;AAAA,EACT,CAAC;AACD,SAAO;AACT;AAEA,IAAM,UAAU,CAAC,GAAG,QAAQ;AAC1B,MAAI,MAAM,IAAI,MAAM,EAAE;AAEtB,QAAM,YAAY,GAAG;AAErB,QAAM,gBAAgB,GAAG;AACzB,SAAO,IAAI,OAAO,CAAC,KAAK,MAAM;AAC5B,QAAID,SAAQ,OAAO,QAAW;AAC5B,aAAOA,SAAQ,GAAG,CAAC,KAAK;AAAA,IAC1B,OAAO;AAEL,UAAI,YAAY,KAAK,CAAC,GAAG;AACvB,YAAI,EAAE,QAAQ,MAAM,EAAE;AAAA,MACxB;AACA,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT,GAAG,EAAE;AACP;AACA,IAAO,kBAAQ;;;AClLf,IAAME,SAAQ,CAAC,QAAQ,UAAU,WAAW,SAAS,QAAQ,OAAO,eAAe,QAAQ,QAAQ;AAEnG,IAAM,SAAS,SAAU,GAAG,GAAG;AAC7B,MAAI,QAAQ,EAAE,MAAM,EAAE,QAAQ,CAAC;AAC/B,MAAI,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;AAC3B,MAAI,WAAW,IAAI,QAAQ,MAAM;AACjC,MAAI,WAAW,EAAE,QAAQ,MAAM,SAAS;AACxC,SAAO,WAAW,QAAQ,QAAQ,CAAC,CAAC;AACtC;AAGA,IAAM,WAAW,CAAC,GAAG,SAAS;AAC5B,MAAI,MAAM;AACR,WAAOC,WAAU,IAAI;AACrB,WAAO,OAAO,GAAG,IAAI;AAAA,EACvB;AACA,MAAI,MAAM,CAAC;AACX,EAAAD,OAAM,QAAQ,OAAK;AACjB,QAAI,KAAK,OAAO,GAAG,CAAC;AAAA,EACtB,CAAC;AACD,SAAO;AACT;AAEA,IAAO,mBAAQ;;;ACrBf,IAAM,UAAU,CAAC,GAAG,SAAS;AAE3B,MAAI,OAAO,EAAE,SAAS;AACtB,SAAOE,WAAU,IAAI;AAErB,MAAI,SAAS,eAAe;AAC1B,WAAO;AAAA,EACT;AACA,MAAI,KAAK,UAAU,QAAW;AAE5B,QAAI,KAAK,QAAQ,KAAK;AACpB,UAAI,EAAE,IAAI,GAAG,IAAI;AAAA,IACnB;AAEA,QAAI,EAAE,QAAQ,IAAI;AAAA,EACpB,WAAW,EAAE,WAAW,OAAO;AAC7B,YAAQ,KAAK,oBAAoB,OAAO,GAAG;AAAA,EAC7C;AACA,SAAO;AACT;AACA,IAAO,kBAAQ;;;ACtBf,IAAM,QAAQ,CAAC,GAAG,GAAG,SAAS;AAC5B,MAAI,IAAI;AACR,MAAI,EAAE,MAAM;AACZ,SAAO,EAAE,SAAS,CAAC,GAAG;AAEpB,QAAI,EAAE,IAAI,GAAG,IAAI;AACjB,SAAK;AAAA,EACP;AAEA,MAAI,EAAE,QAAQ,GAAG,IAAI,GAAG;AACtB,SAAK;AAAA,EACP;AACA,SAAO;AACT;AAIA,IAAM,UAAU,CAAC,GAAG,GAAG,SAAS;AAC9B,MAAI,EAAE,SAAS,CAAC,GAAG;AACjB,WAAO,MAAM,GAAG,GAAG,IAAI;AAAA,EACzB,OAAO;AACL,WAAO,MAAM,GAAG,GAAG,IAAI,IAAI;AAAA,EAC7B;AACF;AAEA,IAAO,cAAQ;;;ACrBf,IAAM,WAAW,CAAC,GAAG,MAAM;AACzB,MAAI,QAAQ,EAAE,KAAK,IAAI,EAAE,KAAK;AAE9B,MAAI,EAAE,KAAK,EAAE,KAAK,CAAC;AACnB,MAAI,EAAE,QAAQ,CAAC,GAAG;AAChB,aAAS;AAAA,EACX;AACA,SAAO;AACT;AAKA,IAAM,OAAO,SAAU,GAAG,GAAG;AAG3B,MAAI,SAAS,EAAE,QAAQ,EAAE;AACzB,MAAI,MAAM;AAAA,IACR,cAAc;AAAA,IACd,SAAS,SAAS,SAAS,KAAM,EAAE;AAAA,EACrC;AACA,MAAI,UAAU,SAAS,IAAI,UAAU,IAAI,EAAE;AAC3C,MAAI,QAAQ,SAAS,IAAI,UAAU,IAAI,EAAE;AAGzC,MAAI,MAAM,EAAE,MAAM;AAClB,MAAI,QAAQ,SAAS,KAAK,CAAC;AAC3B,QAAM,EAAE,IAAI,IAAI,OAAO,MAAM;AAG7B,MAAI,SAAS,IAAI,QAAQ;AACzB,QAAM,EAAE,IAAI,IAAI,QAAQ,OAAO;AAC/B,MAAI,UAAU,YAAQ,KAAK,GAAG,OAAO;AAGrC,MAAI,WAAW,IAAI,QAAQ;AAC3B,MAAI,YAAY,SAAU,IAAI,SAAS,KAAM,GAAG,EAAE;AAIlD,MAAI,QAAQ,IAAI,QAAQ;AACxB,QAAM,EAAE,IAAI,IAAI,OAAO,MAAM;AAC7B,MAAI,SAAS,YAAQ,KAAK,GAAG,MAAM;AAGnC,MAAI,OAAO,IAAI,QAAQ;AACvB,QAAM,EAAE,IAAI,IAAI,MAAM,KAAK;AAC3B,MAAI,QAAQ,YAAQ,KAAK,GAAG,KAAK;AAEjC,SAAO;AACT;AACA,IAAO,oBAAQ;;;ACrDf,IAAM,cAAc,SAAU,KAAK;AACjC,SAAO,KAAK,GAAG,EAAE,QAAQ,CAAC,MAAM;AAC9B,QAAI,MAAM;AAAA,EACZ,CAAC;AACD,SAAO;AACT;AAKA,IAAM,OAAO,SAAU,GAAG,GAAG,MAAM;AACjC,MAAI,QAAQ,GAAG,CAAC;AAEhB,MAAI,WAAW;AACf,MAAI,EAAE,QAAQ,CAAC,GAAG;AAChB,QAAI,MAAM;AACV,QAAI;AACJ,QAAI;AACJ,eAAW;AAAA,EACb;AAEA,MAAI,MAAM,kBAAU,GAAG,CAAC;AACxB,MAAI,UAAU;AACZ,UAAM,YAAY,GAAG;AAAA,EACvB;AAEA,MAAI,MAAM;AAER,WAAOC,WAAU,IAAI;AACrB,QAAI,KAAK,KAAK,IAAI,MAAM,MAAM;AAC5B,cAAQ;AAAA,IACV;AACA,QAAI,SAAS,SAAS;AACpB,aAAO;AAAA,IACT;AACA,WAAO,IAAI;AAAA,EACb;AACA,SAAO;AACT;AAEA,IAAO,eAAQ;;;AC5Bf,IAAM,MAAM,CAAC,MAAM,KAAK,IAAI,CAAC,KAAK;AAElC,IAAM,QAAQ,SAAUC,OAAM;AAC5B,MAAI,MAAM;AACV,SAAO,IAAIA,MAAK,KAAK,IAAI;AACzB,SAAO,IAAIA,MAAK,MAAM,IAAI;AAC1B,SAAO,IAAIA,MAAK,IAAI,IAAI;AACxB,SAAO,IAAIA,MAAK,KAAK,IAAI;AACzB,SAAO,IAAIA,MAAK,OAAO,IAAI;AAC3B,SAAO,IAAIA,MAAK,OAAO,IAAI;AAC3B,SAAO;AACT;AACA,IAAO,cAAQ;;;ACzBf,SAAS,QAAQ,GAAG,GAAG;AACrB,QAAM,WAAW,EAAE,SAAS,CAAC;AAC7B,QAAM,QAAQ,WAAW,IAAI;AAC7B,MAAI,UAAU,WAAW,IAAI;AAC7B,YAAU,QAAQ,MAAM;AACxB,QAAMC,QAAO;AAAA,IACX,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,OAAO;AAAA,IACP,SAAS;AAAA,IACT,SAAS;AAAA,EACX;AACA,SAAO,KAAKA,KAAI,EAAE,QAAQ,CAAC,SAAS;AAClC,QAAI,QAAQ,OAAO,OAAO,IAAI,GAAG;AAC/B;AAAA,IACF;AACA,QAAI,MAAM,QAAQ,KAAK,OAAO,IAAI;AAClC,cAAU,QAAQ,IAAI,KAAK,IAAI;AAC/B,IAAAA,MAAK,QAAQ;AAAA,EACf,CAAC;AAED,MAAI,UAAU;AACZ,WAAO,KAAKA,KAAI,EAAE,QAAQ,CAAC,MAAM;AAC/B,UAAIA,MAAK,OAAO,GAAG;AACjB,QAAAA,MAAK,MAAM;AAAA,MACb;AAAA,IACF,CAAC;AAAA,EACH;AACA,SAAOA;AACT;AACA,IAAO,kBAAQ;;;ACjCf,IAAIC,SAAQ;AAAA,EACR,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,MAAM;AAAA,EACN,OAAO;AAAA,EACP,KAAK;AAAA,EACL,MAAM;AAAA,EACN,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,OAAO;AACX;AAEO,SAAS,YAAY,MAAM;AAC9B,SAAOA,OAAM,SAAS;AAC1B;AAEO,SAASC,KAAI,OAAO,CAAC,GAAG;AAC3B,EAAAD,SAAQ;AAAA,IACJ,QAAQ,KAAK,UAAUA,OAAM;AAAA,IAC7B,SAAS,KAAK,WAAWA,OAAM;AAAA,IAC/B,QAAQ,KAAK,UAAUA,OAAM;AAAA,IAC7B,SAAS,KAAK,WAAWA,OAAM;AAAA,IAC/B,MAAM,KAAK,QAAQA,OAAM;AAAA,IACzB,OAAO,KAAK,SAASA,OAAM;AAAA,IAC3B,KAAK,KAAK,OAAOA,OAAM;AAAA,IACvB,MAAM,KAAK,QAAQA,OAAM;AAAA,IACzB,OAAO,KAAK,SAASA,OAAM;AAAA,IAC3B,QAAQ,KAAK,UAAUA,OAAM;AAAA,IAC7B,MAAM,KAAK,QAAQA,OAAM;AAAA,IACzB,OAAO,KAAK,SAASA,OAAM;AAAA,EAC/B;AACJ;;;AClCA,IAAI,OAAO;AACX,IAAI,SAAS;AACb,IAAI,UAAU;AACd,IAAI,MAAM;AACV,IAAI,SAAS;AACb,IAAI,OAAO;AACX,IAAI,eAAe,CAAC,UAAU,GAAG;AACjC,IAAI,iBAAiB,CAAC,UAAU,MAAM;AAE/B,SAAS,mBAAmB,OAAO;AAAE,SAAO,aAAa,KAAK;AAAE;AAChE,SAAS,qBAAqB,OAAO;AAAE,SAAO,eAAe,KAAK;AAAE;AACpE,SAAS,aAAa;AAAE,SAAO;AAAK;AACpC,SAAS,eAAe;AAAE,SAAO;AAAO;AACxC,SAAS,gBAAgB;AAAE,SAAO;AAAQ;AAC1C,SAAS,YAAY;AAAE,SAAO;AAAI;AAClC,SAAS,eAAe;AAAE,SAAO;AAAO;AACxC,SAAS,aAAa;AAAE,SAAO;AAAK;AAEpC,SAASE,KAAI,MAAM;AACtB,iBAAe,KAAK,gBAAgB;AACpC,mBAAiB,KAAK,kBAAkB;AACxC,SAAO,KAAK,QAAQ;AACpB,WAAS,KAAK,UAAU;AACxB,YAAU,KAAK,WAAW;AAC1B,QAAM,KAAK,OAAO;AAClB,WAAS,KAAK,UAAU;AACxB,SAAO,KAAK,QAAQ;AACxB;;;AClBA,IAAM,aAAa;AAAA,EACjB,QAAQ;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,EACR;AAAA,EACA,MAAM;AAAA,IACJ,QAAQ;AAAA,IACR,MAAM;AAAA,EACR;AAAA,EACA,OAAO;AAAA,IACL,QAAQ;AAAA,IACR,MAAM;AAAA,EACR;AAAA,EACA,SAAS;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,EACR;AAAA,EACA,SAAS;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,EACR;AACF;AAGA,SAAS,UAAU,OAAO,MAAM;AAC9B,MAAI,UAAU,GAAG;AACf,WAAO,QAAQ,MAAM,YAAY,KAAK,MAAM,GAAG,EAAE,CAAC;AAAA,EACpD;AACA,SAAO,QAAQ,MAAM,YAAY,IAAI;AACvC;AAEA,IAAM,SAAS,SAAUC,OAAM;AAC7B,MAAI,UAAU;AACd,MAAI,YAAY;AAChB,MAAI,cAAc,CAAC;AACnB,MAAI,gBAAgB,CAAC;AAErB,SAAO,KAAKA,KAAI,EAAE,QAAQ,CAAC,MAAM,GAAGC,WAAU;AAC5C,UAAM,QAAQ,KAAK,IAAID,MAAK,KAAK;AACjC,QAAI,UAAU,GAAG;AACf;AAAA,IACF;AACA,gBAAY,KAAK,QAAQ,KAAK,EAAE;AAChC,UAAM,eAAe,UAAU,OAAO,IAAI;AAC1C,kBAAc,KAAK,YAAY;AAC/B,QAAI,CAAC,SAAS;AACZ,gBAAU,YAAY;AACtB,UAAI,IAAI,GAAG;AACT;AAAA,MACF;AAEA,YAAM,WAAWC,OAAM,IAAI;AAC3B,YAAM,YAAY,KAAK,IAAID,MAAK,SAAS;AACzC,UAAI,YAAY,WAAW,UAAU,QAAQ;AAC3C,kBAAU,UAAU,QAAQ,GAAG,IAAI;AACnC,oBAAY,aAAa,IAAI,MAAM;AAAA,MACrC,WAAW,YAAY,WAAW,UAAU,MAAM;AAChD,oBAAY,WAAW,IAAI,MAAM;AAAA,MACnC;AAAA,IACF;AAAA,EACF,CAAC;AAED,SAAO,EAAE,WAAW,SAAS,aAAa,cAAc;AAC1D;AACA,IAAO,iBAAQ;;;AC1Df,IAAM,QAAQ,CAAC,OAAO,QAAQ;AAC5B,QAAM,QAAQ,KAAK,KAAK;AACxB,QAAME,QAAO,gBAAQ,OAAO,GAAG;AAC/B,QAAM,QAAQ,OAAO,KAAKA,KAAI,EAAE,MAAM,CAAC,MAAM,CAACA,MAAK,EAAE;AACrD,MAAI,UAAU,MAAM;AAClB,WAAO;AAAA,MACL,MAAAA;AAAA,MACA,SAAS,UAAU;AAAA,MACnB,WAAW,UAAU;AAAA,MACrB,SAAS,UAAU;AAAA,MACnB,aAAa,CAAC;AAAA,MACd,KAAK;AAAA,MACL,WAAW,cAAc;AAAA,IAC3B;AAAA,EACF;AACA,MAAI;AACJ,MAAI,YAAY,aAAa;AAE7B,MAAI,EAAE,SAAS,WAAW,eAAe,YAAY,IAAI,eAAOA,KAAI;AAGpE,YAAU,cAAc,OAAO,GAAG,CAAC,EAAE,KAAK,IAAI;AAE9C,MAAI,MAAM,QAAQ,GAAG,MAAM,MAAM;AAC/B,cAAU,mBAAmB,OAAO;AACpC,gBAAY,mBAAmB,SAAS;AACxC,cAAU,mBAAmB,OAAO;AACpC,gBAAY,WAAW;AAAA,EACzB,OAAO;AACL,cAAU,qBAAqB,OAAO;AACtC,gBAAY,qBAAqB,SAAS;AAC1C,cAAU,qBAAqB,OAAO;AAAA,EACxC;AAGA,MAAI,MAAM,YAAMA,KAAI;AACpB,SAAO;AAAA,IACL,MAAAA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AAEA,IAAO,gBAAQ;;;ACzDf,IAAM,QAAQ;AAAA,EACZ,CAAC,UAAU,GAAG,CAAC;AAAA,EACf,CAAC,UAAU,GAAG,CAAC;AAAA,EACf,CAAC,QAAQ,GAAG,CAAC;AAAA,EACb,CAAC,UAAU,GAAG,CAAC;AAAA,EACf,CAAC,UAAU,IAAI,CAAC;AAClB;AACA,IAAM,QAAQ;AAAA,EACZ,CAAC,QAAQ,GAAG,CAAC;AAAA,EACb,CAAC,UAAU,GAAG,CAAC;AAAA,EACf,CAAC,UAAU,GAAG,CAAC;AAAA,EACf,CAAC,UAAU,GAAG,CAAC;AAAA,EACf,CAAC,UAAU,IAAI,CAAC;AAClB;AAEA,IAAO,kBAAQ,EAAE,OAAO,MAAM;;;ACpB9B,IAAO,mBAAQ;AAAA,EACb;AAAA,EACA,CAAC,GAAG,CAAC;AAAA,EACL,CAAC,GAAG,CAAC;AAAA,EACL,CAAC,GAAG,CAAC;AAAA,EACL,CAAC,GAAG,CAAC;AACP;;;ACDA,IAAMC,SAAQ;AAAA,EACZ,QAAQ,CAAC,MAAM;AACb,iBAAO,GAAG;AAAA,MACR,aAAa;AAAA,IACf,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EACA,QAAQ,CAAC,MAAM;AACb,iBAAO,GAAG;AAAA,MACR,QAAQ;AAAA,MACR,aAAa;AAAA,IACf,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EACA,aAAa,CAAC,MAAM;AAClB,QAAI,SAAS,EAAE,QAAQ;AACvB,QAAI,UAAU,IAAI;AAChB,UAAI,EAAE,QAAQ,EAAE;AAAA,IAClB,WAAW,UAAU,IAAI;AACvB,UAAI,EAAE,QAAQ,EAAE;AAAA,IAClB,WAAW,UAAU,IAAI;AACvB,UAAI,EAAE,QAAQ,EAAE;AAAA,IAClB,OAAO;AACL,UAAI,EAAE,QAAQ,CAAC;AAAA,IACjB;AACA,iBAAO,GAAG;AAAA,MACR,QAAQ;AAAA,MACR,aAAa;AAAA,IACf,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EACA,MAAM,CAAC,MAAM;AACX,iBAAO,GAAG;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,aAAa;AAAA,IACf,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EACA,KAAK,CAAC,MAAM;AACV,iBAAO,GAAG;AAAA,MACR,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,aAAa;AAAA,IACf,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EACA,MAAM,CAAC,MAAM;AACX,QAAI,WAAW,EAAE,MAAM;AACvB,QAAI,EAAE,IAAI,EAAE,UAAU;AACtB,QAAI,EAAE,QAAQ,QAAQ,GAAG;AACvB,UAAI,EAAE,SAAS,GAAG,MAAM;AAAA,IAC1B;AACA,iBAAO,GAAG;AAAA,MACR,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,aAAa;AAAA,IACf,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EACA,OAAO,CAAC,MAAM;AACZ,iBAAO,GAAG;AAAA,MACR,MAAM;AAAA,MACN,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,aAAa;AAAA,IACf,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EACA,SAAS,CAAC,MAAM;AACd,QAAI,IAAI,EAAE,QAAQ;AAClB,QAAI,iBAAS,IAAI;AACf,mBAAO,GAAG;AAAA,QACR,OAAO,iBAAS,GAAG;AAAA,QACnB,MAAM,iBAAS,GAAG;AAAA,QAClB,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,aAAa;AAAA,MACf,CAAC;AAAA,IACH;AACA,WAAO;AAAA,EACT;AAAA,EACA,QAAQ,CAAC,MAAM;AACb,QAAI,UAAU,EAAE,OAAO;AACvB,QAAI,MAAM;AACV,QAAI,EAAE,WAAW,MAAM,SAAS;AAC9B,YAAM;AAAA,IACR;AACA,aAAS,IAAI,GAAG,IAAI,gBAAQ,KAAK,QAAQ,KAAK;AAC5C,UAAI,gBAAQ,KAAK,GAAG,OAAO,SAAS;AAElC,YAAIC,QAAO,EAAE,KAAK;AAClB,YAAI,YAAY,YAAY,EAAE,MAAM,IAAI,GAAG;AACzC,UAAAA,SAAQ;AAAA,QACV;AACA,qBAAO,GAAG;AAAA,UACR,MAAAA;AAAA,UACA,OAAO,gBAAQ,KAAK,GAAG;AAAA,UACvB,MAAM,gBAAQ,KAAK,GAAG;AAAA,UACtB,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,aAAa;AAAA,QACf,CAAC;AACD,eAAO;AAAA,MACT;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,MAAM,CAAC,MAAM;AACX,iBAAO,GAAG;AAAA,MACR,OAAO;AAAA,MACP,MAAM;AAAA,MACN,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,aAAa;AAAA,IACf,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EACA,QAAQ,CAAC,MAAM;AACb,QAAI,EAAE,QAAQ,MAAM;AACpB,QAAIA,QAAO,EAAE,KAAK;AAClB,QAAI,SAAS,SAASA,QAAO,IAAI,EAAE,IAAI;AACvC,QAAI,EAAE,KAAK,MAAM;AACjB,WAAO;AAAA,EACT;AAAA,EACA,SAAS,CAAC,MAAM;AACd,QAAI,EAAE,QAAQ,MAAM;AACpB,QAAIA,QAAO,EAAE,KAAK;AAElB,QAAI,SAAS,SAASA,QAAO,KAAK,EAAE,IAAI;AACxC,QAAI,EAAE,KAAK,MAAM;AACjB,WAAO;AAAA,EACT;AACF;AACAD,OAAM,OAAOA,OAAM;AAEnB,IAAM,UAAU,CAAC,GAAG,SAAS;AAC3B,MAAI,IAAI,EAAE,MAAM;AAChB,SAAOE,WAAU,IAAI;AACrB,MAAIF,OAAM,OAAO;AACf,WAAOA,OAAM,MAAM,CAAC;AAAA,EACtB;AACA,MAAI,SAAS,YAAY,SAAS,UAAU;AAC1C,QAAI,EAAE,OAAO,IAAI;AACjB,WAAOA,OAAM,OAAO,CAAC;AAAA,EACvB;AACA,SAAO;AACT;AAGA,IAAM,QAAQ,CAAC,GAAG,SAAS;AACzB,MAAI,IAAI,EAAE,MAAM;AAChB,SAAOE,WAAU,IAAI;AACrB,MAAIF,OAAM,OAAO;AAEf,QAAIA,OAAM,MAAM,CAAC;AACjB,QAAI,EAAE,IAAI,GAAG,IAAI;AACjB,QAAI,EAAE,SAAS,GAAG,aAAa;AAC/B,WAAO;AAAA,EACT;AACA,SAAO;AACT;;;ACxKA,IAAM,QAAQ,SAAU,MAAM;AAC5B,MAAIG,OAAM,EAAE,KAAK,CAAC,MAAM,MAAM,IAAI,GAAG;AACnC,WAAO;AAAA,EACT;AACA,MAAIC,MAAK,EAAE,KAAK,CAAC,MAAM,MAAM,IAAI,GAAG;AAClC,WAAO;AAAA,EACT;AACA,SAAO;AACT;AAIA,IAAM,QAAQ,SAAU,OAAO,MAAM,KAAK;AACxC,MAAI,CAAC,QAAQ,CAAC,KAAK;AACjB,WAAO,CAAC;AAAA,EACV;AAEA,SAAOC,WAAU,IAAI;AAErB,QAAM,MAAM,MAAM,EAAE,IAAI,GAAG;AAE3B,MAAI,MAAM,QAAQ,GAAG,GAAG;AACtB,QAAI,MAAM;AACV,YAAQ;AACR,UAAM;AAAA,EACR;AAGA,MAAI,IAAI,MAAM,MAAM;AACpB,MAAI,MAAM,IAAI,GAAG;AACf,QAAI,EAAE,KAAK,IAAI;AACf,WAAO;AAAA,EACT,OAAO;AACL,QAAI,QAAQ,EAAE,QAAQ,IAAI;AAC1B,QAAI,MAAM,SAAS,KAAK,GAAG;AACzB,UAAI,EAAE,KAAK,IAAI;AAAA,IACjB;AAAA,EACF;AAEA,MAAI,SAAS,CAAC;AACd,SAAO,EAAE,SAAS,GAAG,GAAG;AACtB,WAAO,KAAK,CAAC;AACb,QAAI,EAAE,IAAI,GAAG,IAAI;AAAA,EACnB;AACA,SAAO;AACT;AACA,IAAO,gBAAQ;;;AC/Cf,IAAM,WAAW,SAAO;AACtB,MAAI,CAAC,KAAK;AACR,WAAO,CAAC;AAAA,EACV;AACA,SAAO,IAAI,MAAM,IAAI;AACvB;AAGA,IAAMC,aAAY,SAAO;AACvB,QAAM,IAAI,GAAG,YAAY,IAAI,IAAI,OAAO,CAAC;AACzC,QAAM,IAAI,QAAQ,mBAAmB,OAAK;AACxC,WAAO,EAAE,YAAY;AAAA,EACvB,CAAC;AACD,QAAM,IAAI,QAAQ,cAAc,CAAC,MAAM,EAAE,YAAY,CAAC;AACtD,QAAM,IAAI,QAAQ,UAAU,MAAM;AAClC,QAAM,IAAI,QAAQ,sBAAsB,iBAAiB;AACzD,QAAM,IAAI,QAAQ,eAAe,UAAU;AAC3C,QAAM,IAAI,QAAQ,sBAAsB,iBAAiB;AACzD,SAAO;AACT;AAGA,IAAM,WAAW,OAAK;AACpB,MAAI,QAAQ,EAAE;AACd,MAAI,KAAK,EAAE;AACX,MAAI,MAAM,eAAe,EAAE,MAAM,OAAO;AACtC,SAAK,aAAO,EAAE,IAAI,KAAK;AAAA,EACzB;AACA,MAAI,OAAO,MAAM;AACf,QAAI,EAAE,WAAW,OAAO;AACtB,cAAQ,KAAK,qDAAqD,EAAE,KAAK,GAAG;AAAA,IAC9E;AACA,WAAO;AAAA,MACL,SAAS;AAAA,QACP,YAAY;AAAA,MACd;AAAA,IACF;AAAA,EACF;AACA,MAAI,QAAQ,MAAM;AAClB,MAAI,SAAS;AAAA,IACX,MAAMA,WAAU,EAAE;AAAA,IAClB,QAAQ,QAAQ,MAAM,GAAG;AAAA,IACzB,gBAAgB,MAAM;AAAA,IAEtB,YAAY,MAAM,QAAQ,MAAM,UAAU;AAAA,IAC1C,SAAS,CAAC;AAAA,EACZ;AAEA,MAAI,OAAO,QAAQ;AACjB,QAAI,MAAM,SAAS,MAAM,GAAG;AAC5B,WAAO,SAAS;AAAA,MACd,OAAO,IAAI;AAAA,MACX,MAAM,IAAI;AAAA,IACZ;AAAA,EACF;AAGA,MAAI,SAAS,MAAM;AACnB,MAAI,SAAS;AACb,MAAI,OAAO,WAAW,MAAM;AAC1B,QAAI,OAAO,eAAe,SAAS;AACjC,eAAS,SAAS;AAAA,IACpB,OAAO;AAEL,eAAS,MAAM,SAAS;AAAA,IAC1B;AAAA,EACF;AAIA,MAAI,OAAO,WAAW,OAAO;AAC3B,WAAO,QAAQ,SAAS;AACxB,WAAO,QAAQ,QAAQ;AAAA,EACzB,WAAW,mBAAa,EAAE,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,MAAM,QAAQ,MAAM,MAAM,MAAM;AAClG,WAAO,QAAQ,SAAS;AACxB,WAAO,QAAQ,QAAQ,OAAO,eAAe;AAAA,EAC/C,OAAO;AAEL,WAAO,QAAQ,SAAS;AACxB,WAAO,QAAQ,QAAQ,OAAO,eAAe;AAAA,EAC/C;AACA,SAAO;AACT;AACA,IAAO,mBAAQ;;;ACzEf,IAAMC,SAAQ;AAAA,EACZ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAGA,IAAM,UAAU;AAAA,EACd,KAAK,SAAU,OAAO,IAAI;AACxB,QAAI,IAAI,KAAK,MAAM;AACnB,QAAI,cAAY,GAAG,OAAO,IAAI;AAC9B,QAAI,IAAI;AACN,WAAK,KAAK,aAAO,EAAE;AAAA,IACrB;AACA,WAAO;AAAA,EACT;AAAA,EACA,UAAU,WAAY;AACpB,WAAO,iBAAS,IAAI;AAAA,EACtB;AAAA,EACA,OAAO,WAAY;AACjB,WAAO,iBAAS,IAAI,EAAE,QAAQ;AAAA,EAChC;AAAA,EACA,QAAQ,WAAY;AAClB,WAAO,iBAAS,IAAI,EAAE;AAAA,EACxB;AAAA,EACA,QAAQ,WAAY;AAClB,WAAO,iBAAS,IAAI,EAAE,QAAQ,SAAS;AAAA,EACzC;AAAA,EACA,YAAY,WAAY;AACtB,WAAO,iBAAS,IAAI,EAAE;AAAA,EACxB;AAAA,EACA,QAAQ,SAAUC,MAAK;AACrB,WAAO,eAAO,MAAMA,IAAG;AAAA,EACzB;AAAA,EACA,SAAS,SAAUA,MAAK;AACtB,WAAO,gBAAQ,MAAMA,IAAG;AAAA,EAC1B;AAAA,EACA,SAAS,SAAU,MAAM;AACvB,WAAO,QAAS,MAAM,IAAI;AAAA,EAC5B;AAAA,EACA,OAAO,SAAU,MAAM;AACrB,WAAO,MAAO,MAAM,IAAI;AAAA,EAC1B;AAAA,EACA,UAAU,WAAY;AACpB,QAAIC,QAAO,KAAK,KAAK;AACrB,WAAO,WAAWA,KAAI;AAAA,EACxB;AAAA,EACA,UAAU,SAAU,MAAM;AACxB,WAAO,iBAAS,MAAM,IAAI;AAAA,EAC5B;AAAA,EACA,SAAS,SAAU,MAAM;AACvB,WAAO,gBAAQ,MAAM,IAAI;AAAA,EAC3B;AAAA,EACA,MAAM,SAAU,GAAG,MAAM;AACvB,WAAO,aAAK,MAAM,GAAG,IAAI;AAAA,EAC3B;AAAA,EACA,OAAO,SAAU,GAAG;AAClB,QAAI,CAAC,GAAG;AACN,UAAI,KAAK,MAAM,EAAE,IAAI;AAAA,IACvB;AACA,WAAO,cAAM,MAAM,CAAC;AAAA,EACtB;AAAA,EACA,MAAM,SAAU,MAAM;AACpB,QAAI,IAAI,KAAK,IAAI,GAAG,IAAI;AACxB,WAAO,EAAE,QAAQ,IAAI;AAAA,EACvB;AAAA,EAEA,MAAM,SAAU,MAAM;AACpB,QAAI,IAAI,KAAK,SAAS,GAAG,IAAI;AAC7B,WAAO,EAAE,QAAQ,IAAI;AAAA,EACvB;AAAA,EACA,SAAS,WAAY;AAEnB,QAAI,CAAC,KAAK,SAAS,KAAK,UAAU,GAAG;AACnC,aAAO;AAAA,IACT;AACA,WAAO,CAAC,MAAM,KAAK,EAAE,QAAQ,CAAC;AAAA,EAChC;AAAA,EAEA,MAAM,SAAU,IAAI;AAClB,QAAI,IAAI,KAAK,MAAM;AACnB,MAAE,KAAK,aAAO,IAAI,EAAE,SAAS;AAC7B,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,SAAU,MAAM,IAAI;AAEzB,QAAI,OAAO,SAAS,YAAY,OAAO,OAAO,UAAU;AACtD,UAAI,MAAM;AACV,WAAK;AACL,aAAO;AAAA,IACT;AACA,WAAO,cAAM,MAAM,MAAM,EAAE;AAAA,EAC7B;AAAA,EACA,SAAS,WAAY;AACnB,QAAI,OAAO,KAAK,KAAK;AAErB,QAAI,OAAO,KAAK,OAAO,IAAI;AACzB,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAAA,EACA,UAAU,WAAY;AACpB,WAAO,CAAC,KAAK,QAAQ;AAAA,EACvB;AAAA,EACA,aAAa,WAAY;AACvB,YAAQ,KAAK,MAAM,GAAG;AAAA,MACpB,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO,KAAK,SAAS,IAAI,KAAK;AAAA,MAChC,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,MACT;AACE,cAAM,IAAI,MAAM,sBAAsB;AAAA,IAC1C;AAAA,EACF;AAAA,EAEA,KAAK,WAAY;AACf,YAAQ,IAAI,EAAE;AACd,YAAQ,IAAI,eAAO,MAAM,YAAY,CAAC;AACtC,WAAO;AAAA,EACT;AAAA,EACA,SAAS,WAAY;AACnB,YAAQ,IAAI,EAAE;AACd,YAAQ,IAAI,eAAO,MAAM,YAAY,CAAC;AACtC,WAAO;AAAA,EACT;AAAA,EACA,MAAM,WAAY;AAChB,WAAOF,OAAM,OAAO,CAAC,GAAG,SAAS;AAC/B,QAAE,QAAQ,KAAK,MAAM;AACrB,aAAO;AAAA,IACT,GAAG,CAAC,CAAC;AAAA,EACP;AAAA,EACA,OAAO,WAAY;AACjB,QAAI,KAAK,KAAK,SAAS;AACvB,QAAIG,QAAO,KAAK,OAAO,IAAI,IAAI,MAAM,KAAK,OAAO,cAAc,IAAI,MAAM,KAAK,KAAK;AACnF,IAAAA,SAAQ,cAAc,KAAK,OAAO,MAAM;AACxC,YAAQ,IAAI,QAAQA,QAAO,cAAc,GAAG,OAAO,OAAO,GAAG,QAAQ,SAAS,GAAG;AACjF,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,SAAU,GAAG;AACjB,QAAI,KAAK,MAAM,EAAE,IAAI,CAAC;AACtB,WAAO,EAAE,MAAM,IAAI;AAAA,EACrB;AAAA,EACA,SAAS,WAAY;AACnB,QAAI,IAAI,KAAK,MAAM,EAAE,IAAI,KAAK,IAAI,CAAC;AACnC,WAAO,EAAE,MAAM,IAAI;AAAA,EACrB;AAAA,EACA,WAAW,SAAU,OAAO;AAE1B,QAAI,OAAO,UAAU,UAAU;AAC7B,WAAK,aAAa;AAClB,aAAO;AAAA,IACT;AACA,QAAI,OAAO,UAAU,UAAU;AAE7B,cAAQ,MAAM,YAAY,EAAE,KAAK;AACjC,UAAI,MAAMC,OAAM,EAAE,QAAQ,KAAK;AAC/B,UAAI,QAAQ,IAAI;AACd,cAAMC,MAAK,EAAE,QAAQ,KAAK;AAAA,MAC5B;AACA,UAAI,QAAQ,IAAI;AACd,cAAM;AAAA,MACR;AACA,WAAK,aAAa;AAAA,IACpB,OAAO;AACL,cAAQ,KAAK,0DAA0D,KAAK;AAAA,IAC9E;AACA,WAAO;AAAA,EACT;AACF;AAEA,QAAQ,QAAQ,QAAQ;AACxB,QAAQ,QAAQ,QAAQ;AACxB,QAAQ,OAAO,QAAQ;AACvB,IAAO,kBAAQ;;;AC/Mf,IAAMC,YAAW,CAAC,MAAM;AAEtB,MAAI,OAAO,MAAM,UAAU;AACzB,QAAI,SAAS,GAAG,EAAE;AAAA,EACpB;AACA,SAAO;AACT;AAEA,IAAM,QAAQ,CAAC,QAAQ,SAAS,QAAQ,QAAQ,UAAU,UAAU,aAAa;AAGjF,IAAM,UAAU,CAAC,GAAG,KAAK,SAAS;AAChC,MAAI,IAAI,MAAM,QAAQ,IAAI;AAC1B,MAAI,MAAM,MAAM,MAAM,GAAG,MAAM,MAAM;AACrC,WAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACnC,QAAI,OAAO,IAAI,IAAI,IAAI;AACvB,MAAE,IAAI,IAAI,IAAI;AAAA,EAChB;AACA,SAAO;AACT;AAGA,IAAM,UAAU,SAAU,GAAG,KAAK,OAAO,MAAM;AAC7C,MAAI,UAAU,QAAQ,EAAE,SAAS,GAAG,GAAG;AACrC,QAAI,EAAE,IAAI,GAAG,IAAI;AAAA,EACnB,WAAW,UAAU,SAAS,EAAE,QAAQ,GAAG,GAAG;AAC5C,QAAI,EAAE,MAAM,GAAG,IAAI;AAAA,EACrB;AACA,SAAO;AACT;AAEA,IAAM,eAAe,SAAU,GAAG,GAAG;AACnC,MAAIA,UAAS,CAAC;AACd,MAAI,UAAU,EAAE,YAAY;AAC5B,MAAIC,QAAO,UAAU;AACrB,SAAO,EAAE,QAAQA;AACnB;AAEA,IAAM,UAAU,SAAU,GAAG,GAAG,OAAO;AACrC,MAAID,UAAS,CAAC;AACd,MAAI,MAAM,EAAE,MAAM;AAClB,MAAIC,QAAO,EAAE,OAAO,IAAI;AACxB,MAAI,QAAQA,QAAO,qBAAG;AACtB,IAAE,QAAQ,EAAE,QAAQ;AACpB,MAAI,QAAQ,GAAG,KAAK,OAAO,QAAQ;AACnC,SAAO,EAAE;AACX;AAEA,IAAM,UAAU,SAAU,GAAG,GAAG,OAAO;AACrC,MAAID,UAAS,CAAC;AACd,MAAI,MAAM,EAAE,MAAM;AAClB,MAAIC,QAAO,EAAE,OAAO,IAAI;AACxB,MAAI,QAAQA,QAAO,qBAAG;AACtB,IAAE,SAAS;AACX,UAAQ,GAAG,KAAK,QAAQ;AACxB,MAAI,QAAQ,GAAG,KAAK,OAAO,MAAM;AACjC,SAAO,EAAE;AACX;AAEA,IAAM,QAAQ,SAAU,GAAG,GAAG,OAAO;AACnC,MAAID,UAAS,CAAC;AACd,MAAI,KAAK,IAAI;AACX,QAAI;AAAA,EACN,WAAW,IAAI,GAAG;AAChB,QAAI;AAAA,EACN;AACA,MAAI,MAAM,EAAE,MAAM;AAClB,MAAIC,QAAO,EAAE,KAAK,IAAI;AACtB,MAAI,QAAQA,QAAO,qBAAG;AACtB,IAAE,SAAS;AAEX,MAAI,EAAE,KAAK,MAAM,IAAI,KAAK,GAAG;AAC3B,QAAI,IAAI,MAAM;AACd,QAAIA,QAAO,GAAG;AACZ,MAAAA,SAAQ;AAAA,IACV;AACA,QAAIA,QAAO,GAAG;AACZ,MAAAA,SAAQ;AAAA,IACV;AACA,YAAQA,QAAO,qBAAG;AAClB,MAAE,SAAS;AAAA,EACb;AACA,eAAO,GAAG;AAAA,IACR,MAAM;AAAA,EACR,CAAC;AACD,UAAQ,GAAG,KAAK,QAAQ;AACxB,MAAI,QAAQ,GAAG,KAAK,OAAO,KAAK;AAChC,SAAO,EAAE;AACX;AAEA,IAAM,OAAO,SAAU,GAAG,KAAK,OAAO;AACpC,MAAI,IAAI,IAAI,MAAM,sDAAsD;AACxE,MAAI,CAAC,GAAG;AAEN,QAAI,IAAI,MAAM,uBAAuB;AACrC,QAAI,CAAC,GAAG;AACN,aAAO,EAAE;AAAA,IACX;AACA,MAAE,OAAO,GAAG,GAAG,GAAG;AAClB,MAAE,OAAO,GAAG,GAAG,EAAE;AAAA,EACnB;AACA,MAAI,MAAM;AACV,MAAI,OAAO,SAAS,EAAE,IAAI,EAAE;AAC5B,MAAI,SAAS,SAAS,EAAE,IAAI,EAAE;AAC9B,MAAI,UAAU,IAAI;AAChB,aAAS;AAAA,EACX;AACA,MAAI,OAAO,IAAI;AACb,UAAM;AAAA,EACR;AAEA,MAAI,QAAQ,OAAO;AACjB,QAAI,EAAE,OAAO,QAAQ,SAAS,IAAI;AAEhC,aAAO;AAAA,IACT;AACA,QAAI,EAAE,OAAO,QAAQ,OAAO,IAAI;AAE9B,cAAQ;AAAA,IACV;AAAA,EACF;AAEA,IAAE,KAAK,EAAE,MAAM;AACf,IAAE,KAAK,EAAE,GAAG,QAAQ,KAAK,EAAE;AAC3B,MAAI,MAAM,SAAS,EAAE,IAAI,EAAE,KAAK;AAChC,MAAI,MAAM,EAAE,MAAM;AAClB,MAAI,EAAE,KAAK,IAAI;AACf,MAAI,EAAE,OAAO,MAAM;AACnB,MAAI,EAAE,OAAO,GAAG;AAChB,MAAI,EAAE,YAAY,CAAC;AACnB,MAAI,QAAQ,GAAG,KAAK,OAAO,KAAK;AAChC,SAAO,EAAE;AACX;AAEA,IAAM,OAAO,SAAU,GAAG,GAAG,OAAO;AAClC,MAAID,UAAS,CAAC;AAEd,MAAI,IAAI,IAAI;AACV,QAAIE,SAAQ,EAAE,MAAM;AACpB,QAAI,MAAM,qBAAYA;AAEtB,QAAIA,WAAU,KAAK,MAAM,MAAM,WAAW,EAAE,KAAK,CAAC,GAAG;AACnD,YAAM;AAAA,IACR;AACA,QAAI,IAAI,KAAK;AACX,UAAI;AAAA,IACN;AAAA,EACF;AAEA,MAAI,KAAK,GAAG;AACV,QAAI;AAAA,EACN;AACA,MAAI,MAAM,EAAE,MAAM;AAClB,eAAO,GAAG;AAAA,IACR,MAAM;AAAA,EACR,CAAC;AACD,MAAI,QAAQ,GAAG,KAAK,OAAO,OAAO;AAClC,SAAO,EAAE;AACX;AAEA,IAAM,QAAQ,SAAU,GAAG,GAAG,OAAO;AACnC,MAAI,OAAO,MAAM,UAAU;AACzB,QAAI,MAAM,QAAQ;AAChB,UAAI;AAAA,IACN;AACA,QAAI,QAAQ,EAAE,EAAE,YAAY;AAAA,EAC9B;AACA,MAAIF,UAAS,CAAC;AAEd,MAAI,KAAK,IAAI;AACX,QAAI;AAAA,EACN;AACA,MAAI,KAAK,GAAG;AACV,QAAI;AAAA,EACN;AAEA,MAAI,IAAI,EAAE,KAAK;AAEf,MAAI,IAAI,qBAAY,IAAI;AAEtB,QAAI,qBAAY;AAAA,EAClB;AACA,MAAI,MAAM,EAAE,MAAM;AAClB,eAAO,GAAG;AAAA,IACR,OAAO;AAAA,IACP;AAAA,EACF,CAAC;AACD,MAAI,QAAQ,GAAG,KAAK,OAAO,MAAM;AACjC,SAAO,EAAE;AACX;AAEA,IAAM,OAAO,SAAU,GAAG,GAAG;AAE3B,MAAI,OAAO,MAAM,YAAY,cAAc,KAAK,CAAC,GAAG;AAClD,QAAI,EAAE,QAAQ,KAAK,EAAE,EAAE,KAAK;AAC5B,QAAI,OAAO,CAAC;AAEZ,QAAI,IAAI,IAAI;AAEV,UAAI,OAAO;AAAA,IACb,OAAO;AAEL,UAAI,MAAO;AAAA,IACb;AAAA,EACF;AACA,MAAIA,UAAS,CAAC;AACd,eAAO,GAAG;AAAA,IACR,MAAM;AAAA,EACR,CAAC;AACD,SAAO,EAAE;AACX;AAEA,IAAM,OAAO,SAAU,GAAG,GAAG,OAAO;AAClC,MAAI,MAAM,EAAE,MAAM;AAClB,MAAIA,UAAS,CAAC;AACd,MAAI,EAAE,MAAM,CAAC;AACb,MAAI,EAAE,KAAK,CAAC;AACZ,MAAI,EAAE,IAAI,QAAQ;AAIlB,MAAI,EAAE,UAAU,MAAM,cAAc,EAAE,KAAK,KAAK,IAAI;AAClD,QAAI,EAAE,IAAI,GAAG,MAAM;AAAA,EACrB;AACA,OAAK;AACL,MAAI,EAAE,IAAI,GAAG,OAAO;AACpB,MAAI,QAAQ,GAAG,KAAK,OAAO,MAAM;AACjC,SAAO,EAAE;AACX;AAEA,IAAM,YAAY,SAAU,GAAG,GAAG,OAAO;AACvC,MAAIA,UAAS,CAAC;AACd,MAAI,MAAM,EAAE,MAAM;AAClB,OAAK;AACL,MAAI,KAAK,GAAG;AACV,QAAI;AAAA,EACN,WAAW,KAAK,KAAK;AACnB,QAAI,WAAW,EAAE,KAAK,CAAC,GAAG;AACxB,UAAI;AAAA,IACN,OAAO;AACL,UAAI;AAAA,IACN;AAAA,EACF;AACA,MAAI,EAAE,QAAQ,MAAM;AACpB,MAAI,EAAE,IAAI,GAAG,KAAK;AAClB,UAAQ,GAAG,KAAK,MAAM;AACtB,MAAI,QAAQ,GAAG,KAAK,OAAO,MAAM;AACjC,SAAO,EAAE;AACX;;;AChQA,IAAI,UAAU;AACd,IAAI,UAAU;AAEP,SAAS,KAAK;AAAE,SAAO;AAAQ;AAC/B,SAAS,KAAK;AAAE,SAAO;AAAQ;AAC/B,SAASG,KAAI,MAAM;AACtB,YAAU,KAAK,MAAM;AACrB,YAAU,KAAK,MAAM;AACzB;;;ACJA,IAAMC,WAAU;AAAA,EACd,aAAa,SAAU,KAAK;AAC1B,QAAI,QAAQ,QAAW;AACrB,UAAI,IAAI,KAAK,MAAM;AACnB,QAAE,QAAQ,aAAa,GAAG,GAAG;AAC7B,aAAO;AAAA,IACT;AACA,WAAO,KAAK,EAAE,gBAAgB;AAAA,EAChC;AAAA,EACA,QAAQ,SAAU,KAAK,OAAO;AAC5B,QAAI,QAAQ,QAAW;AACrB,UAAI,IAAI,KAAK,MAAM;AACnB,QAAE,QAAQ,QAAQ,GAAG,KAAK,KAAK;AAC/B,aAAO;AAAA,IACT;AACA,WAAO,KAAK,EAAE,WAAW;AAAA,EAC3B;AAAA,EACA,QAAQ,SAAU,KAAK,OAAO;AAC5B,QAAI,QAAQ,QAAW;AACrB,UAAI,IAAI,KAAK,MAAM;AACnB,QAAE,QAAQ,QAAQ,GAAG,KAAK,KAAK;AAC/B,aAAO;AAAA,IACT;AACA,WAAO,KAAK,EAAE,WAAW;AAAA,EAC3B;AAAA,EACA,MAAM,SAAU,KAAK,OAAO;AAC1B,QAAI,IAAI,KAAK;AACb,QAAI,QAAQ,QAAW;AACrB,UAAI,IAAI,KAAK,MAAM;AACnB,QAAE,QAAQ,MAAM,GAAG,KAAK,KAAK;AAC7B,aAAO;AAAA,IACT;AACA,WAAO,EAAE,SAAS;AAAA,EACpB;AAAA,EAGA,WAAW,SAAU,KAAK,OAAO;AAC/B,QAAI,QAAQ,QAAW;AACrB,UAAI,IAAI,KAAK,MAAM;AACnB,UAAIC,UAAS,MAAM;AACnB,MAAAA,UAASA,UAAS;AAClB,UAAIC,QAAO,SAAS,KAAK,EAAE;AAC3B,QAAE,QAAQ,MAAM,GAAGA,OAAM,KAAK;AAC9B,QAAE,QAAQ,QAAQ,GAAGD,SAAQ,KAAK;AAClC,aAAO;AAAA,IACT;AACA,QAAI,IAAI,KAAK;AACb,QAAI,OAAO,EAAE,SAAS;AACtB,QAAI,SAAS,EAAE,WAAW;AAC1B,aAAS,SAAS;AAClB,WAAO,OAAO;AAAA,EAChB;AAAA,EAGA,QAAQ,SAAU,KAAK,OAAO;AAC5B,QAAI,IAAI,KAAK;AACb,QAAI,QAAQ,QAAW;AACrB,UAAI,IAAI,KAAK,MAAM;AACnB,YAAM,KAAK;AACX,UAAI,IAAI,IAAI,MAAM,mBAAmB;AACrC,UAAI,GAAG;AACL,YAAI,OAAO,SAAS,EAAE,IAAI,EAAE;AAC5B,YAAI,EAAE,OAAO,MAAM;AACjB,kBAAQ;AAAA,QACV;AACA,UAAE,QAAQ,MAAM,GAAG,MAAM,KAAK;AAAA,MAChC;AACA,aAAO;AAAA,IACT;AAEA,QAAI,SAAS,EAAE,SAAS;AACxB,QAAI,SAAS,IAAI;AACf,eAAS,SAAS;AAAA,IACpB;AACA,QAAI,WAAW,GAAG;AAChB,eAAS;AAAA,IACX;AACA,WAAO;AAAA,EACT;AAAA,EAGA,MAAM,SAAU,KAAK,OAAO;AAC1B,QAAI,QAAQ,QAAW;AACrB,UAAI,IAAI,KAAK,MAAM;AACnB,YAAM,IAAI,YAAY,EAAE,KAAK;AAC7B,QAAE,QAAQ,KAAM,GAAG,KAAK,KAAK;AAC7B,aAAO;AAAA,IACT;AACA,WAAO,GAAG,KAAK,IAAI,KAAK,QAAQ,KAAK,OAAO,CAAC,IAAI,KAAK,KAAK;AAAA,EAC7D;AAAA,EAGA,MAAM,SAAU,OAAO,OAAO;AAE5B,QAAI,QAAQ,GAAG;AACf,QAAI,OAAO,KAAK,KAAK;AACrB,QAAI,QAAQ,IAAI;AAEd,cAAQ,GAAG;AAAA,IACb;AACA,QAAI,OAAO,UAAU,UAAU;AAC7B,aAAO;AAAA,IACT;AAEA,QAAI,IAAI,KAAK,MAAM;AACnB,YAAQ,MAAM,YAAY,EAAE,KAAK;AAGjC,QAAI,QAAQ,MAAM,UAAU,MAAM;AAEhC,cAAQ;AACR,aAAO,EAAE,KAAK,MAAM,KAAK;AAAA,IAC3B;AACA,QAAI,OAAO,MAAM,UAAU,MAAM;AAC/B,cAAQ;AACR,aAAO,EAAE,KAAK,MAAM,KAAK;AAAA,IAC3B;AACA,WAAO;AAAA,EACT;AAAA,EAGA,SAAS,SAAU,KAAK,OAAO;AAC7B,QAAI,QAAQ,QAAW;AACrB,YAAM,QAAQ;AAAA,QACZ,SAAS;AAAA,QACT,WAAW;AAAA,QACX,MAAM;AAAA,QACN,OAAO;AAAA,QACP,WAAW;AAAA,QACX,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,UAAU;AAAA,MACZ;AACA,UAAI,IAAI,KAAK,MAAM;AACnB,YAAM,OAAO;AACb,YAAM,IAAI,YAAY;AACtB,UAAI,MAAM,eAAe,GAAG,MAAM,MAAM;AACtC,YAAI,EAAE,KAAK,MAAM,MAAM,KAAK;AAAA,MAC9B;AACA,aAAO;AAAA,IACT;AACA,QAAI,IAAI,KAAK,KAAK;AAClB,QAAI,IAAI,GAAG;AACT,aAAO;AAAA,IACT;AACA,QAAI,IAAI,IAAI;AAEV,aAAO;AAAA,IACT;AACA,QAAI,IAAI,IAAI;AAEV,aAAO;AAAA,IACT;AACA,QAAI,IAAI,IAAI;AAEV,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAAA,EAGA,KAAK,SAAU,KAAK;AAClB,QAAI,QAAQ,QAAW;AACrB,aAAO,KAAK,IAAI,GAAG;AAAA,IACrB;AACA,WAAO,KAAK,OAAO,KAAK;AAAA,EAC1B;AACF;AACA,IAAO,eAAQD;;;ACzKf,IAAMG,WAAU;AAAA,EAEd,MAAM,SAAU,KAAK,OAAO;AAC1B,QAAI,QAAQ,QAAW;AACrB,UAAI,IAAI,KAAK,MAAM;AACnB,YAAM,SAAS,KAAK,EAAE;AACtB,UAAI,KAAK;AACP,UAAE,QAAQ,KAAM,GAAG,KAAK,KAAK;AAAA,MAC/B;AACA,aAAO;AAAA,IACT;AACA,WAAO,KAAK,EAAE,QAAQ;AAAA,EACxB;AAAA,EAGA,KAAK,SAAU,OAAO,OAAO;AAC3B,QAAI,UAAU,QAAW;AACvB,aAAO,KAAK,EAAE,OAAO;AAAA,IACvB;AACA,QAAI,WAAW,KAAK,MAAM;AAC1B,QAAI,OAAO;AAEX,QAAI,OAAO,UAAU,UAAU;AAC7B,cAAQ,MAAM,YAAY;AAC1B,UAAI,QAAQ,eAAe,KAAK,GAAG;AACjC,eAAO,QAAQ;AAAA,MACjB,OAAO;AACL,eAAOC,OAAM,EAAE,QAAQ,KAAK;AAC5B,YAAI,SAAS,IAAI;AACf,iBAAOC,MAAK,EAAE,QAAQ,KAAK;AAAA,QAC7B;AAAA,MACF;AAAA,IACF;AAEA,QAAI,MAAM,KAAK,EAAE,OAAO;AACxB,QAAIC,QAAO,MAAM;AACjB,QAAI,UAAU,QAAQA,QAAO,GAAG;AAC9B,MAAAA,QAAOA,QAAO;AAAA,IAChB;AACA,QAAI,UAAU,SAASA,QAAO,GAAG;AAC/B,MAAAA,QAAOA,QAAO;AAAA,IAChB;AACA,QAAI,IAAI,KAAK,SAASA,OAAM,MAAM;AAElC,iBAAO,GAAG;AAAA,MACR,MAAM,SAAS,KAAK;AAAA,MACpB,QAAQ,SAAS,OAAO;AAAA,MACxB,QAAQ,SAAS,OAAO;AAAA,IAC1B,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EAGA,SAAS,SAAU,OAAO,OAAO;AAC/B,QAAI,UAAU,QAAW;AACvB,aAAOD,MAAK,EAAE,KAAK,IAAI;AAAA,IACzB;AACA,QAAI,IAAI,KAAK,MAAM;AACnB,QAAI,EAAE,IAAI,OAAO,KAAK;AACtB,WAAO;AAAA,EACT;AACF;AACA,IAAO,eAAQF;;;AC5Df,IAAM,eAAe,CAAC,MAAM;AAC1B,MAAI,EAAE,OAAO,CAAC;AACd,MAAI,EAAE,OAAO,CAAC;AACd,MAAI,EAAE,YAAY,CAAC;AACnB,SAAO;AACT;AAEA,IAAMI,WAAU;AAAA,EAEd,WAAW,SAAU,KAAK,OAAO;AAC/B,QAAI,QAAQ,QAAW;AACrB,UAAI,IAAI,KAAK,MAAM;AACnB,QAAE,QAAQ,UAAW,GAAG,KAAK,KAAK;AAClC,aAAO;AAAA,IACT;AAEA,QAAI,MAAM;AACV,QAAIC,SAAQ,KAAK,EAAE,SAAS;AAC5B,QAAI;AAEJ,aAAS,IAAI,GAAG,KAAKA,QAAO,KAAK;AAC/B,YAAM,IAAI,KAAK;AACf,UAAI,QAAQ,CAAC;AACb,UAAI,YAAY,KAAK,EAAE,YAAY,CAAC;AACpC,UAAI,SAAS,CAAC;AACd,UAAI,WAAW,CAAC;AAChB,UAAI,SAAS,CAAC;AACd,UAAI,SAAS,EAAE;AACf,aAAO,IAAI,QAAQ;AAAA,IACrB;AACA,WAAO,MAAM,KAAK,EAAE,QAAQ;AAAA,EAC9B;AAAA,EAGA,MAAM,SAAU,KAAK,OAAO;AAE1B,QAAI,QAAQ,QAAW;AACrB,UAAI,IAAI,KAAK,MAAM;AACnB,QAAE,QAAQ,KAAM,MAAM,KAAK,KAAK;AAChC,UAAI,aAAa,CAAC;AAClB,aAAO;AAAA,IACT;AAEA,QAAI,MAAM,KAAK,MAAM;AACrB,UAAM,IAAI,MAAM,CAAC;AACjB,UAAM,IAAI,KAAK,CAAC;AAChB,UAAM,aAAa,GAAG;AACtB,UAAM,IAAI,IAAI,QAAQ;AAEtB,QAAI,IAAI,MAAM,MAAM,MAAM,IAAI,KAAK,KAAK,IAAI;AAC1C,YAAM,IAAI,IAAI,GAAG,MAAM;AAAA,IACzB;AAGA,QAAI,QAAQ;AACZ,QAAI,IAAI,KAAK,MAAM,GAAG;AACpB,cAAQ;AAAA,IACV;AACA,UAAM,IAAI,MAAM,GAAG,QAAQ;AAC3B,UAAM,UAAU,KAAK;AAErB,QAAI,IAAI,QAAQ,SAAS;AACvB,aAAO;AAAA,IACT;AAEA,QAAI,IAAI;AACR,QAAI,YAAY,KAAK,MAAM,IAAI;AAE/B,QAAI,SAAS,qBAAG,OAAO;AACvB,SAAK;AACL,WAAO,KAAK,IAAI,KAAK;AACnB,UAAI,IAAI,QAAQ,SAAS;AACvB,eAAO,IAAI;AAAA,MACb;AACA,YAAM,IAAI,IAAI,GAAG,MAAM;AAAA,IACzB;AACA,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,SAAU,OAAO,OAAO;AAC7B,QAAI,UAAU,QAAW;AACvB,UAAI,IAAI,KAAK,MAAM;AACnB,QAAE,QAAQ,MAAO,GAAG,OAAO,KAAK;AAChC,aAAO;AAAA,IACT;AACA,WAAO,KAAK,EAAE,SAAS;AAAA,EACzB;AAAA,EAEA,WAAW,SAAU,OAAO,OAAO;AACjC,QAAI,UAAU,QAAW;AACvB,UAAI,IAAI,KAAK,MAAM;AACnB,UAAI,EAAE,MAAM,OAAO,KAAK;AACxB,aAAO;AAAA,IACT;AACA,WAAO,KAAK,EAAE,KAAK,MAAM;AAAA,EAC3B;AAAA,EAGA,SAAS,SAAU,KAAK,OAAO;AAC7B,QAAI,QAAQ,QAAW;AACrB,UAAI,OAAO,QAAQ,UAAU;AAC3B,cAAM,IAAI,QAAQ,OAAO,EAAE;AAC3B,cAAM,SAAS,KAAK,EAAE;AAAA,MACxB;AACA,UAAI,iBAAS,MAAM;AACjB,YAAI,IAAI,KAAK,MAAM;AACnB,YAAIA,SAAQ,iBAAS,KAAK;AAC1B,YAAI,EAAE,MAAMA,QAAO,KAAK;AACxB,YAAI,EAAE,KAAK,GAAG,KAAK;AACnB,YAAI,EAAE,QAAQ,KAAK;AACnB,eAAO;AAAA,MACT;AAAA,IACF;AACA,QAAIA,SAAQ,KAAK,EAAE,SAAS;AAC5B,aAAS,IAAI,GAAG,IAAI,iBAAS,QAAQ,KAAK;AACxC,UAAIA,SAAQ,iBAAS,GAAG,IAAI;AAC1B,eAAO,IAAI;AAAA,MACb;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EAGA,QAAQ,SAAU,OAAO,OAAO;AAC9B,QAAI,MAAM;AACV,QAAI,KAAK,WAAW,MAAM,SAAS;AACjC,YAAM;AAAA,IACR;AACA,QAAI,UAAU,QAAW;AACvB,UAAI,IAAI,KAAK,MAAM;AACnB,eAAS,IAAI,GAAG,IAAI,gBAAQ,KAAK,QAAQ,KAAK;AAC5C,YAAI,UAAU,gBAAQ,KAAK,GAAG,IAAI;AAChC,cAAI,EAAE,MAAM,gBAAQ,KAAK,GAAG,IAAI,KAAK;AACrC,cAAI,EAAE,KAAK,CAAC;AACZ,cAAI,EAAE,QAAQ,KAAK;AAAA,QACrB;AAAA,MACF;AACA,aAAO;AAAA,IACT;AACA,QAAIA,SAAQ,KAAK,EAAE,SAAS;AAC5B,aAAS,IAAI,GAAG,IAAI,gBAAQ,KAAK,SAAS,GAAG,KAAK;AAChD,UAAIA,UAAS,gBAAQ,KAAK,GAAG,MAAMA,SAAQ,gBAAQ,KAAK,IAAI,GAAG,IAAI;AACjE,eAAO,gBAAQ,KAAK,GAAG;AAAA,MACzB;AAAA,IACF;AACA,WAAO,QAAQ,UAAU,WAAW;AAAA,EACtC;AAAA,EAGA,MAAM,SAAU,KAAK;AACnB,QAAI,QAAQ,QAAW;AACrB,UAAI,IAAI,KAAK,MAAM;AACnB,QAAE,QAAQ,KAAM,GAAG,GAAG;AACtB,aAAO;AAAA,IACT;AACA,WAAO,KAAK,EAAE,YAAY;AAAA,EAC5B;AAAA,EAGA,KAAK,SAAU,KAAK;AAClB,QAAI,QAAQ,QAAW;AACrB,UAAI,IAAI,KAAK,MAAM;AACnB,YAAM,IAAI,YAAY;AAEtB,UAAIC,QAAO,EAAE,EAAE,YAAY;AAE3B,UAAI,QAAQ,QAAQA,QAAO,GAAG;AAC5B,UAAE,QAAQ,KAAM,GAAGA,QAAO,EAAE;AAAA,MAC9B;AAEA,UAAI,QAAQ,QAAQA,QAAO,GAAG;AAC5B,UAAE,QAAQ,KAAM,GAAGA,QAAO,EAAE;AAAA,MAC9B;AACA,aAAO;AAAA,IACT;AACA,QAAI,KAAK,EAAE,YAAY,IAAI,GAAG;AAC5B,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAAA,EAGA,QAAQ,SAAU,OAAO;AACvB,QAAI,UAAU,QAAW;AACvB,cAAQ,OAAO,KAAK;AACpB,cAAQ,MAAM,QAAQ,eAAe,IAAI;AACzC,cAAQ,MAAM,QAAQ,wBAAwB,IAAI;AAClD,UAAI,CAAC,OAAO;AACV,gBAAQ,KAAK,iCAAiC;AAC9C,eAAO;AAAA,MACT;AAEA,UAAI,MAAM,WAAW,KAAK,aAAa,KAAK,KAAK,GAAG;AAClD,gBAAQ,OAAO;AAAA,MACjB;AACA,UAAIA,QAAO,OAAO,KAAK;AACvB,UAAI,MAAMA,KAAI,GAAG;AACf,eAAO;AAAA,MACT;AAEA,MAAAA,QAAO,KAAK,MAAMA,QAAO,EAAE,IAAI;AAC/B,aAAO,KAAK,KAAKA,KAAI;AAAA,IACvB;AACA,WAAO,KAAK,QAAQ,QAAQ,EAAE,KAAK;AAAA,EACrC;AAAA,EAEA,SAAS,SAAU,OAAO;AACxB,QAAI,UAAU,QAAW;AACvB,UAAI,OAAO,UAAU,UAAU;AAC7B,gBAAQ,MAAM,QAAQ,wBAAwB,IAAI;AAClD,gBAAQ,MAAM,QAAQ,kCAAkC,CAAC,GAAG,GAAG,MAAM;AACnE,cAAI,EAAE,MAAM,WAAW,GAAG;AACxB,gBAAI,MAAM;AAAA,UACZ;AACA,iBAAO;AAAA,QACT,CAAC;AACD,gBAAQ,MAAM,QAAQ,MAAM,EAAE;AAAA,MAChC;AACA,UAAIA,QAAO,OAAO,KAAK;AACvB,UAAI,MAAM,KAAK,GAAG;AAChB,gBAAQ,KAAK,kCAAkC;AAC/C,eAAO;AAAA,MACT;AAEA,UAAIA,UAAS,GAAG;AACd,QAAAA,QAAO;AAAA,MACT;AACA,UAAIA,SAAQ,GAAG;AACb,QAAAA,SAAQA,QAAO,KAAK;AAAA,MACtB,OAAO;AACL,QAAAA,SAAQA,QAAO,KAAK;AAAA,MACtB;AACA,aAAO,KAAK,KAAKA,KAAI;AAAA,IACvB;AAEA,QAAI,MAAM,KAAK,QAAQ,SAAS,EAAE,KAAK;AACvC,UAAM,KAAK,MAAM,MAAM,GAAG;AAC1B,QAAI,MAAM,GAAG;AACX,aAAO,MAAM;AAAA,IACf;AACA,WAAO,MAAM;AAAA,EACf;AAAA,EAEA,WAAW,SAAU,OAAO;AAC1B,QAAI,UAAU,QAAW;AACvB,UAAI,OAAO,UAAU,UAAU;AAC7B,gBAAQ,MAAM,QAAQ,wBAAwB,IAAI;AAClD,gBAAQ,OAAO,KAAK;AACpB,YAAI,MAAM,KAAK,GAAG;AAChB,kBAAQ,KAAK,oCAAoC;AACjD,iBAAO;AAAA,QACT;AAAA,MACF;AACA,UAAI,QAAQ,GAAG;AACb,iBAAS;AAAA,MACX;AACA,UAAIA,QAAO,QAAQ;AAEnB,UAAIA,UAAS,GAAG;AACd,QAAAA,QAAO;AAAA,MACT;AACA,aAAO,KAAK,KAAKA,KAAI;AAAA,IACvB;AAEA,QAAI,MAAM,KAAK,MAAM,KAAK,KAAK,IAAI,GAAI;AACvC,QAAI,OAAO,GAAG;AACZ,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AACF;AACA,IAAO,eAAQF;;;ACjRf,IAAMG,WAAU,OAAO,OAAO,CAAC,GAAG,cAAS,cAAS,YAAO;AAG3DA,SAAQ,eAAeA,SAAQ;AAC/BA,SAAQ,UAAUA,SAAQ;AAC1BA,SAAQ,UAAUA,SAAQ;AAC1BA,SAAQ,QAAQA,SAAQ;AACxBA,SAAQ,SAASA,SAAQ;AACzBA,SAAQ,MAAMA,SAAQ;AACtBA,SAAQ,MAAMA,SAAQ;AACtBA,SAAQ,OAAOA,SAAQ;AAEvB,IAAM,aAAa,WAAS;AAE1B,SAAO,KAAKA,QAAO,EAAE,QAAQ,OAAK;AAChC,UAAM,UAAU,KAAKA,SAAQ;AAAA,EAC/B,CAAC;AACH;AAEA,IAAO,gBAAQ;;;ACpBf,IAAM,iBAAiB,SAAUC,QAAOC,OAAM;AAC5C,MAAID,WAAU,KAAK,WAAWC,KAAI,GAAG;AACnC,WAAO;AAAA,EACT;AACA,SAAO,qBAAYD;AACrB;AAIA,IAAM,YAAY,CAAC,MAAM,QAAQ;AAE/B,MAAI,KAAK,QAAQ,GAAG;AAClB,QAAI,QAAQ,SAAS,KAAK,QAAQ,IAAI,EAAE;AACxC,SAAK,OAAO,IAAI,KAAK,IAAI;AACzB,SAAK,QAAQ,KAAK,QAAQ;AAAA,EAC5B,WAAW,KAAK,QAAQ,GAAG;AACzB,QAAI,IAAI,KAAK,IAAI,KAAK,KAAK;AAC3B,QAAI,QAAQ,SAAS,IAAI,IAAI,EAAE;AAC/B,QAAI,IAAI,OAAO,GAAG;AAChB,eAAS;AAAA,IACX;AACA,SAAK,OAAO,IAAI,KAAK,IAAI;AAEzB,SAAK,QAAQ,KAAK,QAAQ;AAC1B,SAAK,QAAQ,KAAK,QAAQ;AAC1B,QAAI,KAAK,UAAU,IAAI;AACrB,WAAK,QAAQ;AAAA,IACf;AAAA,EACF;AACA,SAAO;AACT;AAGA,IAAM,eAAe,CAAC,MAAM,KAAK,QAAQ;AACvC,OAAK,OAAO,IAAI,KAAK;AACrB,OAAK,QAAQ,IAAI,MAAM;AACvB,MAAIE,QAAO,IAAI,KAAK;AACpB,OAAK,OAAOA,QAAO,KAAK,IAAI,GAAG;AAC/B,SAAO,KAAK,OAAO,GAAG;AACpB,SAAK,SAAS;AACd,QAAI,KAAK,QAAQ,GAAG;AAClB,WAAK,QAAQ;AACb,WAAK,QAAQ;AAAA,IACf;AACA,QAAI,MAAM,eAAe,KAAK,OAAO,KAAK,IAAI;AAC9C,SAAK,QAAQ;AAAA,EACf;AACA,SAAO;AACT;AAGA,IAAM,aAAa,CAAC,MAAM,KAAK,QAAQ;AACrC,MAAID,QAAO,IAAI,KAAK;AACpB,MAAID,SAAQ,IAAI,MAAM;AACtB,MAAI,MAAM,eAAeA,QAAOC,KAAI;AACpC,SAAO,MAAM,KAAK;AAChB,WAAO;AACP,IAAAD,UAAS;AACT,QAAIA,UAAS,IAAI;AACf,MAAAA,UAAS;AACT,MAAAC,SAAQ;AAAA,IACV;AACA,UAAM,eAAeD,QAAOC,KAAI;AAAA,EAClC;AACA,OAAK,QAAQD;AACb,OAAK,OAAO;AACZ,SAAO;AACT;AAEO,IAAMG,UAAS;AACf,IAAM,OAAO;AACb,IAAM,WAAW;;;AC/DxB,IAAMC,SAAQ,CAAC,eAAe,UAAU,UAAU,QAAQ,QAAQ,OAAO;AACzE,IAAI,OAAO;AAAA,EACT,QAAQA,OAAM,MAAM,GAAG,CAAC;AAAA,EACxB,QAAQA,OAAM,MAAM,GAAG,CAAC;AAAA,EACxB,aAAaA,OAAM,MAAM,GAAG,CAAC;AAAA,EAC7B,MAAMA,OAAM,MAAM,GAAG,CAAC;AAAA,EACtB,MAAMA,OAAM,MAAM,GAAG,CAAC;AAAA,EACtB,OAAOA,OAAM,MAAM,GAAG,CAAC;AAAA,EACvB,SAASA,OAAM,MAAM,GAAG,CAAC;AAAA,EACzB,QAAQA,OAAM,MAAM,GAAG,CAAC;AAAA,EACxB,MAAMA;AAAA,EACN,QAAQA;AAAA,EACR,SAASA;AACX;AACA,KAAK,OAAO,KAAK;AACjB,KAAK,SAAS,KAAK;AACnB,KAAK,UAAU,KAAK;AAGpB,IAAM,gBAAgB;AAAA,EACpB,MAAM;AAAA,EACN,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,MAAM;AAAA,EACN,MAAM;AACR;AAEA,IAAM,WAAW;AAAA,EACf,OAAO;AAAA,EACP,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,MAAM;AACR;AAEA,IAAMC,cAAa,CAACC,eAAc;AAChC,EAAAA,WAAU,UAAU,MAAM,SAAU,KAAK,MAAM;AAC7C,QAAI,IAAI,KAAK,MAAM;AAEnB,QAAI,CAAC,QAAQ,QAAQ,GAAG;AACtB,aAAO;AAAA,IACT;AACA,QAAI,MAAM,KAAK,MAAM;AACrB,WAAOC,WAAU,IAAI;AACrB,QAAI,SAAS,eAAe;AAC1B,QAAE,SAAS;AACX,aAAO;AAAA,IACT;AAEA,QAAI,SAAS,aAAa;AACxB,aAAO;AACP,aAAO;AAAA,IACT;AAEA,QAAI,qBAAG,OAAO;AACZ,QAAE,SAAS,qBAAG,QAAQ;AAAA,IACxB,WAAW,SAAS,UAAU,SAAS,WAAW;AAChD,QAAE,SAAS,qBAAG,OAAO,MAAM;AAAA,IAC7B,WAAW,SAAS,aAAa,SAAS,UAAU;AAClD,QAAE,SAAS,qBAAG,SAAS,MAAM;AAAA,IAC/B,WAAW,SAAS,eAAe;AACjC,QAAE,SAAS,qBAAG,SAAS,KAAK;AAAA,IAC9B;AAEA,QAAI,OAAO,CAAC;AACZ,QAAI,KAAK,OAAO;AACd,WAAK,MAAM,QAAQ,CAAC,MAAM;AACxB,aAAK,KAAK,IAAI,GAAG;AAAA,MACnB,CAAC;AAAA,IACH;AAEA,QAAI,cAAc,OAAO;AACvB,YAAMC,QAAO,IAAI,SAAS,EAAE,QAAQ,SAAS,EAAE,SAAS,EAAE,QAAQ;AAClE,QAAE,SAASA,QAAO,OAAO;AAAA,IAC3B;AAGA,QAAI,SAAS,SAAS;AACpB,WAAK,QAAQ,IAAI,MAAM,IAAI;AAE3B,aAAOC,QAAO,MAAM,GAAG;AAAA,IACzB;AAEA,QAAI,SAAS,QAAQ;AACnB,UAAI,MAAM,IAAI,KAAK,IAAI,MAAM;AAC7B,UAAI,OAAO,MAAM,MAAM,GAAG;AACxB,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AACA,QAAI,SAAS,aAAa,EAAE,QAAQ,MAAM,YAAY;AACpD,UAAI,EAAE,IAAI,YAAY,IAAI;AAAA,IAC5B,WAES,SAAS,QAAQ;AACxB,UAAI,MAAM,GAAG;AACX,eAAO,SAAS,MAAM,KAAK,GAAG;AAAA,MAChC,OAAO;AAEL,YAAI,MAAM,IAAI,KAAK,IAAI;AAEvB,eAAO,KAAK,MAAM,KAAK,GAAG;AAAA,MAC5B;AAEA,UAAI,QAAQ,KAAK,IAAI,OAAO,GAAG,KAAK,GAAG;AACrC,aAAK,OAAO,IAAI,KAAK,IAAI;AAAA,MAC3B;AAAA,IACF,WAES,SAAS,WAAW;AAC3B,WAAK,QAAQ,IAAI,MAAM,IAAI,MAAM;AACjC,WAAK,OAAO,IAAI,KAAK;AAErB,UAAI,KAAK,QAAQ,GAAG;AAClB,YAAI,QAAQ,KAAK,MAAM,KAAK,QAAQ,EAAE;AACtC,YAAI,YAAY,KAAK,QAAQ,KAAK,IAAI,KAAK,IAAI;AAC/C,aAAK,QAAQ;AACb,aAAK,QAAQ;AAAA,MACf,WAAW,KAAK,SAAS,IAAI;AAC3B,YAAI,QAAQ,KAAK,MAAM,KAAK,QAAQ,EAAE;AACtC,aAAK,QAAQ,KAAK,QAAQ;AAC1B,aAAK,QAAQ;AAAA,MACf;AACA,WAAK,OAAO,IAAI,KAAK;AAAA,IACvB,WAES,SAAS,QAAQ;AACxB,UAAI,WAAW,IAAI,KAAK,IAAI;AAC5B,UAAI,WAAW,EAAE,KAAK;AACtB,UAAI,WAAW,UAAU;AACvB,YAAI,QAAQ,KAAK,MAAM,MAAM,CAAC,KAAK;AACnC,UAAE,SAAS,KAAK,IAAI,qBAAG,MAAM,KAAK;AAAA,MACpC,WAAW,WAAW,UAAU;AAC9B,YAAI,QAAQ,KAAK,MAAM,MAAM,CAAC,KAAK;AACnC,UAAE,SAAS,qBAAG,MAAM;AAAA,MACtB;AAAA,IACF,WAES,SAAS,UAAU;AAC1B,WAAK,OAAO,EAAE,KAAK,IAAI;AAAA,IACzB,WAAW,SAAS,WAAW;AAC7B,WAAK,OAAO,EAAE,KAAK,IAAI;AAAA,IACzB;AAEA,QAAI,SAAS,OAAO;AAClB,UAAI,MAAM,qBAAY,KAAK;AAC3B,WAAK,OAAO,IAAI,KAAK;AACrB,UAAI,KAAK,OAAO,KAAK;AACnB,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AACA,QAAI,OAAO,KAAK,IAAI,EAAE,SAAS,GAAG;AAChC,mBAAO,GAAG,IAAI;AAAA,IAChB;AACA,WAAO;AAAA,EACT;AAGA,EAAAH,WAAU,UAAU,WAAW,SAAU,KAAK,MAAM;AAClD,QAAI,IAAI,KAAK,MAAM;AACnB,WAAO,EAAE,IAAI,MAAM,IAAI,IAAI;AAAA,EAC7B;AAEA,EAAAA,WAAU,UAAU,QAAQA,WAAU,UAAU;AAChD,EAAAA,WAAU,UAAU,OAAOA,WAAU,UAAU;AACjD;AAEA,IAAO,cAAQD;;;AChLf,IAAM,QAAQ;AAAA,EACZ,aAAa,CAAC,MAAM;AAClB,WAAO,EAAE;AAAA,EACX;AAAA,EACA,QAAQ,CAAC,MAAM;AACb,WAAO,CAAC,EAAE,KAAK,GAAG,EAAE,MAAM,GAAG,EAAE,KAAK,GAAG,EAAE,KAAK,GAAG,EAAE,OAAO,GAAG,EAAE,OAAO,CAAC,EAAE,KAAK,GAAG;AAAA,EACnF;AAAA,EACA,QAAQ,CAAC,MAAM;AACb,WAAO,CAAC,EAAE,KAAK,GAAG,EAAE,MAAM,GAAG,EAAE,KAAK,GAAG,EAAE,KAAK,GAAG,EAAE,OAAO,CAAC,EAAE,KAAK,GAAG;AAAA,EACvE;AAAA,EACA,MAAM,CAAC,MAAM;AACX,WAAO,CAAC,EAAE,KAAK,GAAG,EAAE,MAAM,GAAG,EAAE,KAAK,GAAG,EAAE,KAAK,CAAC,EAAE,KAAK,GAAG;AAAA,EAC3D;AAAA,EACA,KAAK,CAAC,MAAM;AACV,WAAO,CAAC,EAAE,KAAK,GAAG,EAAE,MAAM,GAAG,EAAE,KAAK,CAAC,EAAE,KAAK,GAAG;AAAA,EACjD;AAAA,EACA,MAAM,CAAC,MAAM;AACX,WAAO,CAAC,EAAE,KAAK,GAAG,EAAE,KAAK,CAAC,EAAE,KAAK,GAAG;AAAA,EACtC;AAAA,EACA,OAAO,CAAC,MAAM;AACZ,WAAO,CAAC,EAAE,KAAK,GAAG,EAAE,MAAM,CAAC,EAAE,KAAK,GAAG;AAAA,EACvC;AAAA,EACA,SAAS,CAAC,MAAM;AACd,WAAO,CAAC,EAAE,KAAK,GAAG,EAAE,QAAQ,CAAC,EAAE,KAAK,GAAG;AAAA,EACzC;AAAA,EACA,MAAM,CAAC,MAAM;AACX,WAAO,EAAE,KAAK;AAAA,EAChB;AACF;AACA,MAAM,OAAO,MAAM;AAEnB,IAAMK,cAAa,CAACC,eAAc;AAChC,EAAAA,WAAU,UAAU,SAAS,SAAU,GAAG,MAAM,UAAU,MAAM;AAC9D,QAAI,IAAI;AACR,QAAI,CAAC,MAAM;AACT,aAAO;AAAA,IACT;AAEA,QAAI,OAAO,MAAM,YAAY,OAAO,SAAS,UAAU;AACrD,UAAI,MAAM;AACV,UAAI;AACJ,aAAO;AAAA,IACT;AACA,QAAI,OAAO,MAAM,YAAY,OAAO,MAAM,UAAU;AAClD,UAAI,IAAIA,WAAU,GAAG,KAAK,SAAS,IAAI;AAAA,IACzC;AAEA,WAAO,KAAK,QAAQ,MAAM,EAAE;AAG5B,QAAI,YAAY,QAAQ,EAAE,OAAO,EAAE,IAAI;AACrC,UAAI,EAAE,MAAM;AACZ,QAAE,KAAK,EAAE;AAAA,IACX;AACA,QAAI,MAAM,OAAO;AACf,aAAO,MAAM,MAAM,CAAC,MAAM,MAAM,MAAM,CAAC;AAAA,IACzC;AACA,WAAO;AAAA,EACT;AACF;AAEA,IAAO,eAAQD;;;AC5Df,IAAME,cAAa,CAAAC,eAAa;AAC9B,QAAMC,WAAU;AAAA,IACd,SAAS,SAAU,GAAG;AACpB,UAAI,QAAQ,GAAG,IAAI;AACnB,UAAI,QAAQ,SAAS,CAAC;AACtB,UAAI,UAAU,MAAM;AAClB,eAAO;AAAA,MACT;AACA,aAAO,KAAK,QAAQ;AAAA,IACtB;AAAA,IACA,UAAU,SAAU,GAAG;AACrB,UAAI,QAAQ,GAAG,IAAI;AACnB,UAAI,QAAQ,SAAS,CAAC;AACtB,UAAI,UAAU,MAAM;AAClB,eAAO;AAAA,MACT;AACA,aAAO,KAAK,QAAQ;AAAA,IACtB;AAAA,IACA,SAAS,SAAU,GAAG;AACpB,UAAI,QAAQ,GAAG,IAAI;AACnB,UAAI,QAAQ,SAAS,CAAC;AACtB,UAAI,UAAU,MAAM;AAClB,eAAO;AAAA,MACT;AACA,aAAO,KAAK,UAAU;AAAA,IACxB;AAAA,IACA,WAAW,SAAU,OAAO,KAAK,cAAc,OAAO;AACpD,cAAQ,QAAQ,OAAO,IAAI;AAC3B,YAAM,QAAQ,KAAK,IAAI;AACvB,UAAI,aAAa,SAAS,KAAK;AAC/B,UAAI,eAAe,MAAM;AACvB,eAAO;AAAA,MACT;AACA,UAAI,WAAW,SAAS,GAAG;AAC3B,UAAI,aAAa,MAAM;AACrB,eAAO;AAAA,MACT;AACA,UAAI,aAAa;AACf,eAAO,KAAK,UAAU,OAAO,GAAG,KAAK,KAAK,QAAQ,KAAK,KAAK,KAAK,QAAQ,GAAG;AAAA,MAC9E;AACA,aAAO,aAAa,KAAK,SAAS,KAAK,QAAQ;AAAA,IACjD;AAAA,EACF;AAGA,SAAO,KAAKA,QAAO,EAAE,QAAQ,OAAK;AAChC,IAAAD,WAAU,UAAU,KAAKC,SAAQ;AAAA,EACnC,CAAC;AACH;AAEA,IAAO,kBAAQF;;;AC5Cf,IAAMG,cAAa,CAAAC,eAAa;AAC9B,QAAMC,WAAU;AAAA,IACd,MAAM,SAAU,MAAM;AAEpB,UAAI,SAAS,KAAK,IAAI,GAAG;AACvB,QAAAC,KAAK,KAAK,IAAI;AAAA,MAChB;AAEA,UAAI,SAAS,KAAK,MAAM,GAAG;AACzB,YAAK,KAAK,MAAM;AAAA,MAClB;AAGA,UAAI,UAAU,KAAK,YAAY,GAAG;AAChC,QAAAA,KAAO,KAAK,YAAY;AAAA,MAC1B;AAGA,UAAI,SAAS,KAAK,IAAI,GAAG;AACvB,QAAAA,KAAQ,KAAK,IAAI;AAAA,MACnB;AAGA,UAAG,SAAS,KAAK,QAAQ,GAAE;AACzB,QAAAA,KAAY,KAAK,QAAQ;AAAA,MAC3B;AAGA,UAAG,SAAS,KAAK,KAAK,GAAE;AACtB,QAAAA,KAAS,KAAK,KAAK;AAAA,MACrB;AAEA,aAAO;AAAA,IACT;AAAA,EACF;AAGA,SAAO,KAAKD,QAAO,EAAE,QAAQ,OAAK;AAChC,IAAAD,WAAU,UAAU,KAAKC,SAAQ;AAAA,EACnC,CAAC;AACH;AAEA,IAAO,eAAQF;;;ACvCf,IAAI,YAAY;AAEhB,IAAM,YAAY,SAAU,OAAO,IAAI,UAAU,CAAC,GAAG;AAEnD,OAAK,QAAQ;AAEb,OAAK,KAAK,aAAO,IAAI,SAAS;AAE9B,OAAK,SAAS,OAAO,QAAQ,WAAW,cAAc,QAAQ,SAAS;AAEvE,OAAK,UAAU,QAAQ,OAAO,QAAQ;AAGtC,OAAK,aAAa;AAClB,MAAI,QAAQ,cAAc,QAAW;AACnC,SAAK,aAAa,QAAQ;AAAA,EAC5B;AAEA,OAAK,SAAS,CAAC;AACf,MAAI,QAAQ,UAAU,QAAW;AAC/B,SAAK,SAAS,QAAQ;AAAA,EACxB;AAQA,SAAO,eAAe,MAAM,KAAK;AAAA,IAE/B,KAAK,WAAY;AACf,UAAI,SAAS,cAAY,IAAI;AAE7B,UAAI,OAAO,IAAI,KAAK,KAAK,KAAK,EAAE,kBAAkB,KAAK;AAEvD,UAAI,QAAQ,OAAO,SAAS;AAC5B,cAAQ,QAAQ,KAAK;AAErB,UAAI,QAAQ,KAAK,QAAQ;AACzB,UAAI,IAAI,IAAI,KAAK,KAAK;AACtB,aAAO;AAAA,IACT;AAAA,EACF,CAAC;AAED,SAAO,eAAe,MAAM,aAAa;AAAA,IACvC,KAAK,MAAM;AAAA,IACX,KAAK,CAAC,QAAQ;AACZ,kBAAY;AACZ,aAAO;AAAA,IACT;AAAA,EACF,CAAC;AAED,MAAI,MAAM,cAAY,MAAM,KAAK;AACjC,OAAK,QAAQ,IAAI;AACnB;AAGA,OAAO,KAAK,eAAO,EAAE,QAAQ,CAAC,MAAM;AAClC,YAAU,UAAU,KAAK,gBAAQ;AACnC,CAAC;AAGD,UAAU,UAAU,QAAQ,WAAY;AACtC,SAAO,IAAI,UAAU,KAAK,OAAO,KAAK,IAAI;AAAA,IACxC,QAAQ,KAAK;AAAA,IACb,WAAW,KAAK;AAAA,IAChB,OAAO,KAAK;AAAA,IACZ,SAAS,KAAK;AAAA,EAChB,CAAC;AACH;AAMA,UAAU,UAAU,cAAc,WAAY;AAC5C,SAAO,KAAK,aAAa;AAC3B;AAKA,UAAU,UAAU,eAAe,WAAY;AAC7C,SAAO,IAAI,KAAK,KAAK,KAAK;AAC5B;AAGA,cAAS,SAAS;AAClB,YAAO,SAAS;AAChB,aAAQ,SAAS;AACjB,gBAAW,SAAS;AACpB,aAAQ,SAAS;AAEjB,IAAO,oBAAQ;;;ACtGf,IAAM,WAAW,CAAC,GAAG,MAAM;AACzB,MAAI,QAAQ,IAAI,kBAAU,IAAI;AAC9B,MAAI,MAAM,IAAI,kBAAU,IAAI;AAC5B,UAAQ,MAAM,KAAK,CAAC;AAEpB,MAAI,GAAG;AACL,UAAM,IAAI,KAAK,CAAC;AAAA,EAClB,OAAO;AACL,UAAM,MAAM,IAAI,IAAI,SAAS;AAAA,EAC/B;AAEA,MAAI,YAAY,MAAM,KAAK;AAC3B,MAAI,UAAU,IAAI,KAAK;AACvB,MAAI,MAAM,OAAO,KAAK,MAAM,SAAS,EAAE,OAAO,CAAC,OAAO;AACpD,QAAI,GAAG,QAAQ,GAAG,MAAM,IAAI;AAC1B,aAAO;AAAA,IACT;AACA,QAAI,IAAI,IAAI,kBAAU,MAAM,EAAE;AAC9B,QAAI,OAAO,EAAE,KAAK;AAElB,QAAI,QAAQ,aAAa,QAAQ,SAAS;AAExC,UAAI,SAAS,aAAa,EAAE,OAAO,IAAI,MAAM,OAAO,GAAG;AACrD,eAAO;AAAA,MACT;AACA,UAAI,SAAS,WAAW,EAAE,OAAO,IAAI,IAAI,OAAO,GAAG;AACjD,eAAO;AAAA,MACT;AACA,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT,CAAC;AACD,SAAO;AACT;AACA,IAAO,mBAAQ;;;ACrCf,IAAO,kBAAQ;;;ACIf,IAAMI,QAAO,CAAC,OAAO,IAAI,YAAY,IAAI,kBAAU,OAAO,IAAI,OAAO;AAGrE,IAAM,WAAW,SAAU,GAAG;AAC5B,MAAI,QAAQ,EAAE,UAAU,CAAC;AACzB,SAAO,KAAK,KAAK,EAAE,QAAQ,CAAC,MAAM;AAChC,QAAI,EAAE,GAAG,MAAM,EAAE;AAAA,EACnB,CAAC;AACD,SAAO;AACT;AAGAA,MAAK,MAAM,CAAC,IAAI,YAAY;AAC1B,MAAI,IAAI,IAAI,kBAAU,IAAI,KAAK,EAAE,QAAQ,GAAG,IAAI,OAAO;AACvD,MAAI,SAAS,CAAC;AACd,SAAO;AACT;AACAA,MAAK,QAAQ,CAAC,IAAI,YAAY;AAC5B,MAAI,IAAI,IAAI,kBAAU,IAAI,KAAK,EAAE,QAAQ,GAAG,IAAI,OAAO;AACvD,MAAI,SAAS,CAAC;AACd,SAAO,EAAE,QAAQ,KAAK;AACxB;AACAA,MAAK,WAAW,CAAC,IAAI,YAAY;AAC/B,MAAI,IAAI,IAAI,kBAAU,IAAI,KAAK,EAAE,QAAQ,GAAG,IAAI,OAAO;AACvD,MAAI,SAAS,CAAC;AACd,SAAO,EAAE,IAAI,GAAG,KAAK,EAAE,QAAQ,KAAK;AACtC;AACAA,MAAK,YAAY,CAAC,IAAI,YAAY;AAChC,MAAI,IAAI,IAAI,kBAAU,IAAI,KAAK,EAAE,QAAQ,GAAG,IAAI,OAAO;AACvD,MAAI,SAAS,CAAC;AACd,SAAO,EAAE,SAAS,GAAG,KAAK,EAAE,QAAQ,KAAK;AAC3C;AACAA,MAAK,SAAS,SAAU,MAAM,CAAC,GAAG;AAChC,SAAO,KAAK,GAAG,EAAE,QAAQ,CAAC,MAAM;AAC9B,sBAAU,UAAU,KAAK,IAAI;AAAA,EAC/B,CAAC;AACD,SAAO;AACT;AACAA,MAAK,YAAY,WAAY;AAC3B,MAAI,IAAI,IAAI,kBAAU;AACtB,SAAO,EAAE;AACX;AACAA,MAAK,MAAM,SAAU,IAAI,SAAS;AAChC,MAAI,IAAI,IAAI,kBAAU,MAAM,IAAI,OAAO;AACvC,IAAE,QAAQ;AACV,SAAO;AACT;AACAA,MAAK,MAAM,SAAU,IAAI,SAAS;AAChC,MAAI,IAAI,IAAI,kBAAU,MAAM,IAAI,OAAO;AACvC,IAAE,QAAQ;AACV,SAAO;AACT;AAGAA,MAAK,WAAW;AAChBA,MAAK,UAAU;AAGfA,MAAK,SAASA,MAAK;AACnB,IAAO,cAAQA;",
  "names": ["year", "month", "format", "timezone", "year", "normalize", "hours", "minutes", "order", "year", "normalize", "diff", "parseOffset", "parseOffset_default", "year", "parseOffset_default", "month", "date", "year", "parseArray", "parseObject", "parseNumber", "defaults", "short", "long", "set", "set", "short", "year", "month", "date", "aliases", "fmt", "mapping", "o", "units", "normalize", "normalize", "normalize", "diff", "diff", "units", "set", "set", "diff", "units", "diff", "units", "year", "normalize", "short", "long", "normalize", "titleCase", "units", "fmt", "year", "date", "short", "long", "validate", "diff", "month", "set", "methods", "minute", "hour", "methods", "short", "long", "diff", "methods", "month", "year", "methods", "month", "year", "date", "months", "order", "addMethods", "SpaceTime", "normalize", "diff", "months", "addMethods", "SpaceTime", "addMethods", "SpaceTime", "methods", "addMethods", "SpaceTime", "methods", "set", "main"]
}
