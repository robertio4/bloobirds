{
  "version": 3,
  "sources": ["../../../../../../node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/webpack/universalModuleDefinition", "../../../../../../node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/drawer.canvasentry.js", "../../../../../../node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/drawer.js", "../../../../../../node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/drawer.multicanvas.js", "../../../../../../node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/mediaelement-webaudio.js", "../../../../../../node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/mediaelement.js", "../../../../../../node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/peakcache.js", "../../../../../../node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/util/absMax.js", "../../../../../../node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/util/clamp.js", "../../../../../../node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/util/fetch.js", "../../../../../../node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/util/frame.js", "../../../../../../node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/util/get-id.js", "../../../../../../node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/util/index.js", "../../../../../../node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/util/max.js", "../../../../../../node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/util/min.js", "../../../../../../node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/util/observer.js", "../../../../../../node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/util/orientation.js", "../../../../../../node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/util/prevent-click.js", "../../../../../../node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/util/request-animation-frame.js", "../../../../../../node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/util/silence-mode.js", "../../../../../../node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/util/style.js", "../../../../../../node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/wavesurfer.js", "../../../../../../node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/src/webaudio.js", "../../../../../../node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/node_modules/debounce/index.js", "../../../../../../node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/webpack/bootstrap", "../../../../../../node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/webpack/before-startup", "../../../../../../node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/webpack/startup", "../../../../../../node_modules/wavesurfer.js/dist/webpack:/WaveSurfer/webpack/after-startup"],
  "sourcesContent": ["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = factory();\n})(self, () => {\nreturn ", "/**\n * @since 3.0.0\n */\n\nimport style from './util/style';\nimport getId from './util/get-id';\n\n/**\n * The `CanvasEntry` class represents an element consisting of a wave `canvas`\n * and an (optional) progress wave `canvas`.\n *\n * The `MultiCanvas` renderer uses one or more `CanvasEntry` instances to\n * render a waveform, depending on the zoom level.\n */\nexport default class CanvasEntry {\n    constructor() {\n        /**\n         * The wave node\n         *\n         * @type {HTMLCanvasElement}\n         */\n        this.wave = null;\n        /**\n         * The wave canvas rendering context\n         *\n         * @type {CanvasRenderingContext2D}\n         */\n        this.waveCtx = null;\n        /**\n         * The (optional) progress wave node\n         *\n         * @type {HTMLCanvasElement}\n         */\n        this.progress = null;\n        /**\n         * The (optional) progress wave canvas rendering context\n         *\n         * @type {CanvasRenderingContext2D}\n         */\n        this.progressCtx = null;\n        /**\n         * Start of the area the canvas should render, between 0 and 1\n         *\n         * @type {number}\n         */\n        this.start = 0;\n        /**\n         * End of the area the canvas should render, between 0 and 1\n         *\n         * @type {number}\n         */\n        this.end = 1;\n        /**\n         * Unique identifier for this entry\n         *\n         * @type {string}\n         */\n        this.id = getId(\n            typeof this.constructor.name !== 'undefined'\n                ? this.constructor.name.toLowerCase() + '_'\n                : 'canvasentry_'\n        );\n        /**\n         * Canvas 2d context attributes\n         *\n         * @type {object}\n         */\n        this.canvasContextAttributes = {};\n    }\n\n    /**\n     * Store the wave canvas element and create the 2D rendering context\n     *\n     * @param {HTMLCanvasElement} element The wave `canvas` element.\n     */\n    initWave(element) {\n        this.wave = element;\n        this.waveCtx = this.wave.getContext('2d', this.canvasContextAttributes);\n    }\n\n    /**\n     * Store the progress wave canvas element and create the 2D rendering\n     * context\n     *\n     * @param {HTMLCanvasElement} element The progress wave `canvas` element.\n     */\n    initProgress(element) {\n        this.progress = element;\n        this.progressCtx = this.progress.getContext(\n            '2d',\n            this.canvasContextAttributes\n        );\n    }\n\n    /**\n     * Update the dimensions\n     *\n     * @param {number} elementWidth Width of the entry\n     * @param {number} totalWidth Total width of the multi canvas renderer\n     * @param {number} width The new width of the element\n     * @param {number} height The new height of the element\n     */\n    updateDimensions(elementWidth, totalWidth, width, height) {\n        // where the canvas starts and ends in the waveform, represented as a\n        // decimal between 0 and 1\n        this.start = this.wave.offsetLeft / totalWidth || 0;\n        this.end = this.start + elementWidth / totalWidth;\n\n        // set wave canvas dimensions\n        this.wave.width = width;\n        this.wave.height = height;\n        let elementSize = { width: elementWidth + 'px' };\n        style(this.wave, elementSize);\n\n        if (this.hasProgressCanvas) {\n            // set progress canvas dimensions\n            this.progress.width = width;\n            this.progress.height = height;\n            style(this.progress, elementSize);\n        }\n    }\n\n    /**\n     * Clear the wave and progress rendering contexts\n     */\n    clearWave() {\n        // wave\n        this.waveCtx.clearRect(\n            0,\n            0,\n            this.waveCtx.canvas.width,\n            this.waveCtx.canvas.height\n        );\n\n        // progress\n        if (this.hasProgressCanvas) {\n            this.progressCtx.clearRect(\n                0,\n                0,\n                this.progressCtx.canvas.width,\n                this.progressCtx.canvas.height\n            );\n        }\n    }\n\n    /**\n     * Set the fill styles for wave and progress\n     * @param {string|string[]} waveColor Fill color for the wave canvas,\n     * or an array of colors to apply as a gradient\n     * @param {?string|string[]} progressColor Fill color for the progress canvas,\n     * or an array of colors to apply as a gradient\n     */\n    setFillStyles(waveColor, progressColor) {\n        this.waveCtx.fillStyle = this.getFillStyle(this.waveCtx, waveColor);\n\n        if (this.hasProgressCanvas) {\n            this.progressCtx.fillStyle = this.getFillStyle(this.progressCtx, progressColor);\n        }\n    }\n\n    /**\n     * Utility function to handle wave color arguments\n     *\n     * When the color argument type is a string or CanvasGradient instance,\n     * it will be returned as is. Otherwise, it will be treated as an array,\n     * and a new CanvasGradient will be returned\n     *\n     * @since 6.0.0\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {string|string[]|CanvasGradient} color Either a single fill color\n     *     for the wave canvas, an existing CanvasGradient instance, or an array\n     *     of colors to apply as a gradient\n     * @returns {string|CanvasGradient} Returns a string fillstyle value, or a\n     *     canvas gradient\n     */\n    getFillStyle(ctx, color) {\n        if (typeof color == 'string' || color instanceof CanvasGradient) {\n            return color;\n        }\n\n        const waveGradient = ctx.createLinearGradient(0, 0, 0, ctx.canvas.height);\n        color.forEach((value, index) => waveGradient.addColorStop((index / color.length), value));\n\n        return waveGradient;\n    }\n\n    /**\n     * Set the canvas transforms for wave and progress\n     *\n     * @param {boolean} vertical Whether to render vertically\n     */\n    applyCanvasTransforms(vertical) {\n        if (vertical) {\n            // Reflect the waveform across the line y = -x\n            this.waveCtx.setTransform(0, 1, 1, 0, 0, 0);\n\n            if (this.hasProgressCanvas) {\n                this.progressCtx.setTransform(0, 1, 1, 0, 0, 0);\n            }\n        }\n    }\n\n    /**\n     * Draw a rectangle for wave and progress\n     *\n     * @param {number} x X start position\n     * @param {number} y Y start position\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     */\n    fillRects(x, y, width, height, radius) {\n        this.fillRectToContext(this.waveCtx, x, y, width, height, radius);\n\n        if (this.hasProgressCanvas) {\n            this.fillRectToContext(\n                this.progressCtx,\n                x,\n                y,\n                width,\n                height,\n                radius\n            );\n        }\n    }\n\n    /**\n     * Draw the actual rectangle on a `canvas` element\n     *\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {number} x X start position\n     * @param {number} y Y start position\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     */\n    fillRectToContext(ctx, x, y, width, height, radius) {\n        if (!ctx) {\n            return;\n        }\n\n        if (radius) {\n            this.drawRoundedRect(ctx, x, y, width, height, radius);\n        } else {\n            ctx.fillRect(x, y, width, height);\n        }\n    }\n\n    /**\n     * Draw a rounded rectangle on Canvas\n     *\n     * @param {CanvasRenderingContext2D} ctx Canvas context\n     * @param {number} x X-position of the rectangle\n     * @param {number} y Y-position of the rectangle\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     *\n     * @return {void}\n     * @example drawRoundedRect(ctx, 50, 50, 5, 10, 3)\n     */\n    drawRoundedRect(ctx, x, y, width, height, radius) {\n        if (height === 0) {\n            return;\n        }\n        // peaks are float values from -1 to 1. Use absolute height values in\n        // order to correctly calculate rounded rectangle coordinates\n        if (height < 0) {\n            height *= -1;\n            y -= height;\n        }\n        ctx.beginPath();\n        ctx.moveTo(x + radius, y);\n        ctx.lineTo(x + width - radius, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n        ctx.lineTo(x + width, y + height - radius);\n        ctx.quadraticCurveTo(\n            x + width,\n            y + height,\n            x + width - radius,\n            y + height\n        );\n        ctx.lineTo(x + radius, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n        ctx.lineTo(x, y + radius);\n        ctx.quadraticCurveTo(x, y, x + radius, y);\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    /**\n     * Render the actual wave and progress lines\n     *\n     * @param {number[]} peaks Array with peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n    drawLines(peaks, absmax, halfH, offsetY, start, end) {\n        this.drawLineToContext(\n            this.waveCtx,\n            peaks,\n            absmax,\n            halfH,\n            offsetY,\n            start,\n            end\n        );\n\n        if (this.hasProgressCanvas) {\n            this.drawLineToContext(\n                this.progressCtx,\n                peaks,\n                absmax,\n                halfH,\n                offsetY,\n                start,\n                end\n            );\n        }\n    }\n\n    /**\n     * Render the actual waveform line on a `canvas` element\n     *\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {number[]} peaks Array with peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n    drawLineToContext(ctx, peaks, absmax, halfH, offsetY, start, end) {\n        if (!ctx) {\n            return;\n        }\n\n        const length = peaks.length / 2;\n        const first = Math.round(length * this.start);\n\n        // use one more peak value to make sure we join peaks at ends -- unless,\n        // of course, this is the last canvas\n        const last = Math.round(length * this.end) + 1;\n\n        const canvasStart = first;\n        const canvasEnd = last;\n        const scale = this.wave.width / (canvasEnd - canvasStart - 1);\n\n        // optimization\n        const halfOffset = halfH + offsetY;\n        const absmaxHalf = absmax / halfH;\n\n        ctx.beginPath();\n        ctx.moveTo((canvasStart - first) * scale, halfOffset);\n\n        ctx.lineTo(\n            (canvasStart - first) * scale,\n            halfOffset - Math.round((peaks[2 * canvasStart] || 0) / absmaxHalf)\n        );\n\n        let i, peak, h;\n        for (i = canvasStart; i < canvasEnd; i++) {\n            peak = peaks[2 * i] || 0;\n            h = Math.round(peak / absmaxHalf);\n            ctx.lineTo((i - first) * scale + this.halfPixel, halfOffset - h);\n        }\n\n        // draw the bottom edge going backwards, to make a single\n        // closed hull to fill\n        let j = canvasEnd - 1;\n        for (j; j >= canvasStart; j--) {\n            peak = peaks[2 * j + 1] || 0;\n            h = Math.round(peak / absmaxHalf);\n            ctx.lineTo((j - first) * scale + this.halfPixel, halfOffset - h);\n        }\n\n        ctx.lineTo(\n            (canvasStart - first) * scale,\n            halfOffset -\n            Math.round((peaks[2 * canvasStart + 1] || 0) / absmaxHalf)\n        );\n\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    /**\n     * Destroys this entry\n     */\n    destroy() {\n        this.waveCtx = null;\n        this.wave = null;\n\n        this.progressCtx = null;\n        this.progress = null;\n    }\n\n    /**\n     * Return image data of the wave `canvas` element\n     *\n     * When using a `type` of `'blob'`, this will return a `Promise` that\n     * resolves with a `Blob` instance.\n     *\n     * @param {string} format='image/png' An optional value of a format type.\n     * @param {number} quality=0.92 An optional value between 0 and 1.\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n     * @return {string|Promise} When using the default `'dataURL'` `type` this\n     * returns a data URL. When using the `'blob'` `type` this returns a\n     * `Promise` that resolves with a `Blob` instance.\n     */\n    getImage(format, quality, type) {\n        if (type === 'blob') {\n            return new Promise(resolve => {\n                this.wave.toBlob(resolve, format, quality);\n            });\n        } else if (type === 'dataURL') {\n            return this.wave.toDataURL(format, quality);\n        }\n    }\n}\n", "import * as util from './util';\n\n/**\n * Parent class for renderers\n *\n * @extends {Observer}\n */\nexport default class Drawer extends util.Observer {\n    /**\n     * @param {HTMLElement} container The container node of the wavesurfer instance\n     * @param {WavesurferParams} params The wavesurfer initialisation options\n     */\n    constructor(container, params) {\n        super();\n\n        this.container = util.withOrientation(container, params.vertical);\n        /**\n         * @type {WavesurferParams}\n         */\n        this.params = params;\n        /**\n         * The width of the renderer\n         * @type {number}\n         */\n        this.width = 0;\n        /**\n         * The height of the renderer\n         * @type {number}\n         */\n        this.height = params.height * this.params.pixelRatio;\n\n        this.lastPos = 0;\n        /**\n         * The `<wave>` element which is added to the container\n         * @type {HTMLElement}\n         */\n        this.wrapper = null;\n    }\n\n    /**\n     * Alias of `util.style`\n     *\n     * @param {HTMLElement} el The element that the styles will be applied to\n     * @param {Object} styles The map of propName: attribute, both are used as-is\n     * @return {HTMLElement} el\n     */\n    style(el, styles) {\n        return util.style(el, styles);\n    }\n\n    /**\n     * Create the wrapper `<wave>` element, style it and set up the events for\n     * interaction\n     */\n    createWrapper() {\n        this.wrapper = util.withOrientation(\n            this.container.appendChild(document.createElement('wave')),\n            this.params.vertical\n        );\n\n        this.style(this.wrapper, {\n            display: 'block',\n            position: 'relative',\n            userSelect: 'none',\n            webkitUserSelect: 'none',\n            height: this.params.height + 'px'\n        });\n\n        if (this.params.fillParent || this.params.scrollParent) {\n            this.style(this.wrapper, {\n                width: '100%',\n                cursor: this.params.hideCursor ? 'none' : 'auto',\n                overflowX: this.params.hideScrollbar ? 'hidden' : 'auto',\n                overflowY: 'hidden'\n            });\n        }\n\n        this.setupWrapperEvents();\n    }\n\n    /**\n     * Handle click event\n     *\n     * @param {Event} e Click event\n     * @param {?boolean} noPrevent Set to true to not call `e.preventDefault()`\n     * @return {number} Playback position from 0 to 1\n     */\n    handleEvent(e, noPrevent) {\n        !noPrevent && e.preventDefault();\n\n        const clientX = util.withOrientation(\n            e.targetTouches ? e.targetTouches[0] : e,\n            this.params.vertical\n        ).clientX;\n        const bbox = this.wrapper.getBoundingClientRect();\n\n        const nominalWidth = this.width;\n        const parentWidth = this.getWidth();\n        const progressPixels = this.getProgressPixels(bbox, clientX);\n\n        let progress;\n        if (!this.params.fillParent && nominalWidth < parentWidth) {\n            progress = progressPixels *\n                (this.params.pixelRatio / nominalWidth) || 0;\n        } else {\n            progress = (progressPixels + this.wrapper.scrollLeft) /\n                this.wrapper.scrollWidth || 0;\n        }\n\n        return util.clamp(progress, 0, 1);\n    }\n\n    getProgressPixels(wrapperBbox, clientX) {\n        if (this.params.rtl) {\n            return wrapperBbox.right - clientX;\n        } else {\n            return clientX - wrapperBbox.left;\n        }\n    }\n\n    setupWrapperEvents() {\n        this.wrapper.addEventListener('click', e => {\n            const orientedEvent = util.withOrientation(e, this.params.vertical);\n            const scrollbarHeight = this.wrapper.offsetHeight -\n                  this.wrapper.clientHeight;\n\n            if (scrollbarHeight !== 0) {\n                // scrollbar is visible.  Check if click was on it\n                const bbox = this.wrapper.getBoundingClientRect();\n                if (orientedEvent.clientY >= bbox.bottom - scrollbarHeight) {\n                    // ignore mousedown as it was on the scrollbar\n                    return;\n                }\n            }\n\n            if (this.params.interact) {\n                this.fireEvent('click', e, this.handleEvent(e));\n            }\n        });\n\n        this.wrapper.addEventListener('dblclick', e => {\n            if (this.params.interact) {\n                this.fireEvent('dblclick', e, this.handleEvent(e));\n            }\n        });\n\n        this.wrapper.addEventListener('scroll', e =>\n            this.fireEvent('scroll', e)\n        );\n    }\n\n    /**\n     * Draw peaks on the canvas\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} length The width of the area that should be drawn\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawPeaks(peaks, length, start, end) {\n        if (!this.setWidth(length)) {\n            this.clearWave();\n        }\n\n        this.params.barWidth\n            ? this.drawBars(peaks, 0, start, end)\n            : this.drawWave(peaks, 0, start, end);\n    }\n\n    /**\n     * Scroll to the beginning\n     */\n    resetScroll() {\n        if (this.wrapper !== null) {\n            this.wrapper.scrollLeft = 0;\n        }\n    }\n\n    /**\n     * Recenter the view-port at a certain percent of the waveform\n     *\n     * @param {number} percent Value from 0 to 1 on the waveform\n     */\n    recenter(percent) {\n        const position = this.wrapper.scrollWidth * percent;\n        this.recenterOnPosition(position, true);\n    }\n\n    /**\n     * Recenter the view-port on a position, either scroll there immediately or\n     * in steps of 5 pixels\n     *\n     * @param {number} position X-offset in pixels\n     * @param {boolean} immediate Set to true to immediately scroll somewhere\n     */\n    recenterOnPosition(position, immediate) {\n        const scrollLeft = this.wrapper.scrollLeft;\n        const half = ~~(this.wrapper.clientWidth / 2);\n        const maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n        let target = position - half;\n        let offset = target - scrollLeft;\n\n        if (maxScroll == 0) {\n            // no need to continue if scrollbar is not there\n            return;\n        }\n\n        // if the cursor is currently visible...\n        if (!immediate && -half <= offset && offset < half) {\n            // set rate at which waveform is centered\n            let rate = this.params.autoCenterRate;\n\n            // make rate depend on width of view and length of waveform\n            rate /= half;\n            rate *= maxScroll;\n\n            offset = Math.max(-rate, Math.min(rate, offset));\n            target = scrollLeft + offset;\n        }\n\n        // limit target to valid range (0 to maxScroll)\n        target = Math.max(0, Math.min(maxScroll, target));\n        // no use attempting to scroll if we're not moving\n        if (target != scrollLeft) {\n            this.wrapper.scrollLeft = target;\n        }\n    }\n\n    /**\n     * Get the current scroll position in pixels\n     *\n     * @return {number} Horizontal scroll position in pixels\n     */\n    getScrollX() {\n        let x = 0;\n        if (this.wrapper) {\n            const pixelRatio = this.params.pixelRatio;\n            x = Math.round(this.wrapper.scrollLeft * pixelRatio);\n\n            // In cases of elastic scroll (safari with mouse wheel) you can\n            // scroll beyond the limits of the container\n            // Calculate and floor the scrollable extent to make sure an out\n            // of bounds value is not returned\n            // Ticket #1312\n            if (this.params.scrollParent) {\n                const maxScroll = ~~(\n                    this.wrapper.scrollWidth * pixelRatio -\n                    this.getWidth()\n                );\n                x = Math.min(maxScroll, Math.max(0, x));\n            }\n        }\n        return x;\n    }\n\n    /**\n     * Get the width of the container\n     *\n     * @return {number} The width of the container\n     */\n    getWidth() {\n        return Math.round(this.container.clientWidth * this.params.pixelRatio);\n    }\n\n    /**\n     * Set the width of the container\n     *\n     * @param {number} width The new width of the container\n     * @return {boolean} Whether the width of the container was updated or not\n     */\n    setWidth(width) {\n        if (this.width == width) {\n            return false;\n        }\n\n        this.width = width;\n\n        if (this.params.fillParent || this.params.scrollParent) {\n            this.style(this.wrapper, {\n                width: ''\n            });\n        } else {\n            const newWidth = ~~(this.width / this.params.pixelRatio) + 'px';\n            this.style(this.wrapper, {\n                width: newWidth\n            });\n        }\n\n        this.updateSize();\n        return true;\n    }\n\n    /**\n     * Set the height of the container\n     *\n     * @param {number} height The new height of the container.\n     * @return {boolean} Whether the height of the container was updated or not\n     */\n    setHeight(height) {\n        if (height == this.height) {\n            return false;\n        }\n        this.height = height;\n\n        this.style(this.wrapper, {\n            height: ~~(this.height / this.params.pixelRatio) + 'px'\n        });\n\n        this.updateSize();\n        return true;\n    }\n\n    /**\n     * Called by wavesurfer when progress should be rendered\n     *\n     * @param {number} progress From 0 to 1\n     */\n    progress(progress) {\n        const minPxDelta = 1 / this.params.pixelRatio;\n        const pos = Math.round(progress * this.width) * minPxDelta;\n\n        if (pos < this.lastPos || pos - this.lastPos >= minPxDelta) {\n            this.lastPos = pos;\n\n            if (this.params.scrollParent && this.params.autoCenter) {\n                const newPos = ~~(this.wrapper.scrollWidth * progress);\n                this.recenterOnPosition(\n                    newPos,\n                    this.params.autoCenterImmediately\n                );\n            }\n\n            this.updateProgress(pos);\n        }\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     */\n    destroy() {\n        this.unAll();\n        if (this.wrapper) {\n            if (this.wrapper.parentNode == this.container.domElement) {\n                this.container.removeChild(this.wrapper.domElement);\n            }\n            this.wrapper = null;\n        }\n    }\n\n    /* Renderer-specific methods */\n\n    /**\n     * Called after cursor related params have changed.\n     *\n     * @abstract\n     */\n    updateCursor() {}\n\n    /**\n     * Called when the size of the container changes so the renderer can adjust\n     *\n     * @abstract\n     */\n    updateSize() {}\n\n    /**\n     * Draw a waveform with bars\n     *\n     * @abstract\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawBars(peaks, channelIndex, start, end) {}\n\n    /**\n     * Draw a waveform\n     *\n     * @abstract\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawWave(peaks, channelIndex, start, end) {}\n\n    /**\n     * Clear the waveform\n     *\n     * @abstract\n     */\n    clearWave() {}\n\n    /**\n     * Render the new progress\n     *\n     * @abstract\n     * @param {number} position X-Offset of progress position in pixels\n     */\n    updateProgress(position) {}\n}\n", "import Drawer from './drawer';\nimport * as util from './util';\nimport CanvasEntry from './drawer.canvasentry';\n\n/**\n * MultiCanvas renderer for wavesurfer. Is currently the default and sole\n * builtin renderer.\n *\n * A `MultiCanvas` consists of one or more `CanvasEntry` instances, depending\n * on the zoom level.\n */\nexport default class MultiCanvas extends Drawer {\n    /**\n     * @param {HTMLElement} container The container node of the wavesurfer instance\n     * @param {WavesurferParams} params The wavesurfer initialisation options\n     */\n    constructor(container, params) {\n        super(container, params);\n\n        /**\n         * @type {number}\n         */\n        this.maxCanvasWidth = params.maxCanvasWidth;\n\n        /**\n         * @type {number}\n         */\n        this.maxCanvasElementWidth = Math.round(\n            params.maxCanvasWidth / params.pixelRatio\n        );\n\n        /**\n         * Whether or not the progress wave is rendered. If the `waveColor`\n         * and `progressColor` are the same color it is not.\n         *\n         * @type {boolean}\n         */\n        this.hasProgressCanvas = params.waveColor != params.progressColor;\n\n        /**\n         * @type {number}\n         */\n        this.halfPixel = 0.5 / params.pixelRatio;\n\n        /**\n         * List of `CanvasEntry` instances.\n         *\n         * @type {Array}\n         */\n        this.canvases = [];\n\n        /**\n         * @type {HTMLElement}\n         */\n        this.progressWave = null;\n\n        /**\n         * Class used to generate entries.\n         *\n         * @type {function}\n         */\n        this.EntryClass = CanvasEntry;\n\n        /**\n         * Canvas 2d context attributes.\n         *\n         * @type {object}\n         */\n        this.canvasContextAttributes = params.drawingContextAttributes;\n\n        /**\n         * Overlap added between entries to prevent vertical white stripes\n         * between `canvas` elements.\n         *\n         * @type {number}\n         */\n        this.overlap = 2 * Math.ceil(params.pixelRatio / 2);\n\n        /**\n         * The radius of the wave bars. Makes bars rounded\n         *\n         * @type {number}\n         */\n        this.barRadius = params.barRadius || 0;\n\n        /**\n         * Whether to render the waveform vertically. Defaults to false.\n         *\n         * @type {boolean}\n         */\n        this.vertical = params.vertical;\n    }\n\n    /**\n     * Initialize the drawer\n     */\n    init() {\n        this.createWrapper();\n        this.createElements();\n    }\n\n    /**\n     * Create the canvas elements and style them\n     *\n     */\n    createElements() {\n        this.progressWave = util.withOrientation(\n            this.wrapper.appendChild(document.createElement('wave')),\n            this.params.vertical\n        );\n        this.style(this.progressWave, {\n            position: 'absolute',\n            zIndex: 3,\n            left: 0,\n            top: 0,\n            bottom: 0,\n            overflow: 'hidden',\n            width: '0',\n            display: 'none',\n            boxSizing: 'border-box',\n            borderRightStyle: 'solid',\n            pointerEvents: 'none'\n        });\n\n        this.addCanvas();\n        this.updateCursor();\n    }\n\n    /**\n     * Update cursor style\n     */\n    updateCursor() {\n        this.style(this.progressWave, {\n            borderRightWidth: this.params.cursorWidth + 'px',\n            borderRightColor: this.params.cursorColor\n        });\n    }\n\n    /**\n     * Adjust to the updated size by adding or removing canvases\n     */\n    updateSize() {\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\n        const requiredCanvases = Math.ceil(\n            totalWidth / (this.maxCanvasElementWidth + this.overlap)\n        );\n\n        // add required canvases\n        while (this.canvases.length < requiredCanvases) {\n            this.addCanvas();\n        }\n\n        // remove older existing canvases, if any\n        while (this.canvases.length > requiredCanvases) {\n            this.removeCanvas();\n        }\n\n        let canvasWidth = this.maxCanvasWidth + this.overlap;\n        const lastCanvas = this.canvases.length - 1;\n        this.canvases.forEach((entry, i) => {\n            if (i == lastCanvas) {\n                canvasWidth = this.width - this.maxCanvasWidth * lastCanvas;\n            }\n            this.updateDimensions(entry, canvasWidth, this.height);\n\n            entry.clearWave();\n        });\n    }\n\n    /**\n     * Add a canvas to the canvas list\n     *\n     */\n    addCanvas() {\n        const entry = new this.EntryClass();\n        entry.canvasContextAttributes = this.canvasContextAttributes;\n        entry.hasProgressCanvas = this.hasProgressCanvas;\n        entry.halfPixel = this.halfPixel;\n        const leftOffset = this.maxCanvasElementWidth * this.canvases.length;\n\n        // wave\n        let wave = util.withOrientation(\n            this.wrapper.appendChild(document.createElement('canvas')),\n            this.params.vertical\n        );\n        this.style(wave, {\n            position: 'absolute',\n            zIndex: 2,\n            left: leftOffset + 'px',\n            top: 0,\n            bottom: 0,\n            height: '100%',\n            pointerEvents: 'none'\n        });\n        entry.initWave(wave);\n\n        // progress\n        if (this.hasProgressCanvas) {\n            let progress = util.withOrientation(\n                this.progressWave.appendChild(document.createElement('canvas')),\n                this.params.vertical\n            );\n            this.style(progress, {\n                position: 'absolute',\n                left: leftOffset + 'px',\n                top: 0,\n                bottom: 0,\n                height: '100%'\n            });\n            entry.initProgress(progress);\n        }\n\n        this.canvases.push(entry);\n    }\n\n    /**\n     * Pop single canvas from the list\n     *\n     */\n    removeCanvas() {\n        let lastEntry = this.canvases[this.canvases.length - 1];\n\n        // wave\n        lastEntry.wave.parentElement.removeChild(lastEntry.wave.domElement);\n\n        // progress\n        if (this.hasProgressCanvas) {\n            lastEntry.progress.parentElement.removeChild(lastEntry.progress.domElement);\n        }\n\n        // cleanup\n        if (lastEntry) {\n            lastEntry.destroy();\n            lastEntry = null;\n        }\n\n        this.canvases.pop();\n    }\n\n    /**\n     * Update the dimensions of a canvas element\n     *\n     * @param {CanvasEntry} entry Target entry\n     * @param {number} width The new width of the element\n     * @param {number} height The new height of the element\n     */\n    updateDimensions(entry, width, height) {\n        const elementWidth = Math.round(width / this.params.pixelRatio);\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\n\n        // update canvas dimensions\n        entry.updateDimensions(elementWidth, totalWidth, width, height);\n\n        // style element\n        this.style(this.progressWave, { display: 'block' });\n    }\n\n    /**\n     * Clear the whole multi-canvas\n     */\n    clearWave() {\n        util.frame(() => {\n            this.canvases.forEach(entry => entry.clearWave());\n        })();\n    }\n\n    /**\n     * Draw a waveform with bars\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0. Must be an integer.\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     * @returns {void}\n     */\n    drawBars(peaks, channelIndex, start, end) {\n        return this.prepareDraw(\n            peaks,\n            channelIndex,\n            start,\n            end,\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks, channelIndex: ch }) => {\n                // if drawBars was called within ws.empty we don't pass a start and\n                // don't want anything to happen\n                if (start === undefined) {\n                    return;\n                }\n                // Skip every other value if there are negatives.\n                const peakIndexScale = hasMinVals ? 2 : 1;\n                const length = peaks.length / peakIndexScale;\n                const bar = this.params.barWidth * this.params.pixelRatio;\n                const gap =\n                    this.params.barGap === null\n                        ? Math.max(this.params.pixelRatio, ~~(bar / 2))\n                        : Math.max(\n                            this.params.pixelRatio,\n                            this.params.barGap * this.params.pixelRatio\n                        );\n                const step = bar + gap;\n\n                const scale = length / this.width;\n                const first = start;\n                const last = end;\n                let peakIndex = first;\n                for (peakIndex; peakIndex < last; peakIndex += step) {\n\n                    // search for the highest peak in the range this bar falls into\n                    let peak = 0;\n                    let peakIndexRange = Math.floor(peakIndex * scale) * peakIndexScale; // start index\n                    const peakIndexEnd = Math.floor((peakIndex + step) * scale) * peakIndexScale;\n                    do { // do..while makes sure at least one peak is always evaluated\n                        const newPeak = Math.abs(peaks[peakIndexRange]); // for arrays starting with negative values\n                        if (newPeak > peak) {\n                            peak = newPeak; // higher\n                        }\n                        peakIndexRange += peakIndexScale; // skip every other value for negatives\n                    } while (peakIndexRange < peakIndexEnd);\n\n                    // calculate the height of this bar according to the highest peak found\n                    let h = Math.round((peak / absmax) * halfH);\n\n                    // raise the bar height to the specified minimum height\n                    // Math.max is used to replace any value smaller than barMinHeight (not just 0) with barMinHeight\n                    if (this.params.barMinHeight) {\n                        h = Math.max(h, this.params.barMinHeight);\n                    }\n\n                    this.fillRect(\n                        peakIndex + this.halfPixel,\n                        halfH - h + offsetY,\n                        bar + this.halfPixel,\n                        h * 2,\n                        this.barRadius,\n                        ch\n                    );\n                }\n            }\n        );\n    }\n\n    /**\n     * Draw a waveform\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number?} start The x-offset of the beginning of the area that\n     * should be rendered (If this isn't set only a flat line is rendered)\n     * @param {number?} end The x-offset of the end of the area that should be\n     * rendered\n     * @returns {void}\n     */\n    drawWave(peaks, channelIndex, start, end) {\n        return this.prepareDraw(\n            peaks,\n            channelIndex,\n            start,\n            end,\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks, channelIndex }) => {\n                if (!hasMinVals) {\n                    const reflectedPeaks = [];\n                    const len = peaks.length;\n                    let i = 0;\n                    for (i; i < len; i++) {\n                        reflectedPeaks[2 * i] = peaks[i];\n                        reflectedPeaks[2 * i + 1] = -peaks[i];\n                    }\n                    peaks = reflectedPeaks;\n                }\n\n                // if drawWave was called within ws.empty we don't pass a start and\n                // end and simply want a flat line\n                if (start !== undefined) {\n                    this.drawLine(peaks, absmax, halfH, offsetY, start, end, channelIndex);\n                }\n\n                // always draw a median line\n                this.fillRect(\n                    0,\n                    halfH + offsetY - this.halfPixel,\n                    this.width,\n                    this.halfPixel,\n                    this.barRadius,\n                    channelIndex\n                );\n            }\n        );\n    }\n\n    /**\n     * Tell the canvas entries to render their portion of the waveform\n     *\n     * @param {number[]} peaks Peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     * @param {channelIndex} channelIndex The channel index of the line drawn\n     */\n    drawLine(peaks, absmax, halfH, offsetY, start, end, channelIndex) {\n        const { waveColor, progressColor } = this.params.splitChannelsOptions.channelColors[channelIndex] || {};\n        this.canvases.forEach((entry, i) => {\n            this.setFillStyles(entry, waveColor, progressColor);\n            this.applyCanvasTransforms(entry, this.params.vertical);\n            entry.drawLines(peaks, absmax, halfH, offsetY, start, end);\n        });\n    }\n\n    /**\n     * Draw a rectangle on the multi-canvas\n     *\n     * @param {number} x X-position of the rectangle\n     * @param {number} y Y-position of the rectangle\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     * @param {channelIndex} channelIndex The channel index of the bar drawn\n     */\n    fillRect(x, y, width, height, radius, channelIndex) {\n        const startCanvas = Math.floor(x / this.maxCanvasWidth);\n        const endCanvas = Math.min(\n            Math.ceil((x + width) / this.maxCanvasWidth) + 1,\n            this.canvases.length\n        );\n        let i = startCanvas;\n        for (i; i < endCanvas; i++) {\n            const entry = this.canvases[i];\n            const leftOffset = i * this.maxCanvasWidth;\n\n            const intersection = {\n                x1: Math.max(x, i * this.maxCanvasWidth),\n                y1: y,\n                x2: Math.min(\n                    x + width,\n                    i * this.maxCanvasWidth + entry.wave.width\n                ),\n                y2: y + height\n            };\n\n            if (intersection.x1 < intersection.x2) {\n                const { waveColor, progressColor } = this.params.splitChannelsOptions.channelColors[channelIndex] || {};\n                this.setFillStyles(entry, waveColor, progressColor);\n                this.applyCanvasTransforms(entry, this.params.vertical);\n\n                entry.fillRects(\n                    intersection.x1 - leftOffset,\n                    intersection.y1,\n                    intersection.x2 - intersection.x1,\n                    intersection.y2 - intersection.y1,\n                    radius\n                );\n            }\n        }\n    }\n\n    /**\n     * Returns whether to hide the channel from being drawn based on params.\n     *\n     * @param {number} channelIndex The index of the current channel.\n     * @returns {bool} True to hide the channel, false to draw.\n     */\n    hideChannel(channelIndex) {\n        return this.params.splitChannels && this.params.splitChannelsOptions.filterChannels.includes(channelIndex);\n    }\n\n    /**\n     * Performs preparation tasks and calculations which are shared by `drawBars`\n     * and `drawWave`\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for\n     * split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number?} start The x-offset of the beginning of the area that\n     * should be rendered. If this isn't set only a flat line is rendered\n     * @param {number?} end The x-offset of the end of the area that should be\n     * rendered\n     * @param {function} fn The render function to call, e.g. `drawWave`\n     * @param {number} drawIndex The index of the current channel after filtering.\n     * @param {number?} normalizedMax Maximum modulation value across channels for use with relativeNormalization. Ignored when undefined\n     * @returns {void}\n     */\n    prepareDraw(peaks, channelIndex, start, end, fn, drawIndex, normalizedMax) {\n        return util.frame(() => {\n            // Split channels and call this function with the channelIndex set\n            if (peaks[0] instanceof Array) {\n                const channels = peaks;\n\n                if (this.params.splitChannels) {\n                    const filteredChannels = channels.filter((c, i) => !this.hideChannel(i));\n                    if (!this.params.splitChannelsOptions.overlay) {\n                        this.setHeight(\n                            Math.max(filteredChannels.length, 1) *\n                                this.params.height *\n                                this.params.pixelRatio\n                        );\n                    }\n\n                    let overallAbsMax;\n                    if (this.params.splitChannelsOptions && this.params.splitChannelsOptions.relativeNormalization) {\n                        // calculate maximum peak across channels to use for normalization\n                        overallAbsMax = util.max(channels.map((channelPeaks => util.absMax(channelPeaks))));\n                    }\n\n\n                    return channels.forEach((channelPeaks, i) =>\n                        this.prepareDraw(channelPeaks, i, start, end, fn, filteredChannels.indexOf(channelPeaks), overallAbsMax)\n                    );\n                }\n                peaks = channels[0];\n            }\n\n            // Return and do not draw channel peaks if hidden.\n            if (this.hideChannel(channelIndex)) {\n                return;\n            }\n\n            // calculate maximum modulation value, either from the barHeight\n            // parameter or if normalize=true from the largest value in the peak\n            // set\n            let absmax = 1 / this.params.barHeight;\n            if (this.params.normalize) {\n                absmax = normalizedMax === undefined ? util.absMax(peaks) : normalizedMax;\n            }\n\n            // Bar wave draws the bottom only as a reflection of the top,\n            // so we don't need negative values\n            const hasMinVals = [].some.call(peaks, val => val < 0);\n            const height = this.params.height * this.params.pixelRatio;\n            const halfH = height / 2;\n\n            let offsetY = height * drawIndex || 0;\n\n            // Override offsetY if overlay is true\n            if (this.params.splitChannelsOptions && this.params.splitChannelsOptions.overlay) {\n                offsetY = 0;\n            }\n\n            return fn({\n                absmax: absmax,\n                hasMinVals: hasMinVals,\n                height: height,\n                offsetY: offsetY,\n                halfH: halfH,\n                peaks: peaks,\n                channelIndex: channelIndex\n            });\n        })();\n    }\n\n    /**\n     * Set the fill styles for a certain entry (wave and progress)\n     *\n     * @param {CanvasEntry} entry Target entry\n     * @param {string} waveColor Wave color to draw this entry\n     * @param {string} progressColor Progress color to draw this entry\n     */\n    setFillStyles(entry, waveColor = this.params.waveColor, progressColor = this.params.progressColor) {\n        entry.setFillStyles(waveColor, progressColor);\n    }\n\n    /**\n     * Set the canvas transforms for a certain entry (wave and progress)\n     *\n     * @param {CanvasEntry} entry Target entry\n     * @param {boolean} vertical Whether to render the waveform vertically\n     */\n    applyCanvasTransforms(entry, vertical = false) {\n        entry.applyCanvasTransforms(vertical);\n    }\n\n    /**\n     * Return image data of the multi-canvas\n     *\n     * When using a `type` of `'blob'`, this will return a `Promise`.\n     *\n     * @param {string} format='image/png' An optional value of a format type.\n     * @param {number} quality=0.92 An optional value between 0 and 1.\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n     * @return {string|string[]|Promise} When using the default `'dataURL'`\n     * `type` this returns a single data URL or an array of data URLs,\n     * one for each canvas. When using the `'blob'` `type` this returns a\n     * `Promise` that resolves with an array of `Blob` instances, one for each\n     * canvas.\n     */\n    getImage(format, quality, type) {\n        if (type === 'blob') {\n            return Promise.all(\n                this.canvases.map(entry => {\n                    return entry.getImage(format, quality, type);\n                })\n            );\n        } else if (type === 'dataURL') {\n            let images = this.canvases.map(entry =>\n                entry.getImage(format, quality, type)\n            );\n            return images.length > 1 ? images : images[0];\n        }\n    }\n\n    /**\n     * Render the new progress\n     *\n     * @param {number} position X-offset of progress position in pixels\n     */\n    updateProgress(position) {\n        this.style(this.progressWave, { width: position + 'px' });\n    }\n}\n", "import MediaElement from './mediaelement';\n\n/**\n * MediaElementWebAudio backend: load audio via an HTML5 audio tag, but playback with the WebAudio API.\n * The advantage here is that the html5 <audio> tag can perform range requests on the server and not\n * buffer the entire file in one request, and you still get the filtering and scripting functionality\n * of the webaudio API.\n * Note that in order to use range requests and prevent buffering, you must provide peak data.\n *\n * @since 3.2.0\n */\nexport default class MediaElementWebAudio extends MediaElement {\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super(params);\n        /** @private */\n        this.params = params;\n        /** @private */\n        this.sourceMediaElement = null;\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.setPlaybackRate(this.params.audioRate);\n        this.createTimer();\n        this.createVolumeNode();\n        this.createScriptNode();\n        this.createAnalyserNode();\n    }\n    /**\n     * Private method called by both `load` (from url)\n     * and `loadElt` (existing media element) methods.\n     *\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     * @private\n     */\n    _load(media, peaks, preload) {\n        super._load(media, peaks, preload);\n        this.createMediaElementSource(media);\n    }\n\n    /**\n     * Create MediaElementSource node\n     *\n     * @since 3.2.0\n     * @param {HTMLMediaElement} mediaElement HTML5 Audio to load\n     */\n    createMediaElementSource(mediaElement) {\n        this.sourceMediaElement = this.ac.createMediaElementSource(\n            mediaElement\n        );\n        this.sourceMediaElement.connect(this.analyser);\n    }\n\n    play(start, end) {\n        this.resumeAudioContext();\n        return super.play(start, end);\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     *\n     */\n    destroy() {\n        super.destroy();\n\n        this.destroyWebAudio();\n    }\n}\n", "import WebAudio from './webaudio';\nimport * as util from './util';\n\n/**\n * MediaElement backend\n */\nexport default class MediaElement extends WebAudio {\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super(params);\n        /** @private */\n        this.params = params;\n\n        /**\n         * Initially a dummy media element to catch errors. Once `_load` is\n         * called, this will contain the actual `HTMLMediaElement`.\n         * @private\n         */\n        this.media = {\n            currentTime: 0,\n            duration: 0,\n            paused: true,\n            playbackRate: 1,\n            play() {},\n            pause() {},\n            volume: 0\n        };\n\n        /** @private */\n        this.mediaType = params.mediaType.toLowerCase();\n        /** @private */\n        this.elementPosition = params.elementPosition;\n        /** @private */\n        this.peaks = null;\n        /** @private */\n        this.playbackRate = 1;\n        /** @private */\n        this.volume = 1;\n        /** @private */\n        this.isMuted = false;\n        /** @private */\n        this.buffer = null;\n        /** @private */\n        this.onPlayEnd = null;\n        /** @private */\n        this.mediaListeners = {};\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.setPlaybackRate(this.params.audioRate);\n        this.createTimer();\n    }\n\n    /**\n     * Attach event listeners to media element.\n     */\n    _setupMediaListeners() {\n        this.mediaListeners.error = () => {\n            this.fireEvent('error', 'Error loading media element');\n        };\n        this.mediaListeners.canplay = () => {\n            this.fireEvent('canplay');\n        };\n        this.mediaListeners.ended = () => {\n            this.fireEvent('finish');\n        };\n        // listen to and relay play, pause and seeked events to enable\n        // playback control from the external media element\n        this.mediaListeners.play = () => {\n            this.fireEvent('play');\n        };\n        this.mediaListeners.pause = () => {\n            this.fireEvent('pause');\n        };\n        this.mediaListeners.seeked = event => {\n            this.fireEvent('seek');\n        };\n        this.mediaListeners.volumechange = event => {\n            this.isMuted = this.media.muted;\n            if (this.isMuted) {\n                this.volume = 0;\n            } else {\n                this.volume = this.media.volume;\n            }\n            this.fireEvent('volume');\n        };\n\n        // reset event listeners\n        Object.keys(this.mediaListeners).forEach(id => {\n            this.media.removeEventListener(id, this.mediaListeners[id]);\n            this.media.addEventListener(id, this.mediaListeners[id]);\n        });\n    }\n\n    /**\n     * Create a timer to provide a more precise `audioprocess` event.\n     */\n    createTimer() {\n        const onAudioProcess = () => {\n            if (this.isPaused()) {\n                return;\n            }\n            this.fireEvent('audioprocess', this.getCurrentTime());\n\n            // Call again in the next frame\n            util.frame(onAudioProcess)();\n        };\n\n        this.on('play', onAudioProcess);\n\n        // Update the progress one more time to prevent it from being stuck in\n        // case of lower framerates\n        this.on('pause', () => {\n            this.fireEvent('audioprocess', this.getCurrentTime());\n        });\n    }\n\n    /**\n     * Create media element with url as its source,\n     * and append to container element.\n     *\n     * @param {string} url Path to media file\n     * @param {HTMLElement} container HTML element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     * @throws Will throw an error if the `url` argument is not a valid media\n     * element.\n     */\n    load(url, container, peaks, preload) {\n        const media = document.createElement(this.mediaType);\n        media.controls = this.params.mediaControls;\n        media.autoplay = this.params.autoplay || false;\n        media.preload = preload == null ? 'auto' : preload;\n        media.src = url;\n        media.style.width = '100%';\n\n        const prevMedia = container.querySelector(this.mediaType);\n        if (prevMedia) {\n            container.removeChild(prevMedia);\n        }\n        container.appendChild(media);\n\n        this._load(media, peaks, preload);\n    }\n\n    /**\n     * Load existing media element.\n     *\n     * @param {HTMLMediaElement} elt HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     */\n    loadElt(elt, peaks) {\n        elt.controls = this.params.mediaControls;\n        elt.autoplay = this.params.autoplay || false;\n\n        this._load(elt, peaks, elt.preload);\n    }\n\n    /**\n     * Method called by both `load` (from url)\n     * and `loadElt` (existing media element) methods.\n     *\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     * @throws Will throw an error if the `media` argument is not a valid media\n     * element.\n     * @private\n     */\n    _load(media, peaks, preload) {\n        // verify media element is valid\n        if (\n            !(media instanceof HTMLMediaElement) ||\n            typeof media.addEventListener === 'undefined'\n        ) {\n            throw new Error('media parameter is not a valid media element');\n        }\n\n        // load must be called manually on iOS, otherwise peaks won't draw\n        // until a user interaction triggers load --> 'ready' event\n        //\n        // note that we avoid calling media.load here when given peaks and preload == 'none'\n        // as this almost always triggers some browser fetch of the media.\n        if (typeof media.load == 'function' && !(peaks && preload == 'none')) {\n            // Resets the media element and restarts the media resource. Any\n            // pending events are discarded. How much media data is fetched is\n            // still affected by the preload attribute.\n            media.load();\n        }\n\n        this.media = media;\n        this._setupMediaListeners();\n        this.peaks = peaks;\n        this.onPlayEnd = null;\n        this.buffer = null;\n        this.isMuted = media.muted;\n        this.setPlaybackRate(this.playbackRate);\n        this.setVolume(this.volume);\n    }\n\n    /**\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n     *\n     * @return {boolean} Media paused or not\n     */\n    isPaused() {\n        return !this.media || this.media.paused;\n    }\n\n    /**\n     * Used by `wavesurfer.getDuration()`\n     *\n     * @return {number} Duration\n     */\n    getDuration() {\n        if (this.explicitDuration) {\n            return this.explicitDuration;\n        }\n        let duration = (this.buffer || this.media).duration;\n        if (duration >= Infinity) {\n            // streaming audio\n            duration = this.media.seekable.end(0);\n        }\n        return duration;\n    }\n\n    /**\n     * Returns the current time in seconds relative to the audio-clip's\n     * duration.\n     *\n     * @return {number} Current time\n     */\n    getCurrentTime() {\n        return this.media && this.media.currentTime;\n    }\n\n    /**\n     * Get the position from 0 to 1\n     *\n     * @return {number} Current position\n     */\n    getPlayedPercents() {\n        return this.getCurrentTime() / this.getDuration() || 0;\n    }\n\n    /**\n     * Get the audio source playback rate.\n     *\n     * @return {number} Playback rate\n     */\n    getPlaybackRate() {\n        return this.playbackRate || this.media.playbackRate;\n    }\n\n    /**\n     * Set the audio source playback rate.\n     *\n     * @param {number} value Playback rate\n     */\n    setPlaybackRate(value) {\n        this.playbackRate = value || 1;\n        this.media.playbackRate = this.playbackRate;\n    }\n\n    /**\n     * Used by `wavesurfer.seekTo()`\n     *\n     * @param {number} start Position to start at in seconds\n     */\n    seekTo(start) {\n        if (start != null && !isNaN(start)) {\n            this.media.currentTime = start;\n        }\n        this.clearPlayEnd();\n    }\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {number} start Start offset in seconds, relative to the beginning\n     * of a clip.\n     * @param {number} end When to stop, relative to the beginning of a clip.\n     * @emits MediaElement#play\n     * @return {Promise} Result\n     */\n    play(start, end) {\n        this.seekTo(start);\n        const promise = this.media.play();\n        end && this.setPlayEnd(end);\n\n        return promise;\n    }\n\n    /**\n     * Pauses the loaded audio.\n     *\n     * @emits MediaElement#pause\n     * @return {Promise} Result\n     */\n    pause() {\n        let promise;\n\n        if (this.media) {\n            promise = this.media.pause();\n        }\n        this.clearPlayEnd();\n\n        return promise;\n    }\n\n    /**\n     * Set the play end\n     *\n     * @param {number} end Where to end\n     */\n    setPlayEnd(end) {\n        this.clearPlayEnd();\n\n        this._onPlayEnd = time => {\n            if (time >= end) {\n                this.pause();\n                this.seekTo(end);\n            }\n        };\n        this.on('audioprocess', this._onPlayEnd);\n    }\n\n    /** @private */\n    clearPlayEnd() {\n        if (this._onPlayEnd) {\n            this.un('audioprocess', this._onPlayEnd);\n            this._onPlayEnd = null;\n        }\n    }\n\n    /**\n     * Compute the max and min value of the waveform when broken into\n     * <length> subranges.\n     *\n     * @param {number} length How many subranges to break the waveform into.\n     * @param {number} first First sample in the required range.\n     * @param {number} last Last sample in the required range.\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of\n     * arrays of peaks consisting of (max, min) values for each subrange.\n     */\n    getPeaks(length, first, last) {\n        if (this.buffer) {\n            return super.getPeaks(length, first, last);\n        }\n        return this.peaks || [];\n    }\n\n    /**\n     * Set the sink id for the media player\n     *\n     * @param {string} deviceId String value representing audio device id.\n     * @returns {Promise} A Promise that resolves to `undefined` when there\n     * are no errors.\n     */\n    setSinkId(deviceId) {\n        if (deviceId) {\n            if (!this.media.setSinkId) {\n                return Promise.reject(\n                    new Error('setSinkId is not supported in your browser')\n                );\n            }\n            return this.media.setSinkId(deviceId);\n        }\n\n        return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n    }\n\n    /**\n     * Get the current volume\n     *\n     * @return {number} value A floating point value between 0 and 1.\n     */\n    getVolume() {\n        return this.volume;\n    }\n\n    /**\n     * Set the audio volume\n     *\n     * @param {number} value A floating point value between 0 and 1.\n     */\n    setVolume(value) {\n        this.volume = value;\n        // no need to change when it's already at that volume\n        if (this.media.volume !== this.volume) {\n            this.media.volume = this.volume;\n        }\n    }\n\n    /**\n     * Enable or disable muted audio\n     *\n     * @since 4.0.0\n     * @param {boolean} muted Specify `true` to mute audio.\n     */\n    setMute(muted) {\n        // This causes a volume change to be emitted too through the\n        // volumechange event listener.\n        this.isMuted = this.media.muted = muted;\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     *\n     */\n    destroy() {\n        this.pause();\n        this.unAll();\n        this.destroyed = true;\n\n        // cleanup media event listeners\n        Object.keys(this.mediaListeners).forEach(id => {\n            if (this.media) {\n                this.media.removeEventListener(id, this.mediaListeners[id]);\n            }\n        });\n\n        if (\n            this.params.removeMediaElementOnDestroy &&\n            this.media &&\n            this.media.parentNode\n        ) {\n            this.media.parentNode.removeChild(this.media);\n        }\n\n        this.media = null;\n    }\n}\n", "/**\n * Caches the decoded peaks data to improve rendering speed for large audio\n *\n * Is used if the option parameter `partialRender` is set to `true`\n */\nexport default class PeakCache {\n    /**\n     * Instantiate cache\n     */\n    constructor() {\n        this.clearPeakCache();\n    }\n\n    /**\n     * Empty the cache\n     */\n    clearPeakCache() {\n        /**\n         * Flat array with entries that are always in pairs to mark the\n         * beginning and end of each subrange.  This is a convenience so we can\n         * iterate over the pairs for easy set difference operations.\n         * @private\n         */\n        this.peakCacheRanges = [];\n        /**\n         * Length of the entire cachable region, used for resetting the cache\n         * when this changes (zoom events, for instance).\n         * @private\n         */\n        this.peakCacheLength = -1;\n    }\n\n    /**\n     * Add a range of peaks to the cache\n     *\n     * @param {number} length The length of the range\n     * @param {number} start The x offset of the start of the range\n     * @param {number} end The x offset of the end of the range\n     * @return {Number.<Array[]>} Array with arrays of numbers\n     */\n    addRangeToPeakCache(length, start, end) {\n        if (length != this.peakCacheLength) {\n            this.clearPeakCache();\n            this.peakCacheLength = length;\n        }\n\n        // Return ranges that weren't in the cache before the call.\n        let uncachedRanges = [];\n        let i = 0;\n        // Skip ranges before the current start.\n        while (\n            i < this.peakCacheRanges.length &&\n            this.peakCacheRanges[i] < start\n        ) {\n            i++;\n        }\n        // If |i| is even, |start| falls after an existing range.  Otherwise,\n        // |start| falls between an existing range, and the uncached region\n        // starts when we encounter the next node in |peakCacheRanges| or\n        // |end|, whichever comes first.\n        if (i % 2 == 0) {\n            uncachedRanges.push(start);\n        }\n        while (\n            i < this.peakCacheRanges.length &&\n            this.peakCacheRanges[i] <= end\n        ) {\n            uncachedRanges.push(this.peakCacheRanges[i]);\n            i++;\n        }\n        // If |i| is even, |end| is after all existing ranges.\n        if (i % 2 == 0) {\n            uncachedRanges.push(end);\n        }\n\n        // Filter out the 0-length ranges.\n        uncachedRanges = uncachedRanges.filter((item, pos, arr) => {\n            if (pos == 0) {\n                return item != arr[pos + 1];\n            } else if (pos == arr.length - 1) {\n                return item != arr[pos - 1];\n            }\n            return item != arr[pos - 1] && item != arr[pos + 1];\n        });\n\n        // Merge the two ranges together, uncachedRanges will either contain\n        // wholly new points, or duplicates of points in peakCacheRanges.  If\n        // duplicates are detected, remove both and extend the range.\n        this.peakCacheRanges = this.peakCacheRanges.concat(uncachedRanges);\n        this.peakCacheRanges = this.peakCacheRanges\n            .sort((a, b) => a - b)\n            .filter((item, pos, arr) => {\n                if (pos == 0) {\n                    return item != arr[pos + 1];\n                } else if (pos == arr.length - 1) {\n                    return item != arr[pos - 1];\n                }\n                return item != arr[pos - 1] && item != arr[pos + 1];\n            });\n\n        // Push the uncached ranges into an array of arrays for ease of\n        // iteration in the functions that call this.\n        const uncachedRangePairs = [];\n        for (i = 0; i < uncachedRanges.length; i += 2) {\n            uncachedRangePairs.push([uncachedRanges[i], uncachedRanges[i + 1]]);\n        }\n\n        return uncachedRangePairs;\n    }\n\n    /**\n     * For testing\n     *\n     * @return {Number.<Array[]>} Array with arrays of numbers\n     */\n    getCacheRanges() {\n        const peakCacheRangePairs = [];\n        let i;\n        for (i = 0; i < this.peakCacheRanges.length; i += 2) {\n            peakCacheRangePairs.push([\n                this.peakCacheRanges[i],\n                this.peakCacheRanges[i + 1]\n            ]);\n        }\n        return peakCacheRangePairs;\n    }\n}\n", "import utilMax from './max';\r\nimport utilmin from './min';\r\n\r\n/**\r\n * Get the largest absolute value in an array\r\n *\r\n * @param   {Array} values Array of numbers\r\n * @returns {Number} Largest number found\r\n * @example console.log(max([-3, 2, 1]), max([-3, 2, 4])); // logs 3 4\r\n * @since 4.3.0\r\n */\r\nexport default function absMax(values) {\r\n    const max = utilMax(values);\r\n    const min = utilmin(values);\r\n    return -min > max ? -min : max;\r\n}\r\n", "/**\n * Returns a number limited to the given range.\n *\n * @param {number} val The number to be limited to a range\n * @param {number} min The lower boundary of the limit range\n * @param {number} max The upper boundary of the limit range\n * @returns {number} A number in the range [min, max]\n */\nexport default function clamp(val, min, max) {\n    return Math.min(Math.max(min, val), max);\n}\n", "/**\n * @since 3.0.0\n */\n\nimport Observer from './observer';\n\nclass ProgressHandler {\n    /**\n     * Instantiate ProgressHandler\n     *\n     * @param {Observer} instance The `fetchFile` observer instance.\n     * @param {Number} contentLength Content length.\n     * @param {Response} response Response object.\n     */\n    constructor(instance, contentLength, response) {\n        this.instance = instance;\n        this.instance._reader = response.body.getReader();\n\n        this.total = parseInt(contentLength, 10);\n        this.loaded = 0;\n    }\n\n    /**\n     * A method that is called once, immediately after the `ReadableStream``\n     * is constructed.\n     *\n     * @param {ReadableStreamDefaultController} controller Controller instance\n     *     used to control the stream.\n     */\n    start(controller) {\n        const read = () => {\n            // instance._reader.read() returns a promise that resolves\n            // when a value has been received\n            this.instance._reader\n                .read()\n                .then(({ done, value }) => {\n                    // result objects contain two properties:\n                    // done  - true if the stream has already given you all its data.\n                    // value - some data. Always undefined when done is true.\n                    if (done) {\n                        // ensure onProgress called when content-length=0\n                        if (this.total === 0) {\n                            this.instance.onProgress.call(this.instance, {\n                                loaded: this.loaded,\n                                total: this.total,\n                                lengthComputable: false\n                            });\n                        }\n                        // no more data needs to be consumed, close the stream\n                        controller.close();\n                        return;\n                    }\n\n                    this.loaded += value.byteLength;\n                    this.instance.onProgress.call(this.instance, {\n                        loaded: this.loaded,\n                        total: this.total,\n                        lengthComputable: !(this.total === 0)\n                    });\n                    // enqueue the next data chunk into our target stream\n                    controller.enqueue(value);\n                    read();\n                })\n                .catch(error => {\n                    controller.error(error);\n                });\n        };\n\n        read();\n    }\n}\n\n/**\n * Load a file using `fetch`.\n *\n * @param {object} options Request options to use. See example below.\n * @returns {Observer} Observer instance\n * @example\n * // default options\n * let options = {\n *     url: undefined,\n *     method: 'GET',\n *     mode: 'cors',\n *     credentials: 'same-origin',\n *     cache: 'default',\n *     responseType: 'json',\n *     requestHeaders: [],\n *     redirect: 'follow',\n *     referrer: 'client'\n * };\n *\n * // override some options\n * options.url = '../media/demo.wav';\n\n * // available types: 'arraybuffer', 'blob', 'json' or 'text'\n * options.responseType = 'arraybuffer';\n *\n * // make fetch call\n * let request = util.fetchFile(options);\n *\n * // listen for events\n * request.on('progress', e => {\n *     console.log('progress', e);\n * });\n *\n * request.on('success', data => {\n *     console.log('success!', data);\n * });\n *\n * request.on('error', e => {\n *     console.warn('fetchFile error: ', e);\n * });\n */\nexport default function fetchFile(options) {\n    if (!options) {\n        throw new Error('fetch options missing');\n    } else if (!options.url) {\n        throw new Error('fetch url missing');\n    }\n    const instance = new Observer();\n    const fetchHeaders = new Headers();\n    const fetchRequest = new Request(options.url);\n\n    // add ability to abort\n    instance.controller = new AbortController();\n\n    // check if headers have to be added\n    if (options && options.requestHeaders) {\n        // add custom request headers\n        options.requestHeaders.forEach(header => {\n            fetchHeaders.append(header.key, header.value);\n        });\n    }\n\n    // parse fetch options\n    const responseType = options.responseType || 'json';\n    const fetchOptions = {\n        method: options.method || 'GET',\n        headers: fetchHeaders,\n        mode: options.mode || 'cors',\n        credentials: options.credentials || 'same-origin',\n        cache: options.cache || 'default',\n        redirect: options.redirect || 'follow',\n        referrer: options.referrer || 'client',\n        signal: instance.controller.signal\n    };\n\n    fetch(fetchRequest, fetchOptions)\n        .then(response => {\n            // store response reference\n            instance.response = response;\n\n            let progressAvailable = true;\n            if (!response.body) {\n                // ReadableStream is not yet supported in this browser\n                // see https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\n                progressAvailable = false;\n            }\n\n            // Server must send CORS header \"Access-Control-Expose-Headers: content-length\"\n            const contentLength = response.headers.get('content-length');\n            if (contentLength === null) {\n                // Content-Length server response header missing.\n                // Don't evaluate download progress if we can't compare against a total size\n                // see https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Access-Control-Expose-Headers\n                progressAvailable = false;\n            }\n\n            if (!progressAvailable) {\n                // not able to check download progress so skip it\n                return response;\n            }\n\n            // fire progress event when during load\n            instance.onProgress = e => {\n                instance.fireEvent('progress', e);\n            };\n\n            return new Response(\n                new ReadableStream(\n                    new ProgressHandler(instance, contentLength, response)\n                ),\n                fetchOptions\n            );\n        })\n        .then(response => {\n            let errMsg;\n            if (response.ok) {\n                switch (responseType) {\n                    case 'arraybuffer':\n                        return response.arrayBuffer();\n\n                    case 'json':\n                        return response.json();\n\n                    case 'blob':\n                        return response.blob();\n\n                    case 'text':\n                        return response.text();\n\n                    default:\n                        errMsg = 'Unknown responseType: ' + responseType;\n                        break;\n                }\n            }\n            if (!errMsg) {\n                errMsg = 'HTTP error status: ' + response.status;\n            }\n            throw new Error(errMsg);\n        })\n        .then(response => {\n            instance.fireEvent('success', response);\n        })\n        .catch(error => {\n            instance.fireEvent('error', error);\n        });\n\n    // return the fetch request\n    instance.fetchRequest = fetchRequest;\n    return instance;\n}\n", "import reqAnimationFrame from './request-animation-frame';\n\n/**\n * Create a function which will be called at the next requestAnimationFrame\n * cycle\n *\n * @param {function} func The function to call\n *\n * @return {func} The function wrapped within a requestAnimationFrame\n */\nexport default function frame(func) {\n    return (...args) => reqAnimationFrame(() => func(...args));\n}\n", "/**\n * Get a random prefixed ID\n *\n * @param {String} prefix Prefix to use. Default is `'wavesurfer_'`.\n * @returns {String} Random prefixed ID\n * @example\n * console.log(getId()); // logs 'wavesurfer_b5pors4ru6g'\n *\n * let prefix = 'foo-';\n * console.log(getId(prefix)); // logs 'foo-b5pors4ru6g'\n */\nexport default function getId(prefix) {\n    if (prefix === undefined) {\n        prefix = 'wavesurfer_';\n    }\n    return (\n        prefix +\n        Math.random()\n            .toString(32)\n            .substring(2)\n    );\n}\n", "export { default as getId } from './get-id';\nexport { default as max } from './max';\nexport { default as min } from './min';\nexport { default as absMax } from './absMax';\nexport { default as Observer } from './observer';\nexport { default as style } from './style';\nexport { default as requestAnimationFrame } from './request-animation-frame';\nexport { default as frame } from './frame';\nexport { default as debounce } from 'debounce';\nexport { default as preventClick } from './prevent-click';\nexport { default as fetchFile } from './fetch';\nexport { default as clamp } from './clamp';\nexport { default as withOrientation } from './orientation';\nexport { default as ignoreSilenceMode } from './silence-mode';\n", "/**\n * Get the largest value\n *\n * @param   {Array} values Array of numbers\n * @returns {Number} Largest number found\n * @example console.log(max([1, 2, 3])); // logs 3\n */\nexport default function max(values) {\n    let largest = -Infinity;\n    Object.keys(values).forEach(i => {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    });\n    return largest;\n}\n", "/**\n * Get the smallest value\n *\n * @param   {Array} values Array of numbers\n * @returns {Number} Smallest number found\n * @example console.log(min([1, 2, 3])); // logs 1\n */\nexport default function min(values) {\n    let smallest = Number(Infinity);\n    Object.keys(values).forEach(i => {\n        if (values[i] < smallest) {\n            smallest = values[i];\n        }\n    });\n    return smallest;\n}\n", "/**\n * @typedef {Object} ListenerDescriptor\n * @property {string} name The name of the event\n * @property {function} callback The callback\n * @property {function} un The function to call to remove the listener\n */\n\n/**\n * Observer class\n */\nexport default class Observer {\n    /**\n     * Instantiate Observer\n     */\n    constructor() {\n        /**\n         * @private\n         * @todo Initialise the handlers here already and remove the conditional\n         * assignment in `on()`\n         */\n        this._disabledEventEmissions = [];\n        this.handlers = null;\n    }\n    /**\n     * Attach a handler function for an event.\n     *\n     * @param {string} event Name of the event to listen to\n     * @param {function} fn The callback to trigger when the event is fired\n     * @return {ListenerDescriptor} The event descriptor\n     */\n    on(event, fn) {\n        if (!this.handlers) {\n            this.handlers = {};\n        }\n\n        let handlers = this.handlers[event];\n        if (!handlers) {\n            handlers = this.handlers[event] = [];\n        }\n        handlers.push(fn);\n\n        // Return an event descriptor\n        return {\n            name: event,\n            callback: fn,\n            un: (e, fn) => this.un(e, fn)\n        };\n    }\n\n    /**\n     * Remove an event handler.\n     *\n     * @param {string} event Name of the event the listener that should be\n     * removed listens to\n     * @param {function} fn The callback that should be removed\n     */\n    un(event, fn) {\n        if (!this.handlers) {\n            return;\n        }\n\n        const handlers = this.handlers[event];\n        let i;\n        if (handlers) {\n            if (fn) {\n                for (i = handlers.length - 1; i >= 0; i--) {\n                    if (handlers[i] == fn) {\n                        handlers.splice(i, 1);\n                    }\n                }\n            } else {\n                handlers.length = 0;\n            }\n        }\n    }\n\n    /**\n     * Remove all event handlers.\n     */\n    unAll() {\n        this.handlers = null;\n    }\n\n    /**\n     * Attach a handler to an event. The handler is executed at most once per\n     * event type.\n     *\n     * @param {string} event The event to listen to\n     * @param {function} handler The callback that is only to be called once\n     * @return {ListenerDescriptor} The event descriptor\n     */\n    once(event, handler) {\n        const fn = (...args) => {\n            /*  eslint-disable no-invalid-this */\n            handler.apply(this, args);\n            /*  eslint-enable no-invalid-this */\n            setTimeout(() => {\n                this.un(event, fn);\n            }, 0);\n        };\n        return this.on(event, fn);\n    }\n\n    /**\n     * Disable firing a list of events by name. When specified, event handlers for any event type\n     * passed in here will not be called.\n     *\n     * @since 4.0.0\n     * @param {string[]} eventNames an array of event names to disable emissions for\n     * @example\n     * // disable seek and interaction events\n     * wavesurfer.setDisabledEventEmissions(['seek', 'interaction']);\n     */\n    setDisabledEventEmissions(eventNames) {\n        this._disabledEventEmissions = eventNames;\n    }\n\n    /**\n     * plugins borrow part of this class without calling the constructor,\n     * so we have to be careful about _disabledEventEmissions\n     */\n\n    _isDisabledEventEmission(event) {\n        return this._disabledEventEmissions && this._disabledEventEmissions.includes(event);\n    }\n\n    /**\n     * Manually fire an event\n     *\n     * @param {string} event The event to fire manually\n     * @param {...any} args The arguments with which to call the listeners\n     */\n    fireEvent(event, ...args) {\n        if (!this.handlers || this._isDisabledEventEmission(event)) {\n            return;\n        }\n\n        const handlers = this.handlers[event];\n        handlers &&\n            handlers.forEach(fn => {\n                fn(...args);\n            });\n    }\n}\n", "const verticalPropMap = {\n    width: 'height',\n    height: 'width',\n\n    overflowX: 'overflowY',\n    overflowY: 'overflowX',\n\n    clientWidth: 'clientHeight',\n    clientHeight: 'clientWidth',\n\n    clientX: 'clientY',\n    clientY: 'clientX',\n\n    scrollWidth: 'scrollHeight',\n    scrollLeft: 'scrollTop',\n\n    offsetLeft: 'offsetTop',\n    offsetTop: 'offsetLeft',\n    offsetHeight: 'offsetWidth',\n    offsetWidth: 'offsetHeight',\n\n    left: 'top',\n    right: 'bottom',\n    top: 'left',\n    bottom: 'right',\n\n    borderRightStyle: 'borderBottomStyle',\n    borderRightWidth: 'borderBottomWidth',\n    borderRightColor: 'borderBottomColor'\n};\n\n/**\n * Convert a horizontally-oriented property name to a vertical one.\n *\n * @param {string} prop A property name\n * @param {bool} vertical Whether the element is oriented vertically\n * @returns {string} prop, converted appropriately\n */\nfunction mapProp(prop, vertical) {\n    if (Object.prototype.hasOwnProperty.call(verticalPropMap, prop)) {\n        return vertical ? verticalPropMap[prop] : prop;\n    } else {\n        return prop;\n    }\n}\n\nconst isProxy = Symbol(\"isProxy\");\n\n/**\n * Returns an appropriately oriented object based on vertical.\n * If vertical is true, attribute getting and setting will be mapped through\n * verticalPropMap, so that e.g. getting the object's .width will give its\n * .height instead.\n * Certain methods of an oriented object will return oriented objects as well.\n * Oriented objects can't be added to the DOM directly since they are Proxy objects\n * and thus fail typechecks. Use domElement to get the actual element for this.\n *\n * @param {object} target The object to be wrapped and oriented\n * @param {bool} vertical Whether the element is oriented vertically\n * @returns {Proxy} An oriented object with attr translation via verticalAttrMap\n * @since 5.0.0\n */\nexport default function withOrientation(target, vertical) {\n    if (target[isProxy]) {\n        return target;\n    } else {\n        return new Proxy(\n            target, {\n                get: function(obj, prop, receiver) {\n                    if (prop === isProxy) {\n                        return true;\n                    } else if (prop === 'domElement') {\n                        return obj;\n                    } else if (prop === 'style') {\n                        return withOrientation(obj.style, vertical);\n                    } else if (prop === 'canvas') {\n                        return withOrientation(obj.canvas, vertical);\n                    } else if (prop === 'getBoundingClientRect') {\n                        return function(...args) {\n                            return withOrientation(obj.getBoundingClientRect(...args), vertical);\n                        };\n                    } else if (prop === 'getContext') {\n                        return function(...args) {\n                            return withOrientation(obj.getContext(...args), vertical);\n                        };\n                    } else {\n                        let value = obj[mapProp(prop, vertical)];\n                        return typeof value == 'function' ? value.bind(obj) : value;\n                    }\n                },\n                set: function(obj, prop, value) {\n                    obj[mapProp(prop, vertical)] = value;\n                    return true;\n                }\n            }\n        );\n    }\n}\n", "/**\n * Stops propagation of click event and removes event listener\n *\n * @private\n * @param {object} event The click event\n */\nfunction preventClickHandler(event) {\n    event.stopPropagation();\n    document.body.removeEventListener('click', preventClickHandler, true);\n}\n\n/**\n * Starts listening for click event and prevent propagation\n *\n * @param {object} values Values\n */\nexport default function preventClick(values) {\n    document.body.addEventListener('click', preventClickHandler, true);\n}\n", "/* eslint-disable valid-jsdoc */\n/**\n * Returns the `requestAnimationFrame` function for the browser, or a shim with\n * `setTimeout` if the function is not found\n *\n * @return {function} Available `requestAnimationFrame` function for the browser\n */\nexport default (\n    window.requestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.oRequestAnimationFrame ||\n    window.msRequestAnimationFrame ||\n    ((callback, element) => setTimeout(callback, 1000 / 60))\n).bind(window);\n", "/**\n * Ignores device silence mode when using the `WebAudio` backend.\n *\n * Many mobile devices contain a hardware button to mute the ringtone for incoming\n * calls and messages. Unfortunately, on some platforms like iOS, this also mutes\n * wavesurfer's audio when using the `WebAudio` backend. This function creates a\n * temporary `<audio>` element that makes sure the WebAudio backend keeps playing\n * when muting the device ringer.\n *\n * @since 5.2.0\n */\nexport default function ignoreSilenceMode() {\n    // Set the src to a short bit of url encoded as a silent mp3\n    // NOTE The silence MP3 must be high quality, when web audio sounds are played\n    // in parallel the web audio sound is mixed to match the bitrate of the html sound\n    // 0.01 seconds of silence VBR220-260 Joint Stereo 859B\n    const audioData = \"data:audio/mpeg;base64,//uQxAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAACAAACcQCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA//////////////////////////////////////////////////////////////////8AAABhTEFNRTMuMTAwA8MAAAAAAAAAABQgJAUHQQAB9AAAAnGMHkkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//sQxAADgnABGiAAQBCqgCRMAAgEAH///////////////7+n/9FTuQsQH//////2NG0jWUGlio5gLQTOtIoeR2WX////X4s9Atb/JRVCbBUpeRUq//////////////////9RUi0f2jn/+xDECgPCjAEQAABN4AAANIAAAAQVTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==\";\n\n    // disable iOS Airplay (setting the attribute in js doesn't work)\n    let tmp = document.createElement(\"div\");\n    tmp.innerHTML = '<audio x-webkit-airplay=\"deny\"></audio>';\n\n    let audioSilentMode = tmp.children.item(0);\n    audioSilentMode.src = audioData;\n    audioSilentMode.preload = \"auto\";\n    audioSilentMode.type = \"audio/mpeg\";\n    audioSilentMode.disableRemotePlayback = true;\n\n    // play\n    audioSilentMode.play();\n\n    // cleanup\n    audioSilentMode.remove();\n    tmp.remove();\n}\n", "/**\n * Apply a map of styles to an element\n *\n * @param {HTMLElement} el The element that the styles will be applied to\n * @param {Object} styles The map of propName: attribute, both are used as-is\n *\n * @return {HTMLElement} el\n */\nexport default function style(el, styles) {\n    Object.keys(styles).forEach(prop => {\n        if (el.style[prop] !== styles[prop]) {\n            el.style[prop] = styles[prop];\n        }\n    });\n    return el;\n}\n", "import * as util from './util';\nimport MultiCanvas from './drawer.multicanvas';\nimport WebAudio from './webaudio';\nimport MediaElement from './mediaelement';\nimport PeakCache from './peakcache';\nimport MediaElementWebAudio from './mediaelement-webaudio';\n\n/*\n * This work is licensed under a BSD-3-Clause License.\n */\n\n/** @external {HTMLElement} https://developer.mozilla.org/en/docs/Web/API/HTMLElement */\n/** @external {OfflineAudioContext} https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext */\n/** @external {File} https://developer.mozilla.org/en-US/docs/Web/API/File */\n/** @external {Blob} https://developer.mozilla.org/en-US/docs/Web/API/Blob */\n/** @external {CanvasRenderingContext2D} https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D */\n/** @external {MediaStreamConstraints} https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints */\n/** @external {AudioNode} https://developer.mozilla.org/de/docs/Web/API/AudioNode */\n\n/**\n * @typedef {Object} WavesurferParams\n * @property {AudioContext} audioContext=null Use your own previously\n * initialized AudioContext or leave blank.\n * @property {number} audioRate=1 Speed at which to play audio. Lower number is\n * slower.\n * @property {ScriptProcessorNode} audioScriptProcessor=null Use your own previously\n * initialized ScriptProcessorNode or leave blank.\n * @property {boolean} autoCenter=true If a scrollbar is present, center the\n * waveform on current progress\n * @property {number} autoCenterRate=5 If autoCenter is active, rate at which the\n * waveform is centered\n * @property {boolean} autoCenterImmediately=false If autoCenter is active, immediately\n * center waveform on current progress\n * @property {string} backend='WebAudio' `'WebAudio'|'MediaElement'|'MediaElementWebAudio'` In most cases\n * you don't have to set this manually. MediaElement is a fallback for unsupported browsers.\n * MediaElementWebAudio allows to use WebAudio API also with big audio files, loading audio like with\n * MediaElement backend (HTML5 audio tag). You have to use the same methods of MediaElement backend for loading and\n * playback, giving also peaks, so the audio data are not decoded. In this way you can use WebAudio features, like filters,\n * also with audio with big duration. For example:\n * ` wavesurfer.load(url | HTMLMediaElement, peaks, preload, duration);\n *   wavesurfer.play();\n *   wavesurfer.setFilter(customFilter);\n * `\n * @property {string} backgroundColor=null Change background color of the\n * waveform container.\n * @property {number} barHeight=1 The height of the wave bars.\n * @property {number} barRadius=0 The radius of the wave bars. Makes bars rounded\n * @property {number} barGap=null The optional spacing between bars of the wave,\n * if not provided will be calculated in legacy format.\n * @property {number} barWidth=null Draw the waveform using bars.\n * @property {number} barMinHeight=null If specified, draw at least a bar of this height,\n * eliminating waveform gaps\n * @property {boolean} closeAudioContext=false Close and nullify all audio\n * contexts when the destroy method is called.\n * @property {!string|HTMLElement} container CSS selector or HTML element where\n * the waveform should be drawn. This is the only required parameter.\n * @property {string} cursorColor='#333' The fill color of the cursor indicating\n * the playhead position.\n * @property {number} cursorWidth=1 Measured in pixels.\n * @property {object} drawingContextAttributes={desynchronized: false} Drawing context\n * attributes.\n * @property {number} duration=null Optional audio length so pre-rendered peaks\n * can be display immediately for example.\n * @property {boolean} fillParent=true Whether to fill the entire container or\n * draw only according to `minPxPerSec`.\n * @property {boolean} forceDecode=false Force decoding of audio using web audio\n * when zooming to get a more detailed waveform.\n * @property {number} height=128 The height of the waveform. Measured in\n * pixels.\n * @property {boolean} hideScrollbar=false Whether to hide the horizontal\n * scrollbar when one would normally be shown.\n * @property {boolean} hideCursor=false Whether to hide the mouse cursor\n * when one would normally be shown by default.\n * @property {boolean} ignoreSilenceMode=false If true, ignores device silence mode\n * when using the `WebAudio` backend.\n * @property {boolean} interact=true Whether the mouse interaction will be\n * enabled at initialization. You can switch this parameter at any time later\n * on.\n * @property {boolean} loopSelection=true (Use with regions plugin) Enable\n * looping of selected regions\n * @property {number} maxCanvasWidth=4000 Maximum width of a single canvas in\n * pixels, excluding a small overlap (2 * `pixelRatio`, rounded up to the next\n * even integer). If the waveform is longer than this value, additional canvases\n * will be used to render the waveform, which is useful for very large waveforms\n * that may be too wide for browsers to draw on a single canvas.\n * @property {boolean} mediaControls=false (Use with backend `MediaElement` or `MediaElementWebAudio`)\n * this enables the native controls for the media element\n * @property {string} mediaType='audio' (Use with backend `MediaElement` or `MediaElementWebAudio`)\n * `'audio'|'video'` ('video' only for `MediaElement`)\n * @property {number} minPxPerSec=20 Minimum number of pixels per second of\n * audio.\n * @property {boolean} normalize=false If true, normalize by the maximum peak\n * instead of 1.0.\n * @property {boolean} partialRender=false Use the PeakCache to improve\n * rendering speed of large waveforms\n * @property {number} pixelRatio=window.devicePixelRatio The pixel ratio used to\n * calculate display\n * @property {PluginDefinition[]} plugins=[] An array of plugin definitions to\n * register during instantiation, they will be directly initialised unless they\n * are added with the `deferInit` property set to true.\n * @property {string} progressColor='#555' The fill color of the part of the\n * waveform behind the cursor. When `progressColor` and `waveColor` are the same\n * the progress wave is not rendered at all.\n * @property {boolean} removeMediaElementOnDestroy=true Set to false to keep the\n * media element in the DOM when the player is destroyed. This is useful when\n * reusing an existing media element via the `loadMediaElement` method.\n * @property {Object} renderer=MultiCanvas Can be used to inject a custom\n * renderer.\n * @property {boolean|number} responsive=false If set to `true` resize the\n * waveform, when the window is resized. This is debounced with a `100ms`\n * timeout by default. If this parameter is a number it represents that timeout.\n * @property {boolean} rtl=false If set to `true`, renders waveform from\n * right-to-left.\n * @property {boolean} scrollParent=false Whether to scroll the container with a\n * lengthy waveform. Otherwise the waveform is shrunk to the container width\n * (see fillParent).\n * @property {number} skipLength=2 Number of seconds to skip with the\n * skipForward() and skipBackward() methods.\n * @property {boolean} splitChannels=false Render with separate waveforms for\n * the channels of the audio\n * @property {SplitChannelOptions} splitChannelsOptions={} Options for splitChannel rendering\n * @property {boolean} vertical=false Render the waveform vertically instead of horizontally.\n * @property {string} waveColor='#999' The fill color of the waveform after the\n * cursor.\n * @property {object} xhr={} XHR options. For example:\n * `let xhr = {\n *     cache: 'default',\n *     mode: 'cors',\n *     method: 'GET',\n *     credentials: 'same-origin',\n *     redirect: 'follow',\n *     referrer: 'client',\n *     requestHeaders: [\n *         {\n *             key: 'Authorization',\n *             value: 'my-token'\n *         }\n *     ]\n * };`\n */\n\n/**\n * @typedef {Object} PluginDefinition\n * @desc The Object used to describe a plugin\n * @example wavesurfer.addPlugin(pluginDefinition);\n * @property {string} name The name of the plugin, the plugin instance will be\n * added as a property to the wavesurfer instance under this name\n * @property {?Object} staticProps The properties that should be added to the\n * wavesurfer instance as static properties\n * @property {?boolean} deferInit Don't initialise plugin\n * automatically\n * @property {Object} params={} The plugin parameters, they are the first parameter\n * passed to the plugin class constructor function\n * @property {PluginClass} instance The plugin instance factory, is called with\n * the dependency specified in extends. Returns the plugin class.\n */\n\n/**\n * @typedef {Object} SplitChannelOptions\n * @desc parameters applied when splitChannels option is true\n * @property {boolean} overlay=false determines whether channels are rendered on top of each other or on separate tracks\n * @property {object} channelColors={} object describing color for each channel. Example:\n * {\n *     0: {\n *         progressColor: 'green',\n *         waveColor: 'pink'\n *     },\n *     1: {\n *         progressColor: 'orange',\n *         waveColor: 'purple'\n *     }\n * }\n * @property {number[]} filterChannels=[] indexes of channels to be hidden from rendering\n * @property {boolean} relativeNormalization=false determines whether\n * normalization is done per channel or maintains proportionality between\n * channels. Only applied when normalize and splitChannels are both true.\n * @property {boolean} splitDragSelection=false determines if drag selection in regions\n * plugin works separately on each channel or only one selection for all channels\n * @since 4.3.0\n */\n\n/**\n * @interface PluginClass\n *\n * @desc This is the interface which is implemented by all plugin classes. Note\n * that this only turns into an observer after being passed through\n * `wavesurfer.addPlugin`.\n *\n * @extends {Observer}\n */\nclass PluginClass {\n    /**\n     * Plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * It returns a `PluginDefinition` object representing the plugin.\n     *\n     * @param {Object} params={} The plugin params (specific to the plugin)\n     */\n    create(params) {}\n    /**\n     * Construct the plugin\n     *\n     * @param {Object} params={} The plugin params (specific to the plugin)\n     * @param {Object} ws The wavesurfer instance\n     */\n    constructor(params, ws) {}\n    /**\n     * Initialise the plugin\n     *\n     * Start doing something. This is called by\n     * `wavesurfer.initPlugin(pluginName)`\n     */\n    init() {}\n    /**\n     * Destroy the plugin instance\n     *\n     * Stop doing something. This is called by\n     * `wavesurfer.destroyPlugin(pluginName)`\n     */\n    destroy() {}\n}\n\n/**\n * WaveSurfer core library class\n *\n * @extends {Observer}\n * @example\n * const params = {\n *   container: '#waveform',\n *   waveColor: 'violet',\n *   progressColor: 'purple'\n * };\n *\n * // initialise like this\n * const wavesurfer = WaveSurfer.create(params);\n *\n * // or like this ...\n * const wavesurfer = new WaveSurfer(params);\n * wavesurfer.init();\n *\n * // load audio file\n * wavesurfer.load('example/media/demo.wav');\n */\nexport default class WaveSurfer extends util.Observer {\n    /** @private */\n    defaultParams = {\n        audioContext: null,\n        audioScriptProcessor: null,\n        audioRate: 1,\n        autoCenter: true,\n        autoCenterRate: 5,\n        autoCenterImmediately: false,\n        backend: 'WebAudio',\n        backgroundColor: null,\n        barHeight: 1,\n        barRadius: 0,\n        barGap: null,\n        barMinHeight: null,\n        container: null,\n        cursorColor: '#333',\n        cursorWidth: 1,\n        dragSelection: true,\n        drawingContextAttributes: {\n            // Boolean that hints the user agent to reduce the latency\n            // by desynchronizing the canvas paint cycle from the event\n            // loop\n            desynchronized: false\n        },\n        duration: null,\n        fillParent: true,\n        forceDecode: false,\n        height: 128,\n        hideScrollbar: false,\n        hideCursor: false,\n        ignoreSilenceMode: false,\n        interact: true,\n        loopSelection: true,\n        maxCanvasWidth: 4000,\n        mediaContainer: null,\n        mediaControls: false,\n        mediaType: 'audio',\n        minPxPerSec: 20,\n        normalize: false,\n        partialRender: false,\n        pixelRatio:\n            window.devicePixelRatio || screen.deviceXDPI / screen.logicalXDPI,\n        plugins: [],\n        progressColor: '#555',\n        removeMediaElementOnDestroy: true,\n        renderer: MultiCanvas,\n        responsive: false,\n        rtl: false,\n        scrollParent: false,\n        skipLength: 2,\n        splitChannels: false,\n        splitChannelsOptions: {\n            overlay: false,\n            channelColors: {},\n            filterChannels: [],\n            relativeNormalization: false,\n            splitDragSelection: false\n        },\n        vertical: false,\n        waveColor: '#999',\n        xhr: {}\n    };\n\n    /** @private */\n    backends = {\n        MediaElement,\n        WebAudio,\n        MediaElementWebAudio\n    };\n\n    /**\n     * Instantiate this class, call its `init` function and returns it\n     *\n     * @param {WavesurferParams} params The wavesurfer parameters\n     * @return {Object} WaveSurfer instance\n     * @example const wavesurfer = WaveSurfer.create(params);\n     */\n    static create(params) {\n        const wavesurfer = new WaveSurfer(params);\n        return wavesurfer.init();\n    }\n\n    /**\n     * The library version number is available as a static property of the\n     * WaveSurfer class\n     *\n     * @type {String}\n     * @example\n     * console.log('Using wavesurfer.js ' + WaveSurfer.VERSION);\n     */\n    static VERSION = __VERSION__;\n\n    /**\n     * Functions in the `util` property are available as a prototype property to\n     * all instances\n     *\n     * @type {Object}\n     * @example\n     * const wavesurfer = WaveSurfer.create(params);\n     * wavesurfer.util.style(myElement, { background: 'blue' });\n     */\n    util = util;\n\n    /**\n     * Functions in the `util` property are available as a static property of the\n     * WaveSurfer class\n     *\n     * @type {Object}\n     * @example\n     * WaveSurfer.util.style(myElement, { background: 'blue' });\n     */\n    static util = util;\n\n    /**\n     * Initialise wavesurfer instance\n     *\n     * @param {WavesurferParams} params Instantiation options for wavesurfer\n     * @example\n     * const wavesurfer = new WaveSurfer(params);\n     * @returns {this} Wavesurfer instance\n     */\n    constructor(params) {\n        super();\n        /**\n         * Extract relevant parameters (or defaults)\n         * @private\n         */\n        this.params = Object.assign({}, this.defaultParams, params);\n        this.params.splitChannelsOptions = Object.assign(\n            {},\n            this.defaultParams.splitChannelsOptions,\n            params.splitChannelsOptions\n        );\n        /** @private */\n        this.container =\n            'string' == typeof params.container\n                ? document.querySelector(this.params.container)\n                : this.params.container;\n\n        if (!this.container) {\n            throw new Error('Container element not found');\n        }\n\n        if (this.params.mediaContainer == null) {\n            /** @private */\n            this.mediaContainer = this.container;\n        } else if (typeof this.params.mediaContainer == 'string') {\n            /** @private */\n            this.mediaContainer = document.querySelector(\n                this.params.mediaContainer\n            );\n        } else {\n            /** @private */\n            this.mediaContainer = this.params.mediaContainer;\n        }\n\n        if (!this.mediaContainer) {\n            throw new Error('Media Container element not found');\n        }\n\n        if (this.params.maxCanvasWidth <= 1) {\n            throw new Error('maxCanvasWidth must be greater than 1');\n        } else if (this.params.maxCanvasWidth % 2 == 1) {\n            throw new Error('maxCanvasWidth must be an even number');\n        }\n\n        if (this.params.rtl === true) {\n            if (this.params.vertical === true) {\n                util.style(this.container, { transform: 'rotateX(180deg)' });\n            } else {\n                util.style(this.container, { transform: 'rotateY(180deg)' });\n            }\n        }\n\n        if (this.params.backgroundColor) {\n            this.setBackgroundColor(this.params.backgroundColor);\n        }\n\n        /**\n         * @private Used to save the current volume when muting so we can\n         * restore once unmuted\n         * @type {number}\n         */\n        this.savedVolume = 0;\n\n        /**\n         * @private The current muted state\n         * @type {boolean}\n         */\n        this.isMuted = false;\n\n        /**\n         * @private Will hold a list of event descriptors that need to be\n         * canceled on subsequent loads of audio\n         * @type {Object[]}\n         */\n        this.tmpEvents = [];\n\n        /**\n         * @private Holds any running audio downloads\n         * @type {Observer}\n         */\n        this.currentRequest = null;\n        /** @private */\n        this.arraybuffer = null;\n        /** @private */\n        this.drawer = null;\n        /** @private */\n        this.backend = null;\n        /** @private */\n        this.peakCache = null;\n\n        // cache constructor objects\n        if (typeof this.params.renderer !== 'function') {\n            throw new Error('Renderer parameter is invalid');\n        }\n        /**\n         * @private The uninitialised Drawer class\n         */\n        this.Drawer = this.params.renderer;\n        /**\n         * @private The uninitialised Backend class\n         */\n        // Back compat\n        if (this.params.backend == 'AudioElement') {\n            this.params.backend = 'MediaElement';\n        }\n\n        if (\n            (this.params.backend == 'WebAudio' ||\n                this.params.backend === 'MediaElementWebAudio') &&\n            !WebAudio.prototype.supportsWebAudio.call(null)\n        ) {\n            this.params.backend = 'MediaElement';\n        }\n        this.Backend = this.backends[this.params.backend];\n\n        /**\n         * @private map of plugin names that are currently initialised\n         */\n        this.initialisedPluginList = {};\n        /** @private */\n        this.isDestroyed = false;\n\n        /**\n         * Get the current ready status.\n         *\n         * @example const isReady = wavesurfer.isReady;\n         * @return {boolean}\n         */\n        this.isReady = false;\n\n        // responsive debounced event listener. If this.params.responsive is not\n        // set, this is never called. Use 100ms or this.params.responsive as\n        // timeout for the debounce function.\n        let prevWidth = 0;\n        this._onResize = util.debounce(\n            () => {\n                if (\n                    this.drawer.wrapper &&\n                    prevWidth != this.drawer.wrapper.clientWidth &&\n                    !this.params.scrollParent\n                ) {\n                    prevWidth = this.drawer.wrapper.clientWidth;\n                    if (prevWidth) {\n                        // redraw only if waveform container is rendered and has a width\n                        this.drawer.fireEvent('redraw');\n                    }\n                }\n            },\n            typeof this.params.responsive === 'number'\n                ? this.params.responsive\n                : 100\n        );\n\n        return this;\n    }\n\n    /**\n     * Initialise the wave\n     *\n     * @example\n     * var wavesurfer = new WaveSurfer(params);\n     * wavesurfer.init();\n     * @return {this} The wavesurfer instance\n     */\n    init() {\n        this.registerPlugins(this.params.plugins);\n        this.createDrawer();\n        this.createBackend();\n        this.createPeakCache();\n        return this;\n    }\n\n    /**\n     * Add and initialise array of plugins (if `plugin.deferInit` is falsey),\n     * this function is called in the init function of wavesurfer\n     *\n     * @param {PluginDefinition[]} plugins An array of plugin definitions\n     * @emits {WaveSurfer#plugins-registered} Called with the array of plugin definitions\n     * @return {this} The wavesurfer instance\n     */\n    registerPlugins(plugins) {\n        // first instantiate all the plugins\n        plugins.forEach(plugin => this.addPlugin(plugin));\n\n        // now run the init functions\n        plugins.forEach(plugin => {\n            // call init function of the plugin if deferInit is falsey\n            // in that case you would manually use initPlugins()\n            if (!plugin.deferInit) {\n                this.initPlugin(plugin.name);\n            }\n        });\n        this.fireEvent('plugins-registered', plugins);\n        return this;\n    }\n\n    /**\n     * Get a map of plugin names that are currently initialised\n     *\n     * @example wavesurfer.getPlugins();\n     * @return {Object} Object with plugin names\n     */\n    getActivePlugins() {\n        return this.initialisedPluginList;\n    }\n\n    /**\n     * Add a plugin object to wavesurfer\n     *\n     * @param {PluginDefinition} plugin A plugin definition\n     * @emits {WaveSurfer#plugin-added} Called with the name of the plugin that was added\n     * @example wavesurfer.addPlugin(WaveSurfer.minimap());\n     * @return {this} The wavesurfer instance\n     */\n    addPlugin(plugin) {\n        if (!plugin.name) {\n            throw new Error('Plugin does not have a name!');\n        }\n        if (!plugin.instance) {\n            throw new Error(\n                `Plugin ${plugin.name} does not have an instance property!`\n            );\n        }\n\n        // staticProps properties are applied to wavesurfer instance\n        if (plugin.staticProps) {\n            Object.keys(plugin.staticProps).forEach(pluginStaticProp => {\n                /**\n                 * Properties defined in a plugin definition's `staticProps` property are added as\n                 * staticProps properties of the WaveSurfer instance\n                 */\n                this[pluginStaticProp] = plugin.staticProps[pluginStaticProp];\n            });\n        }\n\n        const Instance = plugin.instance;\n\n        // turn the plugin instance into an observer\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\n            util.Observer.prototype\n        );\n        observerPrototypeKeys.forEach(key => {\n            Instance.prototype[key] = util.Observer.prototype[key];\n        });\n\n        /**\n         * Instantiated plugin classes are added as a property of the wavesurfer\n         * instance\n         * @type {Object}\n         */\n        this[plugin.name] = new Instance(plugin.params || {}, this);\n        this.fireEvent('plugin-added', plugin.name);\n        return this;\n    }\n\n    /**\n     * Initialise a plugin\n     *\n     * @param {string} name A plugin name\n     * @emits WaveSurfer#plugin-initialised\n     * @example wavesurfer.initPlugin('minimap');\n     * @return {this} The wavesurfer instance\n     */\n    initPlugin(name) {\n        if (!this[name]) {\n            throw new Error(`Plugin ${name} has not been added yet!`);\n        }\n        if (this.initialisedPluginList[name]) {\n            // destroy any already initialised plugins\n            this.destroyPlugin(name);\n        }\n        this[name].init();\n        this.initialisedPluginList[name] = true;\n        this.fireEvent('plugin-initialised', name);\n        return this;\n    }\n\n    /**\n     * Destroy a plugin\n     *\n     * @param {string} name A plugin name\n     * @emits WaveSurfer#plugin-destroyed\n     * @example wavesurfer.destroyPlugin('minimap');\n     * @returns {this} The wavesurfer instance\n     */\n    destroyPlugin(name) {\n        if (!this[name]) {\n            throw new Error(\n                `Plugin ${name} has not been added yet and cannot be destroyed!`\n            );\n        }\n        if (!this.initialisedPluginList[name]) {\n            throw new Error(\n                `Plugin ${name} is not active and cannot be destroyed!`\n            );\n        }\n        if (typeof this[name].destroy !== 'function') {\n            throw new Error(`Plugin ${name} does not have a destroy function!`);\n        }\n\n        this[name].destroy();\n        delete this.initialisedPluginList[name];\n        this.fireEvent('plugin-destroyed', name);\n        return this;\n    }\n\n    /**\n     * Destroy all initialised plugins. Convenience function to use when\n     * wavesurfer is removed\n     *\n     * @private\n     */\n    destroyAllPlugins() {\n        Object.keys(this.initialisedPluginList).forEach(name =>\n            this.destroyPlugin(name)\n        );\n    }\n\n    /**\n     * Create the drawer and draw the waveform\n     *\n     * @private\n     * @emits WaveSurfer#drawer-created\n     */\n    createDrawer() {\n        this.drawer = new this.Drawer(this.container, this.params);\n        this.drawer.init();\n        this.fireEvent('drawer-created', this.drawer);\n\n        if (this.params.responsive !== false) {\n            window.addEventListener('resize', this._onResize, true);\n            window.addEventListener('orientationchange', this._onResize, true);\n        }\n\n        this.drawer.on('redraw', () => {\n            this.drawBuffer();\n            this.drawer.progress(this.backend.getPlayedPercents());\n        });\n\n        // Click-to-seek\n        this.drawer.on('click', (e, progress) => {\n            setTimeout(() => this.seekTo(progress), 0);\n        });\n\n        // Relay the scroll event from the drawer\n        this.drawer.on('scroll', e => {\n            if (this.params.partialRender) {\n                this.drawBuffer();\n            }\n            this.fireEvent('scroll', e);\n        });\n    }\n\n    /**\n     * Create the backend\n     *\n     * @private\n     * @emits WaveSurfer#backend-created\n     */\n    createBackend() {\n        if (this.backend) {\n            this.backend.destroy();\n        }\n\n        this.backend = new this.Backend(this.params);\n        this.backend.init();\n        this.fireEvent('backend-created', this.backend);\n\n        this.backend.on('finish', () => {\n            this.drawer.progress(this.backend.getPlayedPercents());\n            this.fireEvent('finish');\n        });\n        this.backend.on('play', () => this.fireEvent('play'));\n        this.backend.on('pause', () => this.fireEvent('pause'));\n\n        this.backend.on('audioprocess', time => {\n            this.drawer.progress(this.backend.getPlayedPercents());\n            this.fireEvent('audioprocess', time);\n        });\n\n        // only needed for MediaElement and MediaElementWebAudio backend\n        if (\n            this.params.backend === 'MediaElement' ||\n            this.params.backend === 'MediaElementWebAudio'\n        ) {\n            this.backend.on('seek', () => {\n                this.drawer.progress(this.backend.getPlayedPercents());\n            });\n\n            this.backend.on('volume', () => {\n                let newVolume = this.getVolume();\n                this.fireEvent('volume', newVolume);\n\n                if (this.backend.isMuted !== this.isMuted) {\n                    this.isMuted = this.backend.isMuted;\n                    this.fireEvent('mute', this.isMuted);\n                }\n            });\n        }\n    }\n\n    /**\n     * Create the peak cache\n     *\n     * @private\n     */\n    createPeakCache() {\n        if (this.params.partialRender) {\n            this.peakCache = new PeakCache();\n        }\n    }\n\n    /**\n     * Get the duration of the audio clip\n     *\n     * @example const duration = wavesurfer.getDuration();\n     * @return {number} Duration in seconds\n     */\n    getDuration() {\n        return this.backend.getDuration();\n    }\n\n    /**\n     * Get the current playback position\n     *\n     * @example const currentTime = wavesurfer.getCurrentTime();\n     * @return {number} Playback position in seconds\n     */\n    getCurrentTime() {\n        return this.backend.getCurrentTime();\n    }\n\n    /**\n     * Set the current play time in seconds.\n     *\n     * @param {number} seconds A positive number in seconds. E.g. 10 means 10\n     * seconds, 60 means 1 minute\n     */\n    setCurrentTime(seconds) {\n        if (seconds >= this.getDuration()) {\n            this.seekTo(1);\n        } else {\n            this.seekTo(seconds / this.getDuration());\n        }\n    }\n\n    /**\n     * Starts playback from the current position. Optional start and end\n     * measured in seconds can be used to set the range of audio to play.\n     *\n     * @param {?number} start Position to start at\n     * @param {?number} end Position to end at\n     * @emits WaveSurfer#interaction\n     * @return {Promise} Result of the backend play method\n     * @example\n     * // play from second 1 to 5\n     * wavesurfer.play(1, 5);\n     */\n    play(start, end) {\n        if (this.params.ignoreSilenceMode) {\n            // ignores device hardware silence mode\n            util.ignoreSilenceMode();\n        }\n\n        this.fireEvent('interaction', () => this.play(start, end));\n        return this.backend.play(start, end);\n    }\n\n    /**\n     * Set a point in seconds for playback to stop at.\n     *\n     * @param {number} position Position (in seconds) to stop at\n     * @version 3.3.0\n     */\n    setPlayEnd(position) {\n        this.backend.setPlayEnd(position);\n    }\n\n    /**\n     * Stops and pauses playback\n     *\n     * @example wavesurfer.pause();\n     * @return {Promise} Result of the backend pause method\n     */\n    pause() {\n        if (!this.backend.isPaused()) {\n            return this.backend.pause();\n        }\n    }\n\n    /**\n     * Toggle playback\n     *\n     * @example wavesurfer.playPause();\n     * @return {Promise} Result of the backend play or pause method\n     */\n    playPause() {\n        return this.backend.isPaused() ? this.play() : this.pause();\n    }\n\n    /**\n     * Get the current playback state\n     *\n     * @example const isPlaying = wavesurfer.isPlaying();\n     * @return {boolean} False if paused, true if playing\n     */\n    isPlaying() {\n        return !this.backend.isPaused();\n    }\n\n    /**\n     * Skip backward\n     *\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n     * is used\n     * @example wavesurfer.skipBackward();\n     */\n    skipBackward(seconds) {\n        this.skip(-seconds || -this.params.skipLength);\n    }\n\n    /**\n     * Skip forward\n     *\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n     * is used\n     * @example wavesurfer.skipForward();\n     */\n    skipForward(seconds) {\n        this.skip(seconds || this.params.skipLength);\n    }\n\n    /**\n     * Skip a number of seconds from the current position (use a negative value\n     * to go backwards).\n     *\n     * @param {number} offset Amount to skip back or forwards\n     * @example\n     * // go back 2 seconds\n     * wavesurfer.skip(-2);\n     */\n    skip(offset) {\n        const duration = this.getDuration() || 1;\n        let position = this.getCurrentTime() || 0;\n        position = Math.max(0, Math.min(duration, position + (offset || 0)));\n        this.seekAndCenter(position / duration);\n    }\n\n    /**\n     * Seeks to a position and centers the view\n     *\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\n     * @example\n     * // seek and go to the middle of the audio\n     * wavesurfer.seekTo(0.5);\n     */\n    seekAndCenter(progress) {\n        this.seekTo(progress);\n        this.drawer.recenter(progress);\n    }\n\n    /**\n     * Seeks to a position\n     *\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\n     * @emits WaveSurfer#interaction\n     * @emits WaveSurfer#seek\n     * @example\n     * // seek to the middle of the audio\n     * wavesurfer.seekTo(0.5);\n     */\n    seekTo(progress) {\n        // return an error if progress is not a number between 0 and 1\n        if (\n            typeof progress !== 'number' ||\n            !isFinite(progress) ||\n            progress < 0 ||\n            progress > 1\n        ) {\n            throw new Error(\n                'Error calling wavesurfer.seekTo, parameter must be a number between 0 and 1!'\n            );\n        }\n        this.fireEvent('interaction', () => this.seekTo(progress));\n\n        const isWebAudioBackend = this.params.backend === 'WebAudio';\n        const paused = this.backend.isPaused();\n\n        if (isWebAudioBackend && !paused) {\n            this.backend.pause();\n        }\n\n        // avoid small scrolls while paused seeking\n        const oldScrollParent = this.params.scrollParent;\n        this.params.scrollParent = false;\n        this.backend.seekTo(progress * this.getDuration());\n        this.drawer.progress(progress);\n\n        if (isWebAudioBackend && !paused) {\n            this.backend.play();\n        }\n\n        this.params.scrollParent = oldScrollParent;\n        this.fireEvent('seek', progress);\n    }\n\n    /**\n     * Stops and goes to the beginning.\n     *\n     * @example wavesurfer.stop();\n     */\n    stop() {\n        this.pause();\n        this.seekTo(0);\n        this.drawer.progress(0);\n    }\n\n    /**\n     * Sets the ID of the audio device to use for output and returns a Promise.\n     *\n     * @param {string} deviceId String value representing underlying output\n     * device\n     * @returns {Promise} `Promise` that resolves to `undefined` when there are\n     * no errors detected.\n     */\n    setSinkId(deviceId) {\n        return this.backend.setSinkId(deviceId);\n    }\n\n    /**\n     * Set the playback volume.\n     *\n     * @param {number} newVolume A value between 0 and 1, 0 being no\n     * volume and 1 being full volume.\n     * @emits WaveSurfer#volume\n     */\n    setVolume(newVolume) {\n        this.backend.setVolume(newVolume);\n        this.fireEvent('volume', newVolume);\n    }\n\n    /**\n     * Get the playback volume.\n     *\n     * @return {number} A value between 0 and 1, 0 being no\n     * volume and 1 being full volume.\n     */\n    getVolume() {\n        return this.backend.getVolume();\n    }\n\n    /**\n     * Set the playback rate.\n     *\n     * @param {number} rate A positive number. E.g. 0.5 means half the normal\n     * speed, 2 means double speed and so on.\n     * @example wavesurfer.setPlaybackRate(2);\n     */\n    setPlaybackRate(rate) {\n        this.backend.setPlaybackRate(rate);\n    }\n\n    /**\n     * Get the playback rate.\n     *\n     * @return {number} The current playback rate.\n     */\n    getPlaybackRate() {\n        return this.backend.getPlaybackRate();\n    }\n\n    /**\n     * Toggle the volume on and off. If not currently muted it will save the\n     * current volume value and turn the volume off. If currently muted then it\n     * will restore the volume to the saved value, and then rest the saved\n     * value.\n     *\n     * @example wavesurfer.toggleMute();\n     */\n    toggleMute() {\n        this.setMute(!this.isMuted);\n    }\n\n    /**\n     * Enable or disable muted audio\n     *\n     * @param {boolean} mute Specify `true` to mute audio.\n     * @emits WaveSurfer#volume\n     * @emits WaveSurfer#mute\n     * @example\n     * // unmute\n     * wavesurfer.setMute(false);\n     * console.log(wavesurfer.getMute()) // logs false\n     */\n    setMute(mute) {\n        // ignore all muting requests if the audio is already in that state\n        if (mute === this.isMuted) {\n            this.fireEvent('mute', this.isMuted);\n            return;\n        }\n\n        if (this.backend.setMute) {\n            // Backends such as the MediaElement backend have their own handling\n            // of mute, let them handle it.\n            this.backend.setMute(mute);\n            this.isMuted = mute;\n        } else {\n            if (mute) {\n                // If currently not muted then save current volume,\n                // turn off the volume and update the mute properties\n                this.savedVolume = this.backend.getVolume();\n                this.backend.setVolume(0);\n                this.isMuted = true;\n                this.fireEvent('volume', 0);\n            } else {\n                // If currently muted then restore to the saved volume\n                // and update the mute properties\n                this.backend.setVolume(this.savedVolume);\n                this.isMuted = false;\n                this.fireEvent('volume', this.savedVolume);\n            }\n        }\n        this.fireEvent('mute', this.isMuted);\n    }\n\n    /**\n     * Get the current mute status.\n     *\n     * @example const isMuted = wavesurfer.getMute();\n     * @return {boolean} Current mute status\n     */\n    getMute() {\n        return this.isMuted;\n    }\n\n    /**\n     * Get the list of current set filters as an array.\n     *\n     * Filters must be set with setFilters method first\n     *\n     * @return {array} List of enabled filters\n     */\n    getFilters() {\n        return this.backend.filters || [];\n    }\n\n    /**\n     * Toggles `scrollParent` and redraws\n     *\n     * @example wavesurfer.toggleScroll();\n     */\n    toggleScroll() {\n        this.params.scrollParent = !this.params.scrollParent;\n        this.drawBuffer();\n    }\n\n    /**\n     * Toggle mouse interaction\n     *\n     * @example wavesurfer.toggleInteraction();\n     */\n    toggleInteraction() {\n        this.params.interact = !this.params.interact;\n    }\n\n    /**\n     * Get the fill color of the waveform after the cursor.\n     *\n     * @param {?number} channelIdx Optional index of the channel to get its wave color if splitChannels is true\n     * @return {string|object} A CSS color string, or an array of CSS color strings.\n     */\n    getWaveColor(channelIdx = null) {\n        if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\n            return this.params.splitChannelsOptions.channelColors[channelIdx].waveColor;\n        }\n        return this.params.waveColor;\n    }\n\n    /**\n     * Set the fill color of the waveform after the cursor.\n     *\n     * @param {string|object} color A CSS color string, or an array of CSS color strings.\n     * @param {?number} channelIdx Optional index of the channel to set its wave color if splitChannels is true\n     * @example wavesurfer.setWaveColor('#ddd');\n     */\n    setWaveColor(color, channelIdx = null) {\n        if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\n            this.params.splitChannelsOptions.channelColors[channelIdx].waveColor = color;\n        } else {\n            this.params.waveColor = color;\n        }\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the fill color of the waveform behind the cursor.\n     *\n     * @param {?number} channelIdx Optional index of the channel to get its progress color if splitChannels is true\n     * @return {string|object} A CSS color string, or an array of CSS color strings.\n     */\n    getProgressColor(channelIdx = null) {\n        if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\n            return this.params.splitChannelsOptions.channelColors[channelIdx].progressColor;\n        }\n        return this.params.progressColor;\n    }\n\n    /**\n     * Set the fill color of the waveform behind the cursor.\n     *\n     * @param {string|object} color A CSS color string, or an array of CSS color strings.\n     * @param {?number} channelIdx Optional index of the channel to set its progress color if splitChannels is true\n     * @example wavesurfer.setProgressColor('#400');\n     */\n    setProgressColor(color, channelIdx) {\n        if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\n            this.params.splitChannelsOptions.channelColors[channelIdx].progressColor = color;\n        } else {\n            this.params.progressColor = color;\n        }\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the background color of the waveform container.\n     *\n     * @return {string} A CSS color string.\n     */\n    getBackgroundColor() {\n        return this.params.backgroundColor;\n    }\n\n    /**\n     * Set the background color of the waveform container.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setBackgroundColor('#FF00FF');\n     */\n    setBackgroundColor(color) {\n        this.params.backgroundColor = color;\n        util.style(this.container, { background: this.params.backgroundColor });\n    }\n\n    /**\n     * Get the fill color of the cursor indicating the playhead\n     * position.\n     *\n     * @return {string} A CSS color string.\n     */\n    getCursorColor() {\n        return this.params.cursorColor;\n    }\n\n    /**\n     * Set the fill color of the cursor indicating the playhead\n     * position.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setCursorColor('#222');\n     */\n    setCursorColor(color) {\n        this.params.cursorColor = color;\n        this.drawer.updateCursor();\n    }\n\n    /**\n     * Get the height of the waveform.\n     *\n     * @return {number} Height measured in pixels.\n     */\n    getHeight() {\n        return this.params.height;\n    }\n\n    /**\n     * Set the height of the waveform.\n     *\n     * @param {number} height Height measured in pixels.\n     * @example wavesurfer.setHeight(200);\n     */\n    setHeight(height) {\n        this.params.height = height;\n        this.drawer.setHeight(height * this.params.pixelRatio);\n        this.drawBuffer();\n    }\n\n    /**\n     * Hide channels from being drawn on the waveform if splitting channels.\n     *\n     * For example, if we want to draw only the peaks for the right stereo channel:\n     *\n     * const wavesurfer = new WaveSurfer.create({...splitChannels: true});\n     * wavesurfer.load('stereo_audio.mp3');\n     *\n     * wavesurfer.setFilteredChannel([0]); <-- hide left channel peaks.\n     *\n     * @param {array} channelIndices Channels to be filtered out from drawing.\n     * @version 4.0.0\n     */\n    setFilteredChannels(channelIndices) {\n        this.params.splitChannelsOptions.filterChannels = channelIndices;\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the correct peaks for current wave view-port and render wave\n     *\n     * @private\n     * @emits WaveSurfer#redraw\n     */\n    drawBuffer() {\n        const nominalWidth = Math.round(\n            this.getDuration() *\n                this.params.minPxPerSec *\n                this.params.pixelRatio\n        );\n        const parentWidth = this.drawer.getWidth();\n        let width = nominalWidth;\n        // always start at 0 after zooming for scrolling : issue redraw left part\n        let start = 0;\n        let end = Math.max(start + parentWidth, width);\n        // Fill container\n        if (\n            this.params.fillParent &&\n            (!this.params.scrollParent || nominalWidth < parentWidth)\n        ) {\n            width = parentWidth;\n            start = 0;\n            end = width;\n        }\n\n        let peaks;\n        if (this.params.partialRender) {\n            const newRanges = this.peakCache.addRangeToPeakCache(\n                width,\n                start,\n                end\n            );\n            let i;\n            for (i = 0; i < newRanges.length; i++) {\n                peaks = this.backend.getPeaks(\n                    width,\n                    newRanges[i][0],\n                    newRanges[i][1]\n                );\n                this.drawer.drawPeaks(\n                    peaks,\n                    width,\n                    newRanges[i][0],\n                    newRanges[i][1]\n                );\n            }\n        } else {\n            peaks = this.backend.getPeaks(width, start, end);\n            this.drawer.drawPeaks(peaks, width, start, end);\n        }\n        this.fireEvent('redraw', peaks, width);\n    }\n\n    /**\n     * Horizontally zooms the waveform in and out. It also changes the parameter\n     * `minPxPerSec` and enables the `scrollParent` option. Calling the function\n     * with a falsey parameter will reset the zoom state.\n     *\n     * @param {?number} pxPerSec Number of horizontal pixels per second of\n     * audio, if none is set the waveform returns to unzoomed state\n     * @emits WaveSurfer#zoom\n     * @example wavesurfer.zoom(20);\n     */\n    zoom(pxPerSec) {\n        if (!pxPerSec) {\n            this.params.minPxPerSec = this.defaultParams.minPxPerSec;\n            this.params.scrollParent = false;\n        } else {\n            this.params.minPxPerSec = pxPerSec;\n            this.params.scrollParent = true;\n        }\n\n        this.drawBuffer();\n        this.drawer.progress(this.backend.getPlayedPercents());\n\n        this.drawer.recenter(this.getCurrentTime() / this.getDuration());\n        this.fireEvent('zoom', pxPerSec);\n    }\n\n    /**\n     * Decode buffer and load\n     *\n     * @private\n     * @param {ArrayBuffer} arraybuffer Buffer to process\n     */\n    loadArrayBuffer(arraybuffer) {\n        this.decodeArrayBuffer(arraybuffer, data => {\n            if (!this.isDestroyed) {\n                this.loadDecodedBuffer(data);\n            }\n        });\n    }\n\n    /**\n     * Directly load an externally decoded AudioBuffer\n     *\n     * @private\n     * @param {AudioBuffer} buffer Buffer to process\n     * @emits WaveSurfer#ready\n     */\n    loadDecodedBuffer(buffer) {\n        this.backend.load(buffer);\n        this.drawBuffer();\n        this.isReady = true;\n        this.fireEvent('ready');\n    }\n\n    /**\n     * Loads audio data from a Blob or File object\n     *\n     * @param {Blob|File} blob Audio data\n     * @example\n     */\n    loadBlob(blob) {\n        // Create file reader\n        const reader = new FileReader();\n        reader.addEventListener('progress', e => this.onProgress(e));\n        reader.addEventListener('load', e =>\n            this.loadArrayBuffer(e.target.result)\n        );\n        reader.addEventListener('error', () =>\n            this.fireEvent('error', 'Error reading file')\n        );\n        reader.readAsArrayBuffer(blob);\n        this.empty();\n    }\n\n    /**\n     * Loads audio and re-renders the waveform.\n     *\n     * @param {string|HTMLMediaElement} url The url of the audio file or the\n     * audio element with the audio\n     * @param {number[]|Number.<Array[]>} peaks Wavesurfer does not have to decode\n     * the audio to render the waveform if this is specified\n     * @param {?string} preload (Use with backend `MediaElement` and `MediaElementWebAudio`)\n     * `'none'|'metadata'|'auto'` Preload attribute for the media element\n     * @param {?number} duration The duration of the audio. This is used to\n     * render the peaks data in the correct size for the audio duration (as\n     * befits the current `minPxPerSec` and zoom value) without having to decode\n     * the audio.\n     * @returns {void}\n     * @throws Will throw an error if the `url` argument is empty.\n     * @example\n     * // uses fetch or media element to load file (depending on backend)\n     * wavesurfer.load('http://example.com/demo.wav');\n     *\n     * // setting preload attribute with media element backend and supplying\n     * // peaks\n     * wavesurfer.load(\n     *   'http://example.com/demo.wav',\n     *   [0.0218, 0.0183, 0.0165, 0.0198, 0.2137, 0.2888],\n     *   true\n     * );\n     */\n    load(url, peaks, preload, duration) {\n        if (!url) {\n            throw new Error('url parameter cannot be empty');\n        }\n        this.empty();\n        if (preload) {\n            // check whether the preload attribute will be usable and if not log\n            // a warning listing the reasons why not and nullify the variable\n            const preloadIgnoreReasons = {\n                \"Preload is not 'auto', 'none' or 'metadata'\":\n                    ['auto', 'metadata', 'none'].indexOf(preload) === -1,\n                'Peaks are not provided': !peaks,\n                \"Backend is not of type 'MediaElement' or 'MediaElementWebAudio'\":\n                    ['MediaElement', 'MediaElementWebAudio'].indexOf(\n                        this.params.backend\n                    ) === -1,\n                'Url is not of type string': typeof url !== 'string'\n            };\n            const activeReasons = Object.keys(preloadIgnoreReasons).filter(\n                reason => preloadIgnoreReasons[reason]\n            );\n            if (activeReasons.length) {\n                // eslint-disable-next-line no-console\n                console.warn(\n                    'Preload parameter of wavesurfer.load will be ignored because:\\n\\t- ' +\n                        activeReasons.join('\\n\\t- ')\n                );\n                // stop invalid values from being used\n                preload = null;\n            }\n        }\n\n        // loadBuffer(url, peaks, duration) requires that url is a string\n        // but users can pass in a HTMLMediaElement to WaveSurfer\n        if (this.params.backend === 'WebAudio' && url instanceof HTMLMediaElement) {\n            url = url.src;\n        }\n\n        switch (this.params.backend) {\n            case 'WebAudio':\n                return this.loadBuffer(url, peaks, duration);\n            case 'MediaElement':\n            case 'MediaElementWebAudio':\n                return this.loadMediaElement(url, peaks, preload, duration);\n        }\n    }\n\n    /**\n     * Loads audio using Web Audio buffer backend.\n     *\n     * @private\n     * @emits WaveSurfer#waveform-ready\n     * @param {string} url URL of audio file\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\n     * @param {?number} duration Optional duration of audio file\n     * @returns {void}\n     */\n    loadBuffer(url, peaks, duration) {\n        const load = action => {\n            if (action) {\n                this.tmpEvents.push(this.once('ready', action));\n            }\n            return this.getArrayBuffer(url, data => this.loadArrayBuffer(data));\n        };\n\n        if (peaks) {\n            this.backend.setPeaks(peaks, duration);\n            this.drawBuffer();\n            this.fireEvent('waveform-ready');\n            this.tmpEvents.push(this.once('interaction', load));\n        } else {\n            return load();\n        }\n    }\n\n    /**\n     * Either create a media element, or load an existing media element.\n     *\n     * @private\n     * @emits WaveSurfer#waveform-ready\n     * @param {string|HTMLMediaElement} urlOrElt Either a path to a media file, or an\n     * existing HTML5 Audio/Video Element\n     * @param {number[]|Number.<Array[]>} peaks Array of peaks. Required to bypass web audio\n     * dependency\n     * @param {?boolean} preload Set to true if the preload attribute of the\n     * audio element should be enabled\n     * @param {?number} duration Optional duration of audio file\n     */\n    loadMediaElement(urlOrElt, peaks, preload, duration) {\n        let url = urlOrElt;\n\n        if (typeof urlOrElt === 'string') {\n            this.backend.load(url, this.mediaContainer, peaks, preload);\n        } else {\n            const elt = urlOrElt;\n            this.backend.loadElt(elt, peaks);\n\n            // If peaks are not provided,\n            // url = element.src so we can get peaks with web audio\n            url = elt.src;\n        }\n\n        this.tmpEvents.push(\n            this.backend.once('canplay', () => {\n                // ignore when backend was already destroyed\n                if (!this.backend.destroyed) {\n                    this.drawBuffer();\n                    this.isReady = true;\n                    this.fireEvent('ready');\n                }\n            }),\n            this.backend.once('error', err => this.fireEvent('error', err))\n        );\n\n        // If peaks are provided, render them and fire the `waveform-ready` event.\n        if (peaks) {\n            this.backend.setPeaks(peaks, duration);\n            this.drawBuffer();\n            this.fireEvent('waveform-ready');\n        }\n\n        // If no pre-decoded peaks are provided, or are provided with\n        // forceDecode flag, attempt to download the audio file and decode it\n        // with Web Audio.\n        if (\n            (!peaks || this.params.forceDecode) &&\n            this.backend.supportsWebAudio()\n        ) {\n            this.getArrayBuffer(url, arraybuffer => {\n                this.decodeArrayBuffer(arraybuffer, buffer => {\n                    this.backend.buffer = buffer;\n                    this.backend.setPeaks(null);\n                    this.drawBuffer();\n                    this.fireEvent('waveform-ready');\n                });\n            });\n        }\n    }\n\n    /**\n     * Decode an array buffer and pass data to a callback\n     *\n     * @private\n     * @param {Object} arraybuffer The array buffer to decode\n     * @param {function} callback The function to call on complete\n     */\n    decodeArrayBuffer(arraybuffer, callback) {\n        if (!this.isDestroyed) {\n            this.arraybuffer = arraybuffer;\n            this.backend.decodeArrayBuffer(\n                arraybuffer,\n                data => {\n                    // Only use the decoded data if we haven't been destroyed or\n                    // another decode started in the meantime\n                    if (!this.isDestroyed && this.arraybuffer == arraybuffer) {\n                        callback(data);\n                        this.arraybuffer = null;\n                    }\n                },\n                () => this.fireEvent('error', 'Error decoding audiobuffer')\n            );\n        }\n    }\n\n    /**\n     * Load an array buffer using fetch and pass the result to a callback\n     *\n     * @param {string} url The URL of the file object\n     * @param {function} callback The function to call on complete\n     * @returns {util.fetchFile} fetch call\n     * @private\n     */\n    getArrayBuffer(url, callback) {\n        let options = Object.assign(\n            {\n                url: url,\n                responseType: 'arraybuffer'\n            },\n            this.params.xhr\n        );\n        const request = util.fetchFile(options);\n\n        this.currentRequest = request;\n\n        this.tmpEvents.push(\n            request.on('progress', e => {\n                this.onProgress(e);\n            }),\n            request.on('success', data => {\n                callback(data);\n                this.currentRequest = null;\n            }),\n            request.on('error', e => {\n                this.fireEvent('error', e);\n                this.currentRequest = null;\n            })\n        );\n\n        return request;\n    }\n\n    /**\n     * Called while the audio file is loading\n     *\n     * @private\n     * @param {Event} e Progress event\n     * @emits WaveSurfer#loading\n     */\n    onProgress(e) {\n        let percentComplete;\n        if (e.lengthComputable) {\n            percentComplete = e.loaded / e.total;\n        } else {\n            // Approximate progress with an asymptotic\n            // function, and assume downloads in the 1-3 MB range.\n            percentComplete = e.loaded / (e.loaded + 1000000);\n        }\n        this.fireEvent('loading', Math.round(percentComplete * 100), e.target);\n    }\n\n    /**\n     * Exports PCM data into a JSON array and optionally opens in a new window\n     * as valid JSON Blob instance.\n     *\n     * @param {number} length=1024 The scale in which to export the peaks\n     * @param {number} accuracy=10000\n     * @param {?boolean} noWindow Set to true to disable opening a new\n     * window with the JSON\n     * @param {number} start Start index\n     * @param {number} end End index\n     * @return {Promise} Promise that resolves with array of peaks\n     */\n    exportPCM(length, accuracy, noWindow, start, end) {\n        length = length || 1024;\n        start = start || 0;\n        accuracy = accuracy || 10000;\n        noWindow = noWindow || false;\n        const peaks = this.backend.getPeaks(length, start, end);\n        const arr = [].map.call(\n            peaks,\n            val => Math.round(val * accuracy) / accuracy\n        );\n\n        return new Promise((resolve, reject) => {\n            if (!noWindow){\n                const blobJSON = new Blob(\n                    [JSON.stringify(arr)],\n                    {type: 'application/json;charset=utf-8'}\n                );\n                const objURL = URL.createObjectURL(blobJSON);\n                window.open(objURL);\n                URL.revokeObjectURL(objURL);\n            }\n            resolve(arr);\n        });\n    }\n\n    /**\n     * Save waveform image as data URI.\n     *\n     * The default format is `image/png`. Other supported types are\n     * `image/jpeg` and `image/webp`.\n     *\n     * @param {string} format='image/png' A string indicating the image format.\n     * The default format type is `image/png`.\n     * @param {number} quality=1 A number between 0 and 1 indicating the image\n     * quality to use for image formats that use lossy compression such as\n     * `image/jpeg` and `image/webp`.\n     * @param {string} type Image data type to return. Either `dataURL` (default)\n     * or `blob`.\n     * @return {string|string[]|Promise} When using `dataURL` type this returns\n     * a single data URL or an array of data URLs, one for each canvas. When using\n     * `blob` type this returns a `Promise` resolving with an array of `Blob`\n     * instances, one for each canvas.\n     */\n    exportImage(format, quality, type) {\n        if (!format) {\n            format = 'image/png';\n        }\n        if (!quality) {\n            quality = 1;\n        }\n        if (!type) {\n            type = 'dataURL';\n        }\n\n        return this.drawer.getImage(format, quality, type);\n    }\n\n    /**\n     * Cancel any fetch request currently in progress\n     */\n    cancelAjax() {\n        if (this.currentRequest && this.currentRequest.controller) {\n            // If the current request has a ProgressHandler, then its ReadableStream might need to be cancelled too\n            // See: Wavesurfer issue #2042\n            // See Firefox bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1583815\n            if (this.currentRequest._reader) {\n                // Ignoring exceptions thrown by call to cancel()\n                this.currentRequest._reader.cancel().catch(err => {});\n            }\n\n            this.currentRequest.controller.abort();\n            this.currentRequest = null;\n        }\n    }\n\n    /**\n     * @private\n     */\n    clearTmpEvents() {\n        this.tmpEvents.forEach(e => e.un());\n    }\n\n    /**\n     * Display empty waveform.\n     */\n    empty() {\n        if (!this.backend.isPaused()) {\n            this.stop();\n            this.backend.disconnectSource();\n        }\n        this.isReady = false;\n        this.cancelAjax();\n        this.clearTmpEvents();\n\n        // empty drawer\n        this.drawer.progress(0);\n        this.drawer.setWidth(0);\n        this.drawer.drawPeaks({ length: this.drawer.getWidth() }, 0);\n    }\n\n    /**\n     * Remove events, elements and disconnect WebAudio nodes.\n     *\n     * @emits WaveSurfer#destroy\n     */\n    destroy() {\n        this.destroyAllPlugins();\n        this.fireEvent('destroy');\n        this.cancelAjax();\n        this.clearTmpEvents();\n        this.unAll();\n        if (this.params.responsive !== false) {\n            window.removeEventListener('resize', this._onResize, true);\n            window.removeEventListener(\n                'orientationchange',\n                this._onResize,\n                true\n            );\n        }\n        if (this.backend) {\n            this.backend.destroy();\n            // clears memory usage\n            this.backend = null;\n        }\n        if (this.drawer) {\n            this.drawer.destroy();\n        }\n        this.isDestroyed = true;\n        this.isReady = false;\n        this.arraybuffer = null;\n    }\n}\n", "import * as util from './util';\n\n// using constants to prevent someone writing the string wrong\nconst PLAYING = 'playing';\nconst PAUSED = 'paused';\nconst FINISHED = 'finished';\n\n/**\n * WebAudio backend\n *\n * @extends {Observer}\n */\nexport default class WebAudio extends util.Observer {\n    /** scriptBufferSize: size of the processing buffer */\n    static scriptBufferSize = 256;\n    /** audioContext: allows to process audio with WebAudio API */\n    audioContext = null;\n    /** @private */\n    offlineAudioContext = null;\n    /** @private */\n    stateBehaviors = {\n        [PLAYING]: {\n            init() {\n                this.addOnAudioProcess();\n            },\n            getPlayedPercents() {\n                const duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n            },\n            getCurrentTime() {\n                return this.startPosition + this.getPlayedTime();\n            }\n        },\n        [PAUSED]: {\n            init() {\n                this.removeOnAudioProcess();\n            },\n            getPlayedPercents() {\n                const duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n            },\n            getCurrentTime() {\n                return this.startPosition;\n            }\n        },\n        [FINISHED]: {\n            init() {\n                this.removeOnAudioProcess();\n                this.fireEvent('finish');\n            },\n            getPlayedPercents() {\n                return 1;\n            },\n            getCurrentTime() {\n                return this.getDuration();\n            }\n        }\n    };\n\n    /**\n     * Does the browser support this backend\n     *\n     * @return {boolean} Whether or not this browser supports this backend\n     */\n    supportsWebAudio() {\n        return !!(window.AudioContext || window.webkitAudioContext);\n    }\n\n    /**\n     * Get the audio context used by this backend or create one\n     *\n     * @return {AudioContext} Existing audio context, or creates a new one\n     */\n    getAudioContext() {\n        if (!window.WaveSurferAudioContext) {\n            window.WaveSurferAudioContext = new (window.AudioContext ||\n                window.webkitAudioContext)();\n        }\n        return window.WaveSurferAudioContext;\n    }\n\n    /**\n     * Get the offline audio context used by this backend or create one\n     *\n     * @param {number} sampleRate The sample rate to use\n     * @return {OfflineAudioContext} Existing offline audio context, or creates\n     * a new one\n     */\n    getOfflineAudioContext(sampleRate) {\n        if (!window.WaveSurferOfflineAudioContext) {\n            window.WaveSurferOfflineAudioContext = new (window.OfflineAudioContext ||\n                window.webkitOfflineAudioContext)(1, 2, sampleRate);\n        }\n        return window.WaveSurferOfflineAudioContext;\n    }\n\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super();\n        /** @private */\n        this.params = params;\n        /** ac: Audio Context instance */\n        this.ac =\n            params.audioContext ||\n            (this.supportsWebAudio() ? this.getAudioContext() : {});\n        /**@private */\n        this.lastPlay = this.ac.currentTime;\n        /** @private */\n        this.startPosition = 0;\n        /** @private */\n        this.scheduledPause = null;\n        /** @private */\n        this.states = {\n            [PLAYING]: Object.create(this.stateBehaviors[PLAYING]),\n            [PAUSED]: Object.create(this.stateBehaviors[PAUSED]),\n            [FINISHED]: Object.create(this.stateBehaviors[FINISHED])\n        };\n        /** @private */\n        this.buffer = null;\n        /** @private */\n        this.filters = [];\n        /** gainNode: allows to control audio volume */\n        this.gainNode = null;\n        /** @private */\n        this.mergedPeaks = null;\n        /** @private */\n        this.offlineAc = null;\n        /** @private */\n        this.peaks = null;\n        /** @private */\n        this.playbackRate = 1;\n        /** analyser: provides audio analysis information */\n        this.analyser = null;\n        /** scriptNode: allows processing audio */\n        this.scriptNode = null;\n        /** @private */\n        this.source = null;\n        /** @private */\n        this.splitPeaks = [];\n        /** @private */\n        this.state = null;\n        /** @private */\n        this.explicitDuration = params.duration;\n        /** @private */\n        this.sinkStreamDestination = null;\n        /** @private */\n        this.sinkAudioElement = null;\n        /**\n         * Boolean indicating if the backend was destroyed.\n         */\n        this.destroyed = false;\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.createVolumeNode();\n        this.createScriptNode();\n        this.createAnalyserNode();\n\n        this.setState(PAUSED);\n        this.setPlaybackRate(this.params.audioRate);\n        this.setLength(0);\n    }\n\n    /** @private */\n    disconnectFilters() {\n        if (this.filters) {\n            this.filters.forEach(filter => {\n                filter && filter.disconnect();\n            });\n            this.filters = null;\n            // Reconnect direct path\n            this.analyser.connect(this.gainNode);\n        }\n    }\n\n    /**\n     * @private\n     *\n     * @param {string} state The new state\n     */\n    setState(state) {\n        if (this.state !== this.states[state]) {\n            this.state = this.states[state];\n            this.state.init.call(this);\n        }\n    }\n\n    /**\n     * Unpacked `setFilters()`\n     *\n     * @param {...AudioNode} filters One or more filters to set\n     */\n    setFilter(...filters) {\n        this.setFilters(filters);\n    }\n\n    /**\n     * Insert custom Web Audio nodes into the graph\n     *\n     * @param {AudioNode[]} filters Packed filters array\n     * @example\n     * const lowpass = wavesurfer.backend.ac.createBiquadFilter();\n     * wavesurfer.backend.setFilter(lowpass);\n     */\n    setFilters(filters) {\n        // Remove existing filters\n        this.disconnectFilters();\n\n        // Insert filters if filter array not empty\n        if (filters && filters.length) {\n            this.filters = filters;\n\n            // Disconnect direct path before inserting filters\n            this.analyser.disconnect();\n\n            // Connect each filter in turn\n            filters\n                .reduce((prev, curr) => {\n                    prev.connect(curr);\n                    return curr;\n                }, this.analyser)\n                .connect(this.gainNode);\n        }\n    }\n    /** Create ScriptProcessorNode to process audio */\n    createScriptNode() {\n        if (this.params.audioScriptProcessor) {\n            this.scriptNode = this.params.audioScriptProcessor;\n        } else {\n            if (this.ac.createScriptProcessor) {\n                this.scriptNode = this.ac.createScriptProcessor(\n                    WebAudio.scriptBufferSize\n                );\n            } else {\n                this.scriptNode = this.ac.createJavaScriptNode(\n                    WebAudio.scriptBufferSize\n                );\n            }\n        }\n        this.scriptNode.connect(this.ac.destination);\n    }\n\n    /** @private */\n    addOnAudioProcess() {\n        this.scriptNode.onaudioprocess = () => {\n            const time = this.getCurrentTime();\n\n            if (time >= this.getDuration()) {\n                this.setState(FINISHED);\n                this.fireEvent('pause');\n            } else if (time >= this.scheduledPause) {\n                this.pause();\n            } else if (this.state === this.states[PLAYING]) {\n                this.fireEvent('audioprocess', time);\n            }\n        };\n    }\n\n    /** @private */\n    removeOnAudioProcess() {\n        this.scriptNode.onaudioprocess = null;\n    }\n    /** Create analyser node to perform audio analysis */\n    createAnalyserNode() {\n        this.analyser = this.ac.createAnalyser();\n        this.analyser.connect(this.gainNode);\n    }\n\n    /**\n     * Create the gain node needed to control the playback volume.\n     *\n     */\n    createVolumeNode() {\n        // Create gain node using the AudioContext\n        if (this.ac.createGain) {\n            this.gainNode = this.ac.createGain();\n        } else {\n            this.gainNode = this.ac.createGainNode();\n        }\n        // Add the gain node to the graph\n        this.gainNode.connect(this.ac.destination);\n    }\n\n    /**\n     * Set the sink id for the media player\n     *\n     * @param {string} deviceId String value representing audio device id.\n     * @returns {Promise} A Promise that resolves to `undefined` when there\n     * are no errors.\n     */\n    setSinkId(deviceId) {\n        if (deviceId) {\n            /**\n             * The webaudio API doesn't currently support setting the device\n             * output. Here we create an HTMLAudioElement, connect the\n             * webaudio stream to that element and setSinkId there.\n             */\n            if (!this.sinkAudioElement) {\n                this.sinkAudioElement = new window.Audio();\n                // autoplay is necessary since we're not invoking .play()\n                this.sinkAudioElement.autoplay = true;\n            }\n            if (!this.sinkAudioElement.setSinkId) {\n                return Promise.reject(\n                    new Error('setSinkId is not supported in your browser')\n                );\n            }\n            if (!this.sinkStreamDestination) {\n                this.sinkStreamDestination = this.ac.createMediaStreamDestination();\n            }\n            this.gainNode.disconnect();\n            this.gainNode.connect(this.sinkStreamDestination);\n            this.sinkAudioElement.srcObject = this.sinkStreamDestination.stream;\n\n            return this.sinkAudioElement.setSinkId(deviceId);\n        } else {\n            return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n        }\n    }\n\n    /**\n     * Set the audio volume\n     *\n     * @param {number} value A floating point value between 0 and 1.\n     */\n    setVolume(value) {\n        this.gainNode.gain.setValueAtTime(value, this.ac.currentTime);\n    }\n\n    /**\n     * Get the current volume\n     *\n     * @return {number} value A floating point value between 0 and 1.\n     */\n    getVolume() {\n        return this.gainNode.gain.value;\n    }\n\n    /**\n     * Decode an array buffer and pass data to a callback\n     *\n     * @private\n     * @param {ArrayBuffer} arraybuffer The array buffer to decode\n     * @param {function} callback The function to call on complete.\n     * @param {function} errback The function to call on error.\n     */\n    decodeArrayBuffer(arraybuffer, callback, errback) {\n        if (!this.offlineAc) {\n            this.offlineAc = this.getOfflineAudioContext(\n                this.ac && this.ac.sampleRate ? this.ac.sampleRate : 44100\n            );\n        }\n        if ('webkitAudioContext' in window) {\n            // Safari: no support for Promise-based decodeAudioData enabled\n            // Enable it in Safari using the Experimental Features > Modern WebAudio API option\n            this.offlineAc.decodeAudioData(\n                arraybuffer,\n                data => callback(data),\n                errback\n            );\n        } else {\n            this.offlineAc.decodeAudioData(arraybuffer).then(\n                (data) => callback(data)\n            ).catch(\n                (err) => errback(err)\n            );\n        }\n    }\n\n    /**\n     * Set pre-decoded peaks\n     *\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\n     * @param {?number} duration Explicit duration\n     */\n    setPeaks(peaks, duration) {\n        if (duration != null) {\n            this.explicitDuration = duration;\n        }\n        this.peaks = peaks;\n    }\n\n    /**\n     * Set the rendered length (different from the length of the audio)\n     *\n     * @param {number} length The rendered length\n     */\n    setLength(length) {\n        // No resize, we can preserve the cached peaks.\n        if (this.mergedPeaks && length == 2 * this.mergedPeaks.length - 1 + 2) {\n            return;\n        }\n\n        this.splitPeaks = [];\n        this.mergedPeaks = [];\n        // Set the last element of the sparse array so the peak arrays are\n        // appropriately sized for other calculations.\n        const channels = this.buffer ? this.buffer.numberOfChannels : 1;\n        let c;\n        for (c = 0; c < channels; c++) {\n            this.splitPeaks[c] = [];\n            this.splitPeaks[c][2 * (length - 1)] = 0;\n            this.splitPeaks[c][2 * (length - 1) + 1] = 0;\n        }\n        this.mergedPeaks[2 * (length - 1)] = 0;\n        this.mergedPeaks[2 * (length - 1) + 1] = 0;\n    }\n\n    /**\n     * Compute the max and min value of the waveform when broken into <length> subranges.\n     *\n     * @param {number} length How many subranges to break the waveform into.\n     * @param {number} first First sample in the required range.\n     * @param {number} last Last sample in the required range.\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of arrays of\n     * peaks consisting of (max, min) values for each subrange.\n     */\n    getPeaks(length, first, last) {\n        if (this.peaks) {\n            return this.peaks;\n        }\n        if (!this.buffer) {\n            return [];\n        }\n\n        first = first || 0;\n        last = last || length - 1;\n\n        this.setLength(length);\n\n        if (!this.buffer) {\n            return this.params.splitChannels\n                ? this.splitPeaks\n                : this.mergedPeaks;\n        }\n\n        /**\n         * The following snippet fixes a buffering data issue on the Safari\n         * browser which returned undefined It creates the missing buffer based\n         * on 1 channel, 4096 samples and the sampleRate from the current\n         * webaudio context 4096 samples seemed to be the best fit for rendering\n         * will review this code once a stable version of Safari TP is out\n         */\n        if (!this.buffer.length) {\n            const newBuffer = this.createBuffer(1, 4096, this.sampleRate);\n            this.buffer = newBuffer.buffer;\n        }\n\n        const sampleSize = this.buffer.length / length;\n        const sampleStep = ~~(sampleSize / 10) || 1;\n        const channels = this.buffer.numberOfChannels;\n        let c;\n\n        for (c = 0; c < channels; c++) {\n            const peaks = this.splitPeaks[c];\n            const chan = this.buffer.getChannelData(c);\n            let i;\n\n            for (i = first; i <= last; i++) {\n                const start = ~~(i * sampleSize);\n                const end = ~~(start + sampleSize);\n                /**\n                 * Initialize the max and min to the first sample of this\n                 * subrange, so that even if the samples are entirely\n                 * on one side of zero, we still return the true max and\n                 * min values in the subrange.\n                 */\n                let min = chan[start];\n                let max = min;\n                let j;\n\n                for (j = start; j < end; j += sampleStep) {\n                    const value = chan[j];\n\n                    if (value > max) {\n                        max = value;\n                    }\n\n                    if (value < min) {\n                        min = value;\n                    }\n                }\n\n                peaks[2 * i] = max;\n                peaks[2 * i + 1] = min;\n\n                if (c == 0 || max > this.mergedPeaks[2 * i]) {\n                    this.mergedPeaks[2 * i] = max;\n                }\n\n                if (c == 0 || min < this.mergedPeaks[2 * i + 1]) {\n                    this.mergedPeaks[2 * i + 1] = min;\n                }\n            }\n        }\n\n        return this.params.splitChannels ? this.splitPeaks : this.mergedPeaks;\n    }\n\n    /**\n     * Get the position from 0 to 1\n     *\n     * @return {number} Position\n     */\n    getPlayedPercents() {\n        return this.state.getPlayedPercents.call(this);\n    }\n\n    /** @private */\n    disconnectSource() {\n        if (this.source) {\n            this.source.disconnect();\n        }\n    }\n    /**\n     * Destroy all references with WebAudio, disconnecting audio nodes and closing Audio Context\n     */\n    destroyWebAudio() {\n        this.disconnectFilters();\n        this.disconnectSource();\n        this.gainNode.disconnect();\n        this.scriptNode.disconnect();\n        this.analyser.disconnect();\n\n        // close the audioContext if closeAudioContext option is set to true\n        if (this.params.closeAudioContext) {\n            // check if browser supports AudioContext.close()\n            if (\n                typeof this.ac.close === 'function' &&\n                this.ac.state != 'closed'\n            ) {\n                this.ac.close();\n            }\n            // clear the reference to the audiocontext\n            this.ac = null;\n            // clear the actual audiocontext, either passed as param or the\n            // global singleton\n            if (!this.params.audioContext) {\n                window.WaveSurferAudioContext = null;\n            } else {\n                this.params.audioContext = null;\n            }\n            // clear the offlineAudioContext\n            window.WaveSurferOfflineAudioContext = null;\n        }\n\n        // disconnect resources used by setSinkId\n        if (this.sinkStreamDestination) {\n            this.sinkAudioElement.pause();\n            this.sinkAudioElement.srcObject = null;\n            this.sinkStreamDestination.disconnect();\n            this.sinkStreamDestination = null;\n        }\n    }\n    /**\n     * This is called when wavesurfer is destroyed\n     */\n    destroy() {\n        if (!this.isPaused()) {\n            this.pause();\n        }\n        this.unAll();\n        this.buffer = null;\n        this.destroyed = true;\n\n        this.destroyWebAudio();\n    }\n\n    /**\n     * Loaded a decoded audio buffer\n     *\n     * @param {Object} buffer Decoded audio buffer to load\n     */\n    load(buffer) {\n        this.startPosition = 0;\n        this.lastPlay = this.ac.currentTime;\n        this.buffer = buffer;\n        this.createSource();\n    }\n\n    /** @private */\n    createSource() {\n        this.disconnectSource();\n        this.source = this.ac.createBufferSource();\n\n        // adjust for old browsers\n        this.source.start = this.source.start || this.source.noteGrainOn;\n        this.source.stop = this.source.stop || this.source.noteOff;\n\n        this.setPlaybackRate(this.playbackRate);\n        this.source.buffer = this.buffer;\n        this.source.connect(this.analyser);\n    }\n\n    /**\n     * @private\n     *\n     * some browsers require an explicit call to #resume before they will play back audio\n     */\n    resumeAudioContext() {\n        if (this.ac.state == 'suspended') {\n            this.ac.resume && this.ac.resume();\n        }\n    }\n\n    /**\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n     *\n     * @return {boolean} Whether or not this backend is currently paused\n     */\n    isPaused() {\n        return this.state !== this.states[PLAYING];\n    }\n\n    /**\n     * Used by `wavesurfer.getDuration()`\n     *\n     * @return {number} Duration of loaded buffer\n     */\n    getDuration() {\n        if (this.explicitDuration) {\n            return this.explicitDuration;\n        }\n        if (!this.buffer) {\n            return 0;\n        }\n        return this.buffer.duration;\n    }\n\n    /**\n     * Used by `wavesurfer.seekTo()`\n     *\n     * @param {number} start Position to start at in seconds\n     * @param {number} end Position to end at in seconds\n     * @return {{start: number, end: number}} Object containing start and end\n     * positions\n     */\n    seekTo(start, end) {\n        if (!this.buffer) {\n            return;\n        }\n\n        this.scheduledPause = null;\n\n        if (start == null) {\n            start = this.getCurrentTime();\n            if (start >= this.getDuration()) {\n                start = 0;\n            }\n        }\n        if (end == null) {\n            end = this.getDuration();\n        }\n\n        this.startPosition = start;\n        this.lastPlay = this.ac.currentTime;\n\n        if (this.state === this.states[FINISHED]) {\n            this.setState(PAUSED);\n        }\n\n        return {\n            start: start,\n            end: end\n        };\n    }\n\n    /**\n     * Get the playback position in seconds\n     *\n     * @return {number} The playback position in seconds\n     */\n    getPlayedTime() {\n        return (this.ac.currentTime - this.lastPlay) * this.playbackRate;\n    }\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {number} start Start offset in seconds, relative to the beginning\n     * of a clip.\n     * @param {number} end When to stop relative to the beginning of a clip.\n     */\n    play(start, end) {\n        if (!this.buffer) {\n            return;\n        }\n\n        // need to re-create source on each playback\n        this.createSource();\n\n        const adjustedTime = this.seekTo(start, end);\n\n        start = adjustedTime.start;\n        end = adjustedTime.end;\n\n        this.scheduledPause = end;\n\n        this.source.start(0, start);\n\n        this.resumeAudioContext();\n\n        this.setState(PLAYING);\n\n        this.fireEvent('play');\n    }\n\n    /**\n     * Pauses the loaded audio.\n     */\n    pause() {\n        this.scheduledPause = null;\n\n        this.startPosition += this.getPlayedTime();\n        try {\n            this.source && this.source.stop(0);\n        } catch (err) {\n            // Calling stop can throw the following 2 errors:\n            // - RangeError (The value specified for when is negative.)\n            // - InvalidStateNode (The node has not been started by calling start().)\n            // We can safely ignore both errors, because:\n            // - The range is surely correct\n            // - The node might not have been started yet, in which case we just want to carry on without causing any trouble.\n        }\n\n        this.setState(PAUSED);\n\n        this.fireEvent('pause');\n    }\n\n    /**\n     * Returns the current time in seconds relative to the audio-clip's\n     * duration.\n     *\n     * @return {number} The current time in seconds\n     */\n    getCurrentTime() {\n        return this.state.getCurrentTime.call(this);\n    }\n\n    /**\n     * Returns the current playback rate. (0=no playback, 1=normal playback)\n     *\n     * @return {number} The current playback rate\n     */\n    getPlaybackRate() {\n        return this.playbackRate;\n    }\n\n    /**\n     * Set the audio source playback rate.\n     *\n     * @param {number} value The playback rate to use\n     */\n    setPlaybackRate(value) {\n        this.playbackRate = value || 1;\n        this.source && this.source.playbackRate.setValueAtTime(\n            this.playbackRate,\n            this.ac.currentTime\n        );\n    }\n\n    /**\n     * Set a point in seconds for playback to stop at.\n     *\n     * @param {number} end Position to end at\n     * @version 3.3.0\n     */\n    setPlayEnd(end) {\n        this.scheduledPause = end;\n    }\n}\n", "/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing. The function also has a property 'clear' \n * that is a function which will clear the timer to prevent previously scheduled executions. \n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */\nfunction debounce(func, wait, immediate){\n  var timeout, args, context, timestamp, result;\n  if (null == wait) wait = 100;\n\n  function later() {\n    var last = Date.now() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    }\n  };\n\n  var debounced = function(){\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n\n  debounced.clear = function() {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n  \n  debounced.flush = function() {\n    if (timeout) {\n      result = func.apply(context, args);\n      context = args = null;\n      \n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n\n  return debounced;\n};\n\n// Adds compatibility for ES modules\ndebounce.debounce = debounce;\n\nmodule.exports = debounce;\n", "// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n", "", "// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/wavesurfer.js\");\n", ""],
  "mappings": "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",
  "names": ["__webpack_require__", "CanvasEntry", "wave", "waveCtx", "progress", "progressCtx", "start", "end", "id", "getId", "constructor", "name", "toLowerCase", "canvasContextAttributes", "element", "getContext", "elementWidth", "totalWidth", "width", "height", "offsetLeft", "elementSize", "style", "hasProgressCanvas", "clearRect", "canvas", "waveColor", "progressColor", "fillStyle", "getFillStyle", "ctx", "color", "CanvasGradient", "waveGradient", "createLinearGradient", "forEach", "value", "index", "addColorStop", "length", "vertical", "setTransform", "x", "y", "radius", "fillRectToContext", "drawRoundedRect", "fillRect", "beginPath", "moveTo", "lineTo", "quadraticCurveTo", "closePath", "fill", "peaks", "absmax", "halfH", "offsetY", "drawLineToContext", "first", "Math", "round", "last", "canvasStart", "canvasEnd", "scale", "halfOffset", "absmaxHalf", "i", "peak", "h", "halfPixel", "j", "format", "quality", "type", "Promise", "resolve", "toBlob", "toDataURL", "Drawer", "container", "params", "util", "withOrientation", "pixelRatio", "lastPos", "wrapper", "el", "styles", "appendChild", "document", "createElement", "display", "position", "userSelect", "webkitUserSelect", "fillParent", "scrollParent", "cursor", "hideCursor", "overflowX", "hideScrollbar", "overflowY", "setupWrapperEvents", "e", "noPrevent", "preventDefault", "clientX", "targetTouches", "bbox", "getBoundingClientRect", "nominalWidth", "parentWidth", "getWidth", "progressPixels", "getProgressPixels", "scrollLeft", "scrollWidth", "clamp", "wrapperBbox", "rtl", "right", "left", "addEventListener", "orientedEvent", "scrollbarHeight", "offsetHeight", "clientHeight", "clientY", "bottom", "interact", "fireEvent", "handleEvent", "setWidth", "clearWave", "barWidth", "drawBars", "drawWave", "percent", "recenterOnPosition", "immediate", "half", "clientWidth", "maxScroll", "target", "offset", "rate", "autoCenterRate", "max", "min", "newWidth", "updateSize", "minPxDelta", "pos", "autoCenter", "newPos", "autoCenterImmediately", "updateProgress", "unAll", "parentNode", "domElement", "removeChild", "channelIndex", "Observer", "MultiCanvas", "maxCanvasWidth", "maxCanvasElementWidth", "canvases", "progressWave", "EntryClass", "drawingContextAttributes", "overlap", "ceil", "barRadius", "createWrapper", "createElements", "zIndex", "top", "overflow", "boxSizing", "borderRightStyle", "pointerEvents", "addCanvas", "updateCursor", "borderRightWidth", "cursorWidth", "borderRightColor", "cursorColor", "requiredCanvases", "removeCanvas", "canvasWidth", "lastCanvas", "entry", "updateDimensions", "leftOffset", "initWave", "initProgress", "push", "lastEntry", "parentElement", "destroy", "pop", "frame", "prepareDraw", "hasMinVals", "ch", "undefined", "peakIndexScale", "bar", "gap", "barGap", "step", "peakIndex", "peakIndexRange", "floor", "peakIndexEnd", "newPeak", "abs", "barMinHeight", "reflectedPeaks", "len", "drawLine", "splitChannelsOptions", "channelColors", "setFillStyles", "applyCanvasTransforms", "drawLines", "startCanvas", "endCanvas", "intersection", "x1", "y1", "x2", "y2", "fillRects", "splitChannels", "filterChannels", "includes", "fn", "drawIndex", "normalizedMax", "Array", "channels", "filteredChannels", "filter", "c", "hideChannel", "overlay", "setHeight", "overallAbsMax", "relativeNormalization", "map", "channelPeaks", "absMax", "indexOf", "barHeight", "normalize", "some", "call", "val", "all", "getImage", "images", "MediaElementWebAudio", "sourceMediaElement", "setPlaybackRate", "audioRate", "createTimer", "createVolumeNode", "createScriptNode", "createAnalyserNode", "media", "preload", "createMediaElementSource", "mediaElement", "ac", "connect", "analyser", "resumeAudioContext", "destroyWebAudio", "MediaElement", "currentTime", "duration", "paused", "playbackRate", "play", "pause", "volume", "mediaType", "elementPosition", "isMuted", "buffer", "onPlayEnd", "mediaListeners", "error", "canplay", "ended", "seeked", "event", "volumechange", "muted", "Object", "keys", "removeEventListener", "onAudioProcess", "isPaused", "getCurrentTime", "on", "url", "controls", "mediaControls", "autoplay", "src", "prevMedia", "querySelector", "_load", "elt", "HTMLMediaElement", "Error", "load", "_setupMediaListeners", "setVolume", "explicitDuration", "Infinity", "seekable", "getDuration", "isNaN", "clearPlayEnd", "seekTo", "promise", "setPlayEnd", "_onPlayEnd", "time", "un", "deviceId", "setSinkId", "reject", "destroyed", "removeMediaElementOnDestroy", "WebAudio", "PeakCache", "clearPeakCache", "peakCacheRanges", "peakCacheLength", "uncachedRanges", "item", "arr", "concat", "sort", "a", "b", "uncachedRangePairs", "peakCacheRangePairs", "values", "utilMax", "utilmin", "ProgressHandler", "instance", "contentLength", "response", "_reader", "body", "getReader", "total", "parseInt", "loaded", "controller", "read", "then", "done", "onProgress", "lengthComputable", "close", "byteLength", "enqueue", "catch", "fetchFile", "options", "fetchHeaders", "Headers", "fetchRequest", "Request", "AbortController", "requestHeaders", "header", "append", "key", "responseType", "fetchOptions", "method", "headers", "mode", "credentials", "cache", "redirect", "referrer", "signal", "fetch", "progressAvailable", "get", "Response", "ReadableStream", "errMsg", "ok", "arrayBuffer", "json", "blob", "text", "status", "func", "args", "reqAnimationFrame", "prefix", "random", "toString", "substring", "largest", "smallest", "Number", "_disabledEventEmissions", "handlers", "callback", "splice", "handler", "apply", "setTimeout", "eventNames", "_isDisabledEventEmission", "verticalPropMap", "offsetTop", "offsetWidth", "mapProp", "prop", "prototype", "hasOwnProperty", "isProxy", "Symbol", "Proxy", "obj", "receiver", "bind", "set", "preventClickHandler", "stopPropagation", "preventClick", "window", "requestAnimationFrame", "webkitRequestAnimationFrame", "mozRequestAnimationFrame", "oRequestAnimationFrame", "msRequestAnimationFrame", "ignoreSilenceMode", "audioData", "tmp", "innerHTML", "audioSilentMode", "children", "disableRemotePlayback", "remove", "PluginClass", "ws", "WaveSurfer", "audioContext", "audioScriptProcessor", "backend", "backgroundColor", "dragSelection", "desynchronized", "forceDecode", "loopSelection", "mediaContainer", "minPxPerSec", "partialRender", "devicePixelRatio", "screen", "deviceXDPI", "logicalXDPI", "plugins", "renderer", "responsive", "skipLength", "splitDragSelection", "xhr", "assign", "defaultParams", "transform", "setBackgroundColor", "savedVolume", "tmpEvents", "currentRequest", "arraybuffer", "drawer", "peakCache", "supportsWebAudio", "Backend", "backends", "initialisedPluginList", "isDestroyed", "isReady", "prevWidth", "_onResize", "debounce", "registerPlugins", "createDrawer", "createBackend", "createPeakCache", "plugin", "addPlugin", "deferInit", "initPlugin", "staticProps", "pluginStaticProp", "Instance", "observerPrototypeKeys", "getOwnPropertyNames", "destroyPlugin", "init", "drawBuffer", "getPlayedPercents", "newVolume", "getVolume", "seconds", "skip", "seekAndCenter", "recenter", "isFinite", "isWebAudioBackend", "oldScrollParent", "getPlaybackRate", "setMute", "mute", "filters", "channelIdx", "background", "channelIndices", "newRanges", "addRangeToPeakCache", "getPeaks", "drawPeaks", "pxPerSec", "decodeArrayBuffer", "data", "loadDecodedBuffer", "reader", "FileReader", "loadArrayBuffer", "result", "readAsArrayBuffer", "empty", "preloadIgnoreReasons", "activeReasons", "reason", "console", "warn", "join", "loadBuffer", "loadMediaElement", "action", "once", "getArrayBuffer", "setPeaks", "urlOrElt", "loadElt", "err", "request", "percentComplete", "accuracy", "noWindow", "blobJSON", "Blob", "JSON", "stringify", "objURL", "URL", "createObjectURL", "open", "revokeObjectURL", "cancel", "abort", "stop", "disconnectSource", "cancelAjax", "clearTmpEvents", "destroyAllPlugins", "wavesurfer", "__VERSION__", "PLAYING", "PAUSED", "FINISHED", "addOnAudioProcess", "startPosition", "getPlayedTime", "removeOnAudioProcess", "getAudioContext", "lastPlay", "scheduledPause", "states", "create", "stateBehaviors", "gainNode", "mergedPeaks", "offlineAc", "scriptNode", "source", "splitPeaks", "state", "sinkStreamDestination", "sinkAudioElement", "AudioContext", "webkitAudioContext", "WaveSurferAudioContext", "sampleRate", "WaveSurferOfflineAudioContext", "OfflineAudioContext", "webkitOfflineAudioContext", "setState", "setLength", "disconnect", "setFilters", "disconnectFilters", "reduce", "prev", "curr", "createScriptProcessor", "scriptBufferSize", "createJavaScriptNode", "destination", "onaudioprocess", "createAnalyser", "createGain", "createGainNode", "Audio", "createMediaStreamDestination", "srcObject", "stream", "gain", "setValueAtTime", "errback", "getOfflineAudioContext", "decodeAudioData", "numberOfChannels", "newBuffer", "createBuffer", "sampleSize", "sampleStep", "chan", "getChannelData", "closeAudioContext", "createSource", "createBufferSource", "noteGrainOn", "noteOff", "resume", "adjustedTime", "module"]
}
