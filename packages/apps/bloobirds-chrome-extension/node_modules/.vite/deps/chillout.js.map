{
  "version": 3,
  "sources": ["../../../../../../node_modules/chillout/src/util.js", "../../../../../../node_modules/chillout/src/iterator.js", "../../../../../../node_modules/chillout/src/stop-iteration.js", "../../../../../../node_modules/chillout/src/next-tick.js", "../../../../../../node_modules/chillout/src/iterate.js", "../../../../../../node_modules/chillout/src/index.js"],
  "sourcesContent": ["exports.isThenable = function isThenable(x) {\n  return x != null && typeof x.then === 'function';\n};\n\nexports.isArrayLike = function isArrayLike(x) {\n  return x != null && typeof x.length === 'number' && x.length >= 0;\n};\n", "const { isArrayLike } = require('./util');\n\nexports.forEach = function(obj, callback, context) {\n  let i = 0;\n  let len;\n\n  if (isArrayLike(obj)) {\n    len = obj.length;\n\n    return {\n      next() {\n        if (i >= len) {\n          return [true, null];\n        }\n\n        const value = callback.call(context, obj[i], i, obj);\n        i++;\n        return [false, value];\n      }\n    };\n  }\n\n  const keys = Object.keys(obj);\n  len = keys.length;\n\n  return {\n    next() {\n      if (i >= len) {\n        return [true, null];\n      }\n\n      const key = keys[i++];\n      const value = callback.call(context, obj[key], key, obj);\n      return [false, value];\n    }\n  };\n};\n\nexports.repeat = function(count, callback, context) {\n  let i;\n  let step;\n  let done;\n\n  if (count && typeof count === 'object') {\n    i = count.start || 0;\n    step = count.step || 1;\n    done = count.done;\n  } else {\n    i = 0;\n    step = 1;\n    done = count;\n  }\n\n  return {\n    next() {\n      const value = callback.call(context, i);\n\n      i += step;\n      if (i >= done) {\n        return [true, value];\n      }\n      return [false, value];\n    }\n  };\n};\n\nexports.until = function(callback, context) {\n  return {\n    next() {\n      const value = callback.call(context);\n      return [false, value];\n    }\n  };\n};\n\nexports.forOf = function(iterable, callback, context) {\n  const it = iterable[Symbol.iterator]();\n\n  return {\n    next() {\n      const nextIterator = it.next();\n\n      if (nextIterator.done) {\n        return [true, null];\n      }\n      const value = callback.call(context, nextIterator.value, iterable);\n      return [false, value];\n    }\n  };\n};\n", "const StopIteration = {};\nmodule.exports = StopIteration;\n", "const nextTick = (() => {\n  if (typeof setImmediate === 'function') {\n    return task => {\n      setImmediate(task);\n    };\n  }\n\n  if (typeof process === 'object' && typeof process.nextTick === 'function') {\n    return task => {\n      process.nextTick(task);\n    };\n  }\n\n  if (typeof MessageChannel === 'function') {\n    // http://www.nonblocking.io/2011/06/windownexttick.html\n    const channel = new MessageChannel();\n    let head = {};\n    let tail = head;\n\n    channel.port1.onmessage = () => {\n      head = head.next;\n      const task = head.task;\n      delete head.task;\n      task();\n    };\n\n    return task => {\n      tail = tail.next = { task };\n      channel.port2.postMessage(0);\n    };\n  }\n\n  return task => {\n    setTimeout(task, 0);\n  };\n})();\n\nmodule.exports = nextTick;\n", "const { isThenable } = require('./util');\nconst StopIteration = require('./stop-iteration');\nconst nextTick = require('./next-tick');\n\nconst MAX_DELAY = 1500;\n\nmodule.exports = function iterate(it, interval = 0) {\n  return new Promise((resolve, reject) => {\n    let totalTime = 0;\n\n    function doIterate() {\n      const cycleStartTime = Date.now();\n      let cycleEndTime;\n\n      try {\n        for (;;) {\n          const [isStop, value] = it.next();\n\n          if (isThenable(value)) {\n            value.then(awaitedValue => {\n              if (isStop) {\n                resolve(awaitedValue);\n              } else if (awaitedValue === StopIteration) {\n                resolve();\n              } else {\n                doIterate();\n              }\n            }, reject);\n            return;\n          }\n\n          if (isStop) {\n            resolve(value);\n            return;\n          }\n          if (value === StopIteration) {\n            resolve();\n            return;\n          }\n\n          if (interval > 0) {\n            break;\n          }\n\n          const endTime = Date.now();\n          cycleEndTime = endTime - cycleStartTime;\n          totalTime += cycleEndTime;\n\n          // Break the loop when the process is continued for more than 1s\n          if (totalTime > 1000) {\n            break;\n          }\n\n          // Delay is not required for fast iteration\n          if (cycleEndTime < 10) {\n            continue;\n          }\n          break;\n        }\n      } catch (e) {\n        reject(e);\n        return;\n      }\n\n      if (interval > 0) {\n        // Short timeouts will throttled to >=4ms by the browser, so we execute tasks\n        // slowly enough to reduce CPU load\n        const delay =  Math.min(MAX_DELAY, Date.now() - cycleStartTime + interval);\n        setTimeout(doIterate, delay);\n      } else {\n        // Add delay corresponding to the processing speed\n        const delay = Math.min(MAX_DELAY, cycleEndTime / 3);\n        totalTime = 0;\n\n        if (delay > 10) {\n          setTimeout(doIterate, delay);\n        } else {\n          nextTick(doIterate);\n        }\n      }\n    }\n\n    // The first call doesn't need to wait, so it will execute a task immediately\n    nextTick(doIterate);\n  });\n};\n", "const iterator = require('./iterator');\nconst iterate = require('./iterate');\nconst { isThenable, isArrayLike } = require('./util');\nconst nextTick = require('./next-tick');\nconst StopIteration = require('./stop-iteration');\n\nexports.version = require('../package.json').version;\n\n/**\n * Executes a provided function once per array or object element.\n * The iteration will break if the callback function returns `chillout.StopIteration`,\n *  or an error occurs.\n * This method can be called like JavaScript `Array forEach`.\n *\n * @param {array|object} obj Target array or object\n * @param {function} callback Function to execute for each element, taking three arguments:\n * - value: The current element being processed in the array/object\n * - key: The key of the current element being processed in the array/object\n * - obj: The array/object that `forEach` is being applied to\n * @param {object} [context] Value to use as `this` when executing callback\n * @return {promise} Return new Promise\n */\nexports.forEach = function forEach(obj, callback, context) {\n  return iterate(iterator.forEach(obj, callback, context));\n};\n\n/**\n * Executes a provided function the specified number times.\n * The iteration will break if the callback function returns `chillout.StopIteration`,\n *  or an error occurs.\n * This method can be called like JavaScript `for` statement.\n *\n * @param {number|object} count The number of times or object for execute the\n *   function. Following parameters are available if specify object:\n * - start: The number of start\n * - step: The number of step\n * - end: The number of end\n * @param {function} callback Function to execute for each times, taking one argument:\n * - i: The current number\n * @param {object} [context] Value to use as `this` when executing callback\n * @return {promise} Return new Promise\n */\nexports.repeat = function repeat(count, callback, context) {\n  return iterate(iterator.repeat(count, callback, context));\n};\n\n/**\n * Executes a provided function until the `callback` returns `chillout.StopIteration`,\n *  or an error occurs.\n * This method can be called like JavaScript `while (true) { ... }` statement.\n *\n * @param {function} callback The function that is executed for each iteration\n * @param {object} [context] Value to use as `this` when executing callback\n * @return {promise} Return new Promise\n */\nexports.until = function until(callback, context) {\n  return iterate(iterator.until(callback, context));\n};\n\n// Minimum setTimeout interval for waitUntil\nconst WAIT_UNTIL_INTERVAL = 13;\n\n/**\n * Executes a provided function until the `callback` returns `chillout.StopIteration`,\n *  or an error occurs.\n * This method can be called like JavaScript `while (true) { ... }` statement,\n *  and it works same as `until`, but it executes tasks with more slowly interval\n *  than `until` to reduce CPU load.\n * This method is useful when you want to wait until some processing done.\n *\n * @param {function} callback The function that is executed for each iteration\n * @param {object} [context] Value to use as `this` when executing callback\n * @return {promise} Return new Promise\n */\nexports.waitUntil = function waitUntil(callback, context) {\n  return iterate(iterator.until(callback, context), WAIT_UNTIL_INTERVAL);\n};\n\n/**\n * Iterates the iterable objects, similar to the `for-of` statement.\n * Executes a provided function once per element.\n * The iteration will break if the callback function returns `chillout.StopIteration`,\n *   or an error occurs.\n *\n * @param {array|string|object} iterable Target iterable objects\n * @param {function} callback Function to execute for each element, taking one argument:\n * - value: A value of a property on each iteration\n * @param {object} [context] Value to use as `this` when executing callback\n * @return {promise} Return new Promise\n */\nexports.forOf = function forOf(iterable, callback, context) {\n  return iterate(iterator.forOf(iterable, callback, context));\n};\n\n// If you want to stop the loops, return this StopIteration\n// it works like 'break' statement in JavaScript 'for' statement\nexports.StopIteration = StopIteration;\n\n// Exports core methods for user defining other iterations by using chillout\nexports.iterate = iterate;\nexports.iterator = iterator;\nexports.isThenable = isThenable;\nexports.isArrayLike = isArrayLike;\nexports.nextTick = nextTick;\n"],
  "mappings": "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",
  "names": []
}
