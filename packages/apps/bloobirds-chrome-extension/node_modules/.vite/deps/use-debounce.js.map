{
  "version": 3,
  "sources": ["../../../../../../node_modules/use-debounce/esm/useDebounce.js", "../../../../../../node_modules/use-debounce/esm/useDebouncedCallback.js", "../../../../../../node_modules/use-debounce/esm/useThrottledCallback.js"],
  "sourcesContent": ["import { useCallback, useEffect, useRef, useState } from 'react';\nimport useDebouncedCallback from './useDebouncedCallback';\nfunction valueEquality(left, right) {\n    return left === right;\n}\nfunction adjustFunctionValueOfSetState(value) {\n    return typeof value === 'function' ? function () { return value; } : value;\n}\nfunction useStateIgnoreCallback(initialState) {\n    var _a = useState(adjustFunctionValueOfSetState(initialState)), state = _a[0], setState = _a[1];\n    var setStateIgnoreCallback = useCallback(function (value) { return setState(adjustFunctionValueOfSetState(value)); }, []);\n    return [state, setStateIgnoreCallback];\n}\nexport default function useDebounce(value, delay, options) {\n    var eq = (options && options.equalityFn) || valueEquality;\n    var _a = useStateIgnoreCallback(value), state = _a[0], dispatch = _a[1];\n    var debounced = useDebouncedCallback(useCallback(function (value) { return dispatch(value); }, [dispatch]), delay, options);\n    var previousValue = useRef(value);\n    useEffect(function () {\n        // We need to use this condition otherwise we will run debounce timer for the first render (including maxWait option)\n        if (!eq(previousValue.current, value)) {\n            debounced.callback(value);\n            previousValue.current = value;\n        }\n    }, [value, debounced, eq]);\n    return [state, { cancel: debounced.cancel, pending: debounced.pending, flush: debounced.flush }];\n}\n", "import { useRef, useCallback, useEffect, useMemo } from 'react';\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn. The debounced function\n * comes with a `cancel` method to cancel delayed `func` invocations and a\n * `flush` method to immediately invoke them. Provide `options` to indicate\n * whether `func` should be invoked on the leading and/or trailing edge of the\n * `wait` timeout. The `func` is invoked with the last arguments provided to the\n * debounced function. Subsequent calls to the debounced function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available, otherwise it will be setTimeout(...,0)).\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * const resizeHandler = useDebouncedCallback(calculateLayout, 150);\n * window.addEventListener('resize', resizeHandler)\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * const clickHandler = useDebouncedCallback(sendMail, 300, {\n *   leading: true,\n *   trailing: false,\n * })\n * <button onClick={clickHandler}>click me</button>\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = useDebouncedCallback(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * source.addEventListener('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * window.addEventListener('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.pending() ? \"Pending...\" : \"Ready\"\n */\nexport default function useDebouncedCallback(func, wait, options) {\n    var _this = this;\n    var lastCallTime = useRef(null);\n    var lastInvokeTime = useRef(0);\n    var timerId = useRef(null);\n    var lastArgs = useRef([]);\n    var lastThis = useRef();\n    var result = useRef();\n    var funcRef = useRef(func);\n    var mounted = useRef(true);\n    funcRef.current = func;\n    // Bypass `requestAnimationFrame` by explicitly setting `wait=0`.\n    var useRAF = !wait && wait !== 0 && typeof window !== 'undefined';\n    if (typeof func !== 'function') {\n        throw new TypeError('Expected a function');\n    }\n    wait = +wait || 0;\n    options = options || {};\n    var leading = !!options.leading;\n    var trailing = 'trailing' in options ? !!options.trailing : true; // `true` by default\n    var maxing = 'maxWait' in options;\n    var maxWait = maxing ? Math.max(+options.maxWait || 0, wait) : null;\n    var invokeFunc = useCallback(function (time) {\n        var args = lastArgs.current;\n        var thisArg = lastThis.current;\n        lastArgs.current = lastThis.current = null;\n        lastInvokeTime.current = time;\n        return (result.current = funcRef.current.apply(thisArg, args));\n    }, []);\n    var startTimer = useCallback(function (pendingFunc, wait) {\n        if (useRAF)\n            cancelAnimationFrame(timerId.current);\n        timerId.current = useRAF ? requestAnimationFrame(pendingFunc) : setTimeout(pendingFunc, wait);\n    }, [useRAF]);\n    var shouldInvoke = useCallback(function (time) {\n        if (!mounted.current)\n            return false;\n        var timeSinceLastCall = time - lastCallTime.current;\n        var timeSinceLastInvoke = time - lastInvokeTime.current;\n        // Either this is the first call, activity has stopped and we're at the\n        // trailing edge, the system time has gone backwards and we're treating\n        // it as the trailing edge, or we've hit the `maxWait` limit.\n        return (!lastCallTime.current ||\n            timeSinceLastCall >= wait ||\n            timeSinceLastCall < 0 ||\n            (maxing && timeSinceLastInvoke >= maxWait));\n    }, [maxWait, maxing, wait]);\n    var trailingEdge = useCallback(function (time) {\n        timerId.current = null;\n        // Only invoke if we have `lastArgs` which means `func` has been\n        // debounced at least once.\n        if (trailing && lastArgs.current) {\n            return invokeFunc(time);\n        }\n        lastArgs.current = lastThis.current = null;\n        return result.current;\n    }, [invokeFunc, trailing]);\n    var timerExpired = useCallback(function () {\n        var time = Date.now();\n        if (shouldInvoke(time)) {\n            return trailingEdge(time);\n        }\n        // https://github.com/xnimorz/use-debounce/issues/97\n        if (!mounted.current) {\n            return;\n        }\n        // Remaining wait calculation\n        var timeSinceLastCall = time - lastCallTime.current;\n        var timeSinceLastInvoke = time - lastInvokeTime.current;\n        var timeWaiting = wait - timeSinceLastCall;\n        var remainingWait = maxing ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;\n        // Restart the timer\n        startTimer(timerExpired, remainingWait);\n    }, [maxWait, maxing, shouldInvoke, startTimer, trailingEdge, wait]);\n    var cancel = useCallback(function () {\n        if (timerId.current) {\n            useRAF ? cancelAnimationFrame(timerId.current) : clearTimeout(timerId.current);\n        }\n        lastInvokeTime.current = 0;\n        lastArgs.current = lastCallTime.current = lastThis.current = timerId.current = null;\n    }, [useRAF]);\n    var flush = useCallback(function () {\n        return !timerId.current ? result.current : trailingEdge(Date.now());\n    }, [trailingEdge]);\n    useEffect(function () {\n        mounted.current = true;\n        return function () {\n            mounted.current = false;\n        };\n    }, []);\n    var debounced = useCallback(function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var time = Date.now();\n        var isInvoking = shouldInvoke(time);\n        lastArgs.current = args;\n        lastThis.current = _this;\n        lastCallTime.current = time;\n        if (isInvoking) {\n            if (!timerId.current && mounted.current) {\n                // Reset any `maxWait` timer.\n                lastInvokeTime.current = lastCallTime.current;\n                // Start the timer for the trailing edge.\n                startTimer(timerExpired, wait);\n                // Invoke the leading edge.\n                return leading ? invokeFunc(lastCallTime.current) : result.current;\n            }\n            if (maxing) {\n                // Handle invocations in a tight loop.\n                startTimer(timerExpired, wait);\n                return invokeFunc(lastCallTime.current);\n            }\n        }\n        if (!timerId.current) {\n            startTimer(timerExpired, wait);\n        }\n        return result.current;\n    }, [invokeFunc, leading, maxing, shouldInvoke, startTimer, timerExpired, wait]);\n    var pending = useCallback(function () {\n        return !!timerId.current;\n    }, []);\n    var debouncedState = useMemo(function () { return ({\n        callback: debounced,\n        cancel: cancel,\n        flush: flush,\n        pending: pending,\n    }); }, [debounced, cancel, flush, pending]);\n    return debouncedState;\n}\n", "import useDebouncedCallback from './useDebouncedCallback';\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds (or once per browser frame). The throttled function\n * comes with a `cancel` method to cancel delayed `func` invocations and a\n * `flush` method to immediately invoke them. Provide `options` to indicate\n * whether `func` should be invoked on the leading and/or trailing edge of the\n * `wait` timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `throttle` and `debounce`.\n *\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0]\n *  The number of milliseconds to throttle invocations to; if omitted,\n *  `requestAnimationFrame` is used (if available, otherwise it will be setTimeout(...,0)).\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * const scrollHandler = useThrottledCallback(updatePosition, 100)\n * window.addEventListener('scroll', scrollHandler)\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * const { callback } = useThrottledCallback(renewToken, 300000, { 'trailing': false })\n * <button onClick={callback}>click</button>\n *\n * // Cancel the trailing throttled invocation.\n * window.addEventListener('popstate', throttled.cancel);\n */\nexport default function useThrottledCallback(func, wait, _a) {\n    var _b = _a === void 0 ? {} : _a, _c = _b.leading, leading = _c === void 0 ? true : _c, _d = _b.trailing, trailing = _d === void 0 ? true : _d;\n    return useDebouncedCallback(func, wait, {\n        maxWait: wait,\n        leading: leading,\n        trailing: trailing,\n    });\n}\n"],
  "mappings": "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",
  "names": ["import_react", "wait", "value"]
}
