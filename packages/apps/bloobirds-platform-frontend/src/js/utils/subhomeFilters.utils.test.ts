// Generated by CodiumAI
import { BobjectTypes } from '@bloobirds-it/types';
import { SearchType } from '../typings/subhomeFilters';
import { transformQuickFiltersToFilters } from './subhomeFilters.utils';

describe('transformQuickFiltersToFilters_function', () => {
  // Tests that the function transforms quick filters to filters when all arrays are non-empty. Tags: [happy path]
  it('test_transform_quick_filters_to_filters_with_non_empty_arrays', () => {
    const filters = [
      {
        bobjectFieldId: 'field1',
        values: [
          { searchType: SearchType.EXACT, bobjectPicklistValue: 'value1' },
          { searchType: SearchType.EXACT, bobjectPicklistValue: 'value2' },
        ],
      },
      {
        bobjectFieldId: 'field2',
        values: [{ searchType: SearchType.EXACT, bobjectPicklistValue: 'value3' }],
      },
    ];
    const bobjectFields = new Map([
      ['field1', { bobjectType: BobjectTypes.Lead }],
      ['field2', { bobjectType: BobjectTypes.Company }],
    ]);
    const bobjectTypes = new Map([
      [BobjectTypes.Lead, { name: 'Lead' }],
      [BobjectTypes.Company, { name: 'Company' }],
    ]);

    const expectedOutput = {
      ['Lead']: {
        field1: {
          query: ['value1', 'value2'],
          searchMode: 'EXACT__SEARCH',
        },
      },
      ['Company']: {
        field2: {
          query: 'value3',
          searchMode: 'EXACT__SEARCH',
        },
      },
    };

    expect(transformQuickFiltersToFilters(filters, bobjectFields, bobjectTypes)).toEqual(
      expectedOutput,
    );
  });

  it('test_transform_quick_filters_to_filters_with_null_or_undefined_values', () => {
    const filters = [
      {
        bobjectFieldId: 'field1',
        // @ts-ignore
        values: null,
      },
      {
        bobjectFieldId: 'field2',
        // @ts-ignore
        values: undefined,
      },
    ];
    const bobjectFields = new Map([
      ['field1', { bobjectType: BobjectTypes.Lead }],
      ['field2', { bobjectType: BobjectTypes.Company }],
    ]);
    const bobjectTypes = new Map([
      [BobjectTypes.Lead, { name: 'Lead' }],
      [BobjectTypes.Company, { name: 'Company' }],
    ]);

    const expectedOutput = {};

    expect(transformQuickFiltersToFilters(filters, bobjectFields, bobjectTypes)).toEqual(
      expectedOutput,
    );
  });

  it('test_transform_quick_filters_to_filters_with_empty_parsed_values_array', () => {
    const filters = [
      {
        bobjectFieldId: 'field1',
        // @ts-ignore
        values: [],
      },
    ];
    const bobjectFields = new Map([['field1', { bobjectType: BobjectTypes.Lead }]]);
    const bobjectTypes = new Map([[BobjectTypes.Lead, { name: 'Lead' }]]);

    const expectedOutput = {};

    expect(transformQuickFiltersToFilters(filters, bobjectFields, bobjectTypes)).toEqual(
      expectedOutput,
    );
  });
});
