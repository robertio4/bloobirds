// Generated by CodiumAI

/*
Code Analysis

Objective:
The LoginRoute function is a React component that renders a login form with email and password inputs, a Google SSO button, and a terms and conditions checkbox. Its objective is to handle user authentication by submitting the form data to the server or by using the Google SSO feature.

Inputs:
- None

Flow:
1. The function initializes the useForm hook to manage the form state and validation.
2. It defines state variables to manage the terms and conditions checkbox and the response errors from the server.
3. It uses the useGoogleLogin hook to handle the Google SSO feature.
4. It defines a submit handler function that validates the form data, sets error messages if necessary, and sends the data to the server for authentication.
5. The function renders the login form with the email and password inputs, the Google SSO button, and the terms and conditions checkbox.

Outputs:
- The login form with email and password inputs, a Google SSO button, and a terms and conditions checkbox.
- Error messages if the form data is invalid or the server returns an error response.

Additional aspects:
- The function uses the @bloobirds-it/flamingo-ui library to render the UI components.
- It defines regular expressions to validate the email format.
- It uses the Controller component from the react-hook-form library to manage the form inputs.
- It defines utility functions to handle the authentication process with the server and the Google SSO feature.
*/
import { useGoogleLogin } from '@react-oauth/google';
import { fireEvent, render, waitFor } from '@testing-library/react';

import {
  login,
  socialLogin,
  successExtensionLogin,
  successLogin,
} from '../../../utils/authentication.ts';
import LoginRoute from './loginRoute.tsx';

import '../../../utils/urls.ts';

jest.mock('../../../utils/urls.ts', () => ({
  getApiUrl: jest.fn(() => 'http://api.test.com'),
  getAuthUrl: jest.fn(() => 'http://auth.test.com'),
  getAppUrl: jest.fn(() => 'http://app.test.com'),
  appUrls: {
    local: 'http://localhost:3000',
    development: 'https://app.dev-bloobirds.com',
    production: 'https://app.bloobirds.com',
  },
}));

describe('LoginRoute_function', () => {
  // Tests that a user can successfully log in with email and password.
  it('test_successful_login_with_email_and_password', async () => {
    // Mock the login function to return a successful response
    const mockLogin = jest.fn().mockResolvedValue({ success: true });
    //@ts-ignore
    login.mockImplementation(mockLogin);

    // Render the LoginRoute component
    const { getByPlaceholderText, getByText } = render(<LoginRoute />);

    // Fill in the email and password fields
    const emailInput = getByPlaceholderText('Email');
    const passwordInput = getByPlaceholderText('Password');
    fireEvent.change(emailInput, { target: { value: 'test@example.com' } });
    fireEvent.change(passwordInput, { target: { value: 'password123' } });

    // Click the login button
    const loginButton = getByText('Log in');
    fireEvent.click(loginButton);

    // Wait for the login function to be called and check that it was called with the correct arguments
    await waitFor(() =>
      expect(mockLogin).toHaveBeenCalledWith('test@example.com', 'password123', 'linkedin_ce'),
    );

    // Check that the successExtensionLogin and successLogin functions were called with the correct arguments
    expect(successExtensionLogin).toHaveBeenCalled();
    expect(successLogin).toHaveBeenCalled();
  });

  // Tests that a user can successfully log in with Google SSO.
  it('test_successful_login_with_google_sso', async () => {
    // Mock the useGoogleLogin hook to return a successful response
    const mockGoogleLogin = jest.fn().mockImplementation(options => {
      options.onSuccess({ access_token: 'test_token' });
    });
    //@ts-ignore
    useGoogleLogin.mockImplementation(mockGoogleLogin);

    // Mock the socialLogin function to return a successful response
    const mockSocialLogin = jest.fn().mockResolvedValue({ success: true });
    //@ts-ignore
    socialLogin.mockImplementation(mockSocialLogin);

    // Render the LoginRoute component
    const { getByText } = render(<LoginRoute />);

    // Click the Google SSO button
    const googleButton = getByText('Continue with Google');
    fireEvent.click(googleButton);

    // Wait for the socialLogin function to be called and check that it was called with the correct arguments
    await waitFor(() =>
      expect(mockSocialLogin).toHaveBeenCalledWith('test_token', 'GOOGLE', 'linkedin_ce'),
    );

    // Check that the successExtensionLogin and successLogin functions were called with the correct arguments
    expect(successExtensionLogin).toHaveBeenCalled();
    expect(successLogin).toHaveBeenCalled();
  });

  // Tests that an error message is displayed when the user enters an invalid email address.
  it('test_invalid_email_address', () => {
    // Render the LoginRoute component
    const { getByPlaceholderText, getByText } = render(<LoginRoute />);

    // Fill in an invalid email address
    const emailInput = getByPlaceholderText('Email');
    fireEvent.change(emailInput, { target: { value: 'invalid_email' } });

    // Click the login button
    const loginButton = getByText('Log in');
    fireEvent.click(loginButton);

    // Check that an error message is displayed
    const errorMessage = getByText('Invalid email address');
    expect(errorMessage).toBeInTheDocument();
  });

  // Tests that an error message is displayed when the user does not accept the terms and conditions.
  it('test_terms_and_conditions_not_accepted', () => {
    // Render the LoginRoute component
    const { getByText } = render(<LoginRoute />);

    // Click the login button without accepting the terms and conditions
    const loginButton = getByText('Log in');
    fireEvent.click(loginButton);

    // Check that an error message is displayed
    const errorMessage = getByText('You must accept the terms and conditions');
    expect(errorMessage).toBeInTheDocument();
  });

  // Tests that the terms and conditions checkbox is clickable.
  it('test_terms_and_conditions_checkbox_clickable', () => {
    // Render the LoginRoute component
    const { getByLabelText } = render(<LoginRoute />);

    // Click the terms and conditions checkbox
    const checkbox = getByLabelText('I accept the terms and conditions');
    fireEvent.click(checkbox);

    // Check that the checkbox is checked
    //expect(checkbox.checked).toBe(true);
  });

  // Tests that an error message is displayed when the server returns a 401 error on login attempt.
  it('test_login_attempt_fails', async () => {
    // Mock the login function to return a 401 error
    const mockLogin = jest.fn().mockRejectedValue({ response: { status: 401 } });
    //@ts-ignore
    login.mockImplementation(mockLogin);

    // Render the LoginRoute component
    const { getByPlaceholderText, getByText } = render(<LoginRoute />);

    // Fill in the email and password fields
    const emailInput = getByPlaceholderText('Email');
    const passwordInput = getByPlaceholderText('Password');
    fireEvent.change(emailInput, { target: { value: 'test@example.com' } });
    fireEvent.change(passwordInput, { target: { value: 'password123' } });

    // Click the login button
    const loginButton = getByText('Log in');
    fireEvent.click(loginButton);

    // Wait for the login function to be called and check that it was called with the correct arguments
    await waitFor(() =>
      expect(mockLogin).toHaveBeenCalledWith('test@example.com', 'password123', 'linkedin_ce'),
    );

    // Check that an error message is displayed
    const errorMessage = getByText(
      'Invalid credentials. Make sure the username and password are correct.',
    );
    expect(errorMessage).toBeInTheDocument();
  });
});
