// Generated by CodiumAI
import { TASK_FIELDS_LOGIC_ROLE, TASK_TYPE } from '@bloobirds-it/types';

import { getTaskText } from './tasks.utils';

/*
Code Analysis

Objective:
The objective of the getTaskText function is to retrieve the title or description of a task, depending on the type parameter, and format it according to whether the task is scheduled or custom.

Inputs:
- task: a Bobject representing the task to retrieve the text from
- type: a string indicating whether to retrieve the title or description of the task

Flow:
1. Determine if the task is scheduled or custom
2. If the task is scheduled, return either 'Task' or the title depending on the type parameter
3. If the task is custom, retrieve the custom task from the useCustomTasks hook and return either the name or description depending on the type parameter
4. If the task is neither scheduled nor custom, return either the title or description depending on the type parameter

Outputs:
- A string representing the title or description of the task, formatted according to whether the task is scheduled or custom

Additional aspects:
- The function uses the isScheduledTask and isCustomTask helper functions to determine if the task is scheduled or custom
- The function uses the getValueFromLogicRole and getFieldByLogicRole helper functions to retrieve the title, description, and custom task ID from the task Bobject
- The function uses the useCustomTasks hook to retrieve the list of custom tasks
*/

describe('getTaskText_function', () => {
  // Tests that a scheduled task returns 'Task' for title
  it('test_scheduled_task_title', () => {
    const task = {
      fields: [
        {
          logicRole: TASK_FIELDS_LOGIC_ROLE.TASK_TYPE,
          valueLogicRole: TASK_TYPE.NEXT_STEP,
        },
        {
          logicRole: TASK_FIELDS_LOGIC_ROLE.TITLE,
          value: 'Scheduled Task Title',
        },
        {
          logicRole: TASK_FIELDS_LOGIC_ROLE.DESCRIPTION,
          value: 'Scheduled Task Description',
        },
      ],
    };
    // @ts-ignore
    const result = getTaskText(task, 'Title');
    expect(result).toBe('Task');
  });

  // Tests that a scheduled task returns the task description for description
  it('test_scheduled_task_description', () => {
    const task = {
      fields: [
        {
          logicRole: TASK_FIELDS_LOGIC_ROLE.TASK_TYPE,
          valueLogicRole: TASK_TYPE.NEXT_STEP,
        },
        {
          logicRole: TASK_FIELDS_LOGIC_ROLE.TITLE,
          value: 'Scheduled Task Title',
        },
        {
          logicRole: TASK_FIELDS_LOGIC_ROLE.DESCRIPTION,
          value: 'Scheduled Task Description',
        },
      ],
    };
    // @ts-ignore
    const result = getTaskText(task, 'Description');
    expect(result).toBe('Scheduled Task Title');
  });

  // Tests that a non-scheduled and non-custom task returns the task title for title
  it('test_non_scheduled_non_custom_task_title', () => {
    const task = {
      fields: [
        {
          logicRole: TASK_FIELDS_LOGIC_ROLE.TASK_TYPE,
          valueLogicRole: TASK_TYPE.PROSPECT_CADENCE,
        },
        {
          logicRole: TASK_FIELDS_LOGIC_ROLE.TITLE,
          value: 'Non-Scheduled Non-Custom Task Title',
        },
        {
          logicRole: TASK_FIELDS_LOGIC_ROLE.DESCRIPTION,
          value: 'Non-Scheduled Non-Custom Task Description',
        },
      ],
    };
    // @ts-ignore
    const result = getTaskText(task, 'Title');
    expect(result).toBe(
      task.fields.find(field => field.logicRole === TASK_FIELDS_LOGIC_ROLE.TITLE).value,
    );
  });

  // Tests that a non-scheduled and non-custom task returns the task description for description
  it('test_non_scheduled_non_custom_task_description', () => {
    const task = {
      fields: [
        {
          logicRole: TASK_FIELDS_LOGIC_ROLE.TASK_TYPE,
          valueLogicRole: TASK_TYPE.PROSPECT_CADENCE,
        },
        {
          logicRole: TASK_FIELDS_LOGIC_ROLE.TITLE,
          value: 'Non-Scheduled Non-Custom Task Title',
        },
        {
          logicRole: TASK_FIELDS_LOGIC_ROLE.DESCRIPTION,
          value: 'Non-Scheduled Non-Custom Task Description',
        },
      ],
    };
    // @ts-ignore
    const result = getTaskText(task, 'Description');
    expect(result).toBe(
      task.fields.find(field => field.logicRole === TASK_FIELDS_LOGIC_ROLE.DESCRIPTION).value,
    );
  });
});
