import {
  isHtml,
  stringToHTML,
  toCamelCase,
  toCamelCaseUpperFirst,
  toTitleCase,
  toSentenceCase,
  commaAndFormatArray,
  linkify,
} from './strings.utils';

test('properly sets an uncased text to camel case', () => {
  expect(toCamelCase('john doe the hidden')).toBe('johnDoeTheHidden');
});

describe('toTitleCase function', () => {
  test('properly sets an uncased text to title case', () => {
    expect(toTitleCase('john doe the hidden')).toBe('John Doe The Hidden');
  });

  test('properly sets an camel case text to title case', () => {
    expect(toTitleCase('johnDoeTheHidden')).toBe('John Doe The Hidden');
  });
});

describe('concat array function', () => {
  test('properly concats arrays of 2 items', () => {
    expect(commaAndFormatArray(['Pears', 'Lemons'])).toBe('Pears and Lemons');
  });

  test('properly concats arrays of more than 2 items', () => {
    expect(commaAndFormatArray(['Pears', 'Lemons', 'Bananas'])).toBe('Pears, Lemons and Bananas');
  });
});

test('an html snipped is detected as html', () => {
  const htmlSnippet =
    '<ul>\n' +
    '   <li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</li>\n' +
    '   <li>Aliquam tincidunt mauris eu risus.</li>\n' +
    '   <li>Vestibulum auctor dapibus neque.</li>\n' +
    '</ul>';

  expect(isHtml(htmlSnippet)).toBe(true);
});

test('a non html snipped is not detected as html', () => {
  const nonHtmlSnippet = 'Lorem ipsum \n test';
  expect(isHtml(nonHtmlSnippet)).toBe(false);
});

test('parses properly strings to html', () => {
  expect(stringToHTML('Oh my string!')).toContainHTML(`<div>Oh my string!</div>`);
});

describe('toSentenceCase function', () => {
  it('returns a sentence case string', () => {
    expect(toSentenceCase('hello world')).toBe('Hello world');
  });

  it('returns an empty string if the input is empty', () => {
    expect(toSentenceCase('')).toBe('');
  });

  it('returns an empty string if the input is null', () => {
    expect(toSentenceCase(null)).toBe('');
  });

  it('returns an empty string if the input is not a string', () => {
    expect(toSentenceCase(123)).toBe('');
  });
});

describe('toCamelCaseUpperFirst function', () => {
  it('returns a camel case string with first letter upper', () => {
    expect(toCamelCaseUpperFirst('hello world')).toBe('HelloWorld');
  });

  it('returns a camel case string with first letter upper', () => {
    expect(toCamelCaseUpperFirst('hello world')).toBe('HelloWorld');
  });

  it('returns an empty string if the input is empty', () => {
    expect(toCamelCaseUpperFirst('')).toBe('');
  });

  it('returns an empty string if the input is null', () => {
    expect(toCamelCaseUpperFirst(null)).toBe('');
  });

  it('returns an empty string if the input is not a string', () => {
    expect(toCamelCaseUpperFirst(123)).toBe('');
  });
});

// strings.utils.test.ts - Generated by CodiumAI

/*
Code Analysis:
- The main goal of the function is to convert URLs and email addresses in a given text into clickable links.
- The function takes in two parameters: 'text' (a string) and 'options' (an optional object).
- If the 'text' parameter is not a string or has a length of 0, the function returns the 'text' parameter as is.
- The function then defines three regular expression patterns to match URLs and email addresses in the 'text' parameter.
- The first regular expression pattern matches URLs starting with 'http://', 'https://', or 'ftp://'.
- The second regular expression pattern matches URLs starting with 'www.' (without '//' before it).
- The third regular expression pattern matches email addresses.
- The function then replaces the matched URLs and email addresses with HTML anchor tags that link to the respective URLs or email addresses.
- The function returns the modified 'text' parameter with clickable links.
*/

/*
Test Plan:
- test_validStringInputWithUrlsAndEmails: tests that the function correctly linkifies a valid string input with URLs and email addresses. Tags: [happy path]
- test_validStringInputWithoutUrlsOrEmails: tests that the function correctly handles a valid string input without URLs or email addresses. Tags: [happy path]
- test_emptyStringInput: tests that the function returns an empty string when given an empty string input. Tags: [edge case]
- test_nonStringInput: tests that the function returns the input when given a non-string input. Tags: [edge case]
- test_doesNotModifyNonUrlOrEmailText: tests that the function does not modify any text that is not a URL or email address. Tags: [general behavior]
- test_urlsAndEmailsWithUnusualCharacters: tests that the function correctly handles URLs and email addresses with unusual characters. Tags: [edge case]
- test_correctlyHandlesDifferentCapitalization: tests that the function correctly handles URLs and email addresses with different capitalization. Tags: [happy path]
- test_urlsAndEmailsSplitAcrossMultipleLines: tests that the function correctly handles URLs and email addresses that are split across multiple lines. Tags: [edge case]
- test_urlsAndEmailsPartOfLargerStrings: tests that the function correctly handles URLs and email addresses that are part of larger strings. Tags: [edge case]
- test_noUrlsOrEmailsInInput: tests that the function returns the input when given a string input with no URLs or email addresses. Tags: [happy path]
- test_urlsAndEmailsWithUnusualCharacters: tests that the function correctly handles URLs and email addresses with unusual characters. Tags: [edge case]
- test_urlsAndEmailsSplitAcrossMultipleLines: tests that the function correctly handles URLs and email addresses that are split across multiple lines. Tags: [edge case]
- test_urlsAndEmailsPartOfLargerStrings: tests that the function correctly handles URLs and email addresses that are part of larger strings. Tags: [edge case]
- test_doesNotModifyNonUrlOrEmailText: tests that the function does not modify any text that is not a URL or email address. Tags: [general behavior]

*/

describe('linkify_function', () => {
  test('test_validStringInputWithUrlsAndEmails', () => {
    const input =
      'Check out my website at https://www.example.com and email me at john@example.com';
    const expectedOutput =
      'Check out my website at <a href="https://www.example.com" target="_blank">https://www.example.com</a> and email me at john@example.com';
    expect(linkify(input)).toEqual(expectedOutput);
  });
  test('test_validStringInputWithoutUrlsOrEmails', () => {
    const input = 'This is a regular string with no URLs or email addresses.';
    expect(linkify(input)).toEqual(input);
  });
  test('test_emptyStringInput', () => {
    const input = '';
    expect(linkify(input)).toEqual(input);
  });
  test('test_nonStringInput', () => {
    const input = 123;
    expect(linkify(input)).toEqual(input);
  });
  test('test_doesNotModifyNonUrlOrEmailText', () => {
    const input = 'This is some text that does not contain any URLs or email addresses.';
    expect(linkify(input)).toEqual(input);
  });
  test('test_urlsAndEmailsWithUnusualCharacters', () => {
    const input =
      'Check out my website at https://www.example.com/?id=123&name=john and email me at john.doe+test@example.co.uk';
    const expectedOutput =
      'Check out my website at <a href="https://www.example.com/?id=123&name=john" target="_blank">https://www.example.com/?id=123&name=john</a> and email me at john.doe+test@example.co.uk';
    expect(linkify(input)).toEqual(expectedOutput);
  });
  test('test_urlsAndEmailsWithUnusualCharacters', () => {
    const text =
      'Here is an email address with unusual characters: john.doe+test@example.co.uk. And here is a URL with unusual characters: https://www.example.com/path/to/page?param=value&param2=value2#fragment';
    const expected =
      'Here is an email address with unusual characters: john.doe+test@example.co.uk. And here is a URL with unusual characters: <a href="https://www.example.com/path/to/page?param=value&param2=value2#fragment" target="_blank">https://www.example.com/path/to/page?param=value&param2=value2#fragment</a>';
    expect(linkify(text)).toEqual(expected);
  });
  test('test_urlsAndEmailsSplitAcrossMultipleLines', () => {
    const text =
      'Here is an email address that is split across multiple lines:\njohn.doe@example.co.uk\nAnd here is a URL that is split across multiple lines:\nhttps://www.example.com/path/to/page?param=value&param2=value2#fragment';
    const expected =
      'Here is an email address that is split across multiple lines:\njohn.doe@example.co.uk\nAnd here is a URL that is split across multiple lines:\n<a href="https://www.example.com/path/to/page?param=value&param2=value2#fragment" target="_blank">https://www.example.com/path/to/page?param=value&param2=value2#fragment</a>';
    expect(linkify(text)).toEqual(expected);
  });
  test('test_urlsAndEmailsPartOfLargerStrings', () => {
    const text =
      'This is a sentence with a URL (https://www.example.com/path/to/page?param=value&param2=value2#fragment) and an email address (john.doe@example.co.uk) in it.';
    const expected =
      'This is a sentence with a URL (<a href="https://www.example.com/path/to/page?param=value&param2=value2#fragment" target="_blank">https://www.example.com/path/to/page?param=value&param2=value2#fragment</a>) and an email address (john.doe@example.co.uk) in it.';
    expect(linkify(text)).toEqual(expected);
  });
  test('test_doesNotModifyNonUrlOrEmailText', () => {
    const text = 'This is some text that does not contain any URLs or email addresses.';
    expect(linkify(text)).toEqual(text);
  });
});
