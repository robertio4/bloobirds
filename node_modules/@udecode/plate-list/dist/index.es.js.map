{"version":3,"file":"index.es.js","sources":["../../../../node_modules/lodash/isArray.js","../../../../node_modules/lodash/castArray.js","../../../../node_modules/is-hotkey/lib/index.js","../src/queries/isListNested.ts","../src/queries/getListTypes.ts","../src/queries/getHighestEmptyList.ts","../src/queries/getListItemEntry.ts","../src/queries/getListRoot.ts","../src/queries/hasListChild.ts","../src/queries/isAcrossListItems.ts","../src/queries/isListRoot.ts","../src/transforms/moveListItemDown.ts","../src/transforms/moveListItemsToList.ts","../src/transforms/unwrapList.ts","../src/transforms/moveListItemUp.ts","../src/transforms/removeFirstListItem.ts","../src/transforms/moveListItems.ts","../src/transforms/indentListItems.ts","../src/transforms/insertListItem.ts","../src/transforms/moveListItemSublistItemsToListItemSublist.ts","../src/transforms/moveListSiblingsAfterCursor.ts","../src/transforms/removeListItem.ts","../src/transforms/toggleList.ts","../src/transforms/unindentListItems.ts","../src/onKeyDownList.ts","../src/deleteBackwardList.ts","../src/deleteForwardList.ts","../src/deleteFragmentList.ts","../src/insertBreakList.ts","../src/insertFragmentList.ts","../src/normalizers/normalizeListItem.ts","../src/normalizers/normalizeNestedList.ts","../src/normalizers/normalizeList.ts","../src/withList.ts","../src/createListPlugin.ts","../src/todo-list/createTodoListPlugin.ts"],"sourcesContent":["/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","var isArray = require('./isArray');\n\n/**\n * Casts `value` as an array if it's not one.\n *\n * @static\n * @memberOf _\n * @since 4.4.0\n * @category Lang\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast array.\n * @example\n *\n * _.castArray(1);\n * // => [1]\n *\n * _.castArray({ 'a': 1 });\n * // => [{ 'a': 1 }]\n *\n * _.castArray('abc');\n * // => ['abc']\n *\n * _.castArray(null);\n * // => [null]\n *\n * _.castArray(undefined);\n * // => [undefined]\n *\n * _.castArray();\n * // => []\n *\n * var array = [1, 2, 3];\n * console.log(_.castArray(array) === array);\n * // => true\n */\nfunction castArray() {\n  if (!arguments.length) {\n    return [];\n  }\n  var value = arguments[0];\n  return isArray(value) ? value : [value];\n}\n\nmodule.exports = castArray;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n/**\n * Constants.\n */\n\n// We make this a function so it can be tested in describe block mocks with Jest.\nvar IS_MAC = () => typeof window != 'undefined' && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);\n\nvar MODIFIERS = {\n  alt: 'altKey',\n  control: 'ctrlKey',\n  meta: 'metaKey',\n  shift: 'shiftKey'\n};\n\n// We make this a function so it can be tested in describe block mocks with Jest.\nvar ALIASES = () => ({\n  add: '+',\n  break: 'pause',\n  cmd: 'meta',\n  command: 'meta',\n  ctl: 'control',\n  ctrl: 'control',\n  del: 'delete',\n  down: 'arrowdown',\n  esc: 'escape',\n  ins: 'insert',\n  left: 'arrowleft',\n  mod: IS_MAC() ? 'meta' : 'control',\n  opt: 'alt',\n  option: 'alt',\n  return: 'enter',\n  right: 'arrowright',\n  space: ' ',\n  spacebar: ' ',\n  up: 'arrowup',\n  win: 'meta',\n  windows: 'meta'\n});\n\nvar CODES = {\n  backspace: 8,\n  tab: 9,\n  enter: 13,\n  shift: 16,\n  control: 17,\n  alt: 18,\n  pause: 19,\n  capslock: 20,\n  escape: 27,\n  ' ': 32,\n  pageup: 33,\n  pagedown: 34,\n  end: 35,\n  home: 36,\n  arrowleft: 37,\n  arrowup: 38,\n  arrowright: 39,\n  arrowdown: 40,\n  insert: 45,\n  delete: 46,\n  meta: 91,\n  numlock: 144,\n  scrolllock: 145,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  '\\'': 222\n};\n\nfor (var f = 1; f < 20; f++) {\n  CODES['f' + f] = 111 + f;\n}\n\n/**\n * Is hotkey?\n */\n\nfunction isHotkey(hotkey, options, event) {\n  if (options && !('byKey' in options)) {\n    event = options;\n    options = null;\n  }\n\n  if (!Array.isArray(hotkey)) {\n    hotkey = [hotkey];\n  }\n\n  var array = hotkey.map(function (string) {\n    return parseHotkey(string, options);\n  });\n  var check = function check(e) {\n    return array.some(function (object) {\n      return compareHotkey(object, e);\n    });\n  };\n  var ret = event == null ? check : check(event);\n  return ret;\n}\n\nfunction isCodeHotkey(hotkey, event) {\n  return isHotkey(hotkey, event);\n}\n\nfunction isKeyHotkey(hotkey, event) {\n  return isHotkey(hotkey, { byKey: true }, event);\n}\n\n/**\n * Parse.\n */\n\nfunction parseHotkey(hotkey, options) {\n  var byKey = options && options.byKey;\n  var ret = {};\n\n  // Special case to handle the `+` key since we use it as a separator.\n  hotkey = hotkey.replace('++', '+add');\n  var values = hotkey.split('+');\n  var length = values.length;\n\n  // Ensure that all the modifiers are set to false unless the hotkey has them.\n\n  for (var k in MODIFIERS) {\n    ret[MODIFIERS[k]] = false;\n  }\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var value = _step.value;\n\n      var optional = value.endsWith('?') && value.length > 1;\n\n      if (optional) {\n        value = value.slice(0, -1);\n      }\n\n      var name = toKeyName(value);\n      var modifier = MODIFIERS[name];\n\n      if (length === 1 || !modifier) {\n        if (byKey) {\n          ret.key = name;\n        } else {\n          ret.which = toKeyCode(value);\n        }\n      }\n\n      if (modifier) {\n        ret[modifier] = optional ? null : true;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return ret;\n}\n\n/**\n * Compare.\n */\n\nfunction compareHotkey(object, event) {\n  for (var key in object) {\n    var expected = object[key];\n    var actual = void 0;\n\n    if (expected == null) {\n      continue;\n    }\n\n    if (key === 'key' && event.key != null) {\n      actual = event.key.toLowerCase();\n    } else if (key === 'which') {\n      actual = expected === 91 && event.which === 93 ? 91 : event.which;\n    } else {\n      actual = event[key];\n    }\n\n    if (actual == null && expected === false) {\n      continue;\n    }\n\n    if (actual !== expected) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Utils.\n */\n\nfunction toKeyCode(name) {\n  name = toKeyName(name);\n  var code = CODES[name] || name.toUpperCase().charCodeAt(0);\n  return code;\n}\n\nfunction toKeyName(name) {\n  name = name.toLowerCase();\n  name = ALIASES()[name] || name;\n  return name;\n}\n\n/**\n * Export.\n */\n\nexports.default = isHotkey;\nexports.isHotkey = isHotkey;\nexports.isCodeHotkey = isCodeHotkey;\nexports.isKeyHotkey = isKeyHotkey;\nexports.parseHotkey = parseHotkey;\nexports.compareHotkey = compareHotkey;\nexports.toKeyCode = toKeyCode;\nexports.toKeyName = toKeyName;","import {\n  getParentNode,\n  getPluginType,\n  PlateEditor,\n  TElement,\n  Value,\n} from '@udecode/plate-core';\nimport { Path } from 'slate';\nimport { ELEMENT_LI } from '../createListPlugin';\n\n/**\n * Is the list nested, i.e. its parent is a list item.\n */\nexport const isListNested = <V extends Value>(\n  editor: PlateEditor<V>,\n  listPath: Path\n) => {\n  const listParentNode = getParentNode<TElement>(editor, listPath)?.[0];\n\n  return listParentNode?.type === getPluginType(editor, ELEMENT_LI);\n};\n","import { getPluginType, PlateEditor, Value } from '@udecode/plate-core';\nimport {\n  ELEMENT_LI,\n  ELEMENT_LIC,\n  ELEMENT_OL,\n  ELEMENT_UL,\n} from '../createListPlugin';\n\nexport const getUnorderedListType = <V extends Value>(\n  editor: PlateEditor<V>\n) => {\n  return getPluginType(editor, ELEMENT_UL);\n};\n\nexport const getOrderedListType = <V extends Value>(editor: PlateEditor<V>) => {\n  return getPluginType(editor, ELEMENT_OL);\n};\n\nexport const getListTypes = <V extends Value>(editor: PlateEditor<V>) => {\n  return [getOrderedListType(editor), getUnorderedListType(editor)];\n};\n\nexport const getListItemType = <V extends Value>(editor: PlateEditor<V>) => {\n  return getPluginType(editor, ELEMENT_LI);\n};\n\nexport const getListItemContentType = <V extends Value>(\n  editor: PlateEditor<V>\n) => {\n  return getPluginType(editor, ELEMENT_LIC);\n};\n","import {\n  getAboveNode,\n  getPluginType,\n  PlateEditor,\n  Value,\n} from '@udecode/plate-core';\nimport { Path } from 'slate';\nimport { ELEMENT_LI } from '../createListPlugin';\nimport { getListTypes } from './getListTypes';\n\n/**\n * Find the highest end list that can be deleted.\n * Its path should be different to diffListPath.\n * If the highest end list 2+ items, return liPath.\n * Get the parent list until:\n * - the list has less than 2 items.\n * - its path is not equals to diffListPath.\n */\nexport const getHighestEmptyList = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    diffListPath,\n    liPath,\n  }: {\n    liPath: Path;\n    diffListPath?: Path;\n  }\n): Path | undefined => {\n  const list = getAboveNode(editor, {\n    at: liPath,\n    match: { type: getListTypes(editor) },\n  });\n  if (!list) return;\n  const [listNode, listPath] = list;\n\n  if (!diffListPath || !Path.equals(listPath, diffListPath)) {\n    if (listNode.children.length < 2) {\n      const liParent = getAboveNode(editor, {\n        at: listPath,\n        match: { type: getPluginType(editor, ELEMENT_LI) },\n      });\n\n      if (liParent) {\n        return (\n          getHighestEmptyList(editor, { liPath: liParent[1], diffListPath }) ||\n          listPath\n        );\n      }\n    }\n    return liPath;\n  }\n};\n","import {\n  getAboveNode,\n  getNode,\n  getParentNode,\n  getPluginType,\n  isCollapsed,\n  PlateEditor,\n  TElement,\n  TElementEntry,\n  Value,\n} from '@udecode/plate-core';\nimport { Location, Path, Range } from 'slate';\nimport { ELEMENT_LI } from '../createListPlugin';\n\n/**\n * Returns the nearest li and ul / ol wrapping node entries for a given path (default = selection)\n */\nexport const getListItemEntry = <V extends Value>(\n  editor: PlateEditor<V>,\n  { at = editor.selection }: { at?: Location | null } = {}\n): { list: TElementEntry; listItem: TElementEntry } | undefined => {\n  const liType = getPluginType(editor, ELEMENT_LI);\n\n  let _at: Path;\n\n  if (Range.isRange(at) && !isCollapsed(at)) {\n    _at = at.focus.path;\n  } else if (Range.isRange(at)) {\n    _at = at.anchor.path;\n  } else {\n    _at = at as Path;\n  }\n\n  if (_at) {\n    const node = getNode<TElement>(editor, _at);\n    if (node) {\n      const listItem = getAboveNode<TElement>(editor, {\n        at: _at,\n        match: { type: liType },\n      });\n\n      if (listItem) {\n        const list = getParentNode<TElement>(editor, listItem[1])!;\n\n        return { list, listItem };\n      }\n    }\n  }\n};\n","import {\n  getAboveNode,\n  getPluginType,\n  PlateEditor,\n  TElement,\n  TElementEntry,\n  Value,\n} from '@udecode/plate-core';\nimport { Path, Point, Range } from 'slate';\nimport { ELEMENT_OL, ELEMENT_UL } from '../createListPlugin';\n\n/**\n * Searches upward for the root list element\n */\nexport const getListRoot = <V extends Value>(\n  editor: PlateEditor<V>,\n  at: Path | Range | Point | null = editor.selection\n): TElementEntry | undefined => {\n  if (!at) return;\n\n  const parentList = getAboveNode<TElement>(editor, {\n    at,\n    match: {\n      type: [\n        getPluginType(editor, ELEMENT_UL),\n        getPluginType(editor, ELEMENT_OL),\n      ],\n    },\n  });\n\n  if (parentList) {\n    const [, parentListPath] = parentList;\n\n    return getListRoot(editor, parentListPath) ?? parentList;\n  }\n};\n","import { match, PlateEditor, TAncestor, Value } from '@udecode/plate-core';\nimport { getListTypes } from './getListTypes';\n\n/**\n * Is there a list child in the node.\n */\nexport const hasListChild = <V extends Value>(\n  editor: PlateEditor<V>,\n  node: TAncestor\n) => node.children.some((n) => match(n, [], { type: getListTypes(editor) }));\n","import {\n  getPluginType,\n  isCollapsed,\n  isRangeAcrossBlocks,\n  PlateEditor,\n  someNode,\n  Value,\n} from '@udecode/plate-core';\nimport { ELEMENT_LI } from '../createListPlugin';\n\n/**\n * Is selection across blocks with list items\n */\nexport const isAcrossListItems = <V extends Value>(editor: PlateEditor<V>) => {\n  const { selection } = editor;\n\n  if (!selection || isCollapsed(selection)) {\n    return false;\n  }\n\n  const isAcrossBlocks = isRangeAcrossBlocks(editor);\n  if (!isAcrossBlocks) return false;\n\n  return someNode(editor, {\n    match: { type: getPluginType(editor, ELEMENT_LI) },\n  });\n};\n","import {\n  isElement,\n  PlateEditor,\n  TDescendant,\n  Value,\n} from '@udecode/plate-core';\nimport { getListTypes } from './getListTypes';\n\nexport const isListRoot = <V extends Value>(\n  editor: PlateEditor<V>,\n  node: TDescendant\n): boolean => isElement(node) && getListTypes(editor).includes(node.type);\n","import {\n  getNodeEntry,\n  match,\n  moveNodes,\n  PlateEditor,\n  TElement,\n  TElementEntry,\n  Value,\n  withoutNormalizing,\n  wrapNodes,\n} from '@udecode/plate-core';\nimport { Path } from 'slate';\nimport { getListTypes } from '../queries';\n\nexport interface MoveListItemDownOptions {\n  list: TElementEntry;\n  listItem: TElementEntry;\n}\n\nexport const moveListItemDown = <V extends Value>(\n  editor: PlateEditor<V>,\n  { list, listItem }: MoveListItemDownOptions\n) => {\n  let moved = false;\n\n  const [listNode] = list;\n  const [, listItemPath] = listItem;\n\n  let previousListItemPath: Path;\n\n  try {\n    previousListItemPath = Path.previous(listItemPath);\n  } catch (e) {\n    return;\n  }\n\n  // Previous sibling is the new parent\n  const previousSiblingItem = getNodeEntry<TElement>(\n    editor,\n    previousListItemPath\n  );\n\n  if (previousSiblingItem) {\n    const [previousNode, previousPath] = previousSiblingItem;\n\n    const sublist = (previousNode.children as TElement[]).find((n) =>\n      match(n, [], { type: getListTypes(editor) })\n    );\n    const newPath = previousPath.concat(\n      sublist ? [1, sublist.children.length] : [1]\n    );\n\n    withoutNormalizing(editor, () => {\n      if (!sublist) {\n        // Create new sublist\n        wrapNodes<TElement>(\n          editor,\n          { type: listNode.type, children: [] },\n          { at: listItemPath }\n        );\n      }\n\n      // Move the current item to the sublist\n      moveNodes(editor, {\n        at: listItemPath,\n        to: newPath,\n      });\n\n      moved = true;\n    });\n  }\n\n  return moved;\n};\n","import {\n  deleteText,\n  findDescendant,\n  getLastChildPath,\n  moveChildren,\n  MoveChildrenOptions,\n  PlateEditor,\n  TElementEntry,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-core';\nimport { Path } from 'slate';\nimport { getListTypes } from '../queries/getListTypes';\n\nexport interface MergeListItemIntoListOptions<V extends Value = Value> {\n  /**\n   * List items of the sublist of this node will be moved.\n   */\n  fromListItem?: TElementEntry;\n\n  /**\n   * List items of the list will be moved.\n   */\n  fromList?: TElementEntry;\n\n  /**\n   * List items will be moved in this list.\n   */\n  toList?: TElementEntry;\n\n  fromStartIndex?: MoveChildrenOptions<V>['fromStartIndex'];\n\n  /**\n   * List position where to move the list items.\n   */\n  toListIndex?: number | null;\n\n  to?: Path;\n\n  /**\n   * Delete `fromListItem` sublist if true.\n   * @default true\n   */\n  deleteFromList?: boolean;\n}\n\n/**\n * Move the list items of the sublist of `fromListItem` to `toList` (if `fromListItem` is defined).\n * Move the list items of `fromList` to `toList` (if `fromList` is defined).\n */\nexport const moveListItemsToList = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    fromList,\n    fromListItem,\n    fromStartIndex,\n    to: _to,\n    toList,\n    toListIndex = null,\n    deleteFromList = true,\n  }: MergeListItemIntoListOptions<V>\n) => {\n  let fromListPath: Path | undefined;\n  let moved;\n\n  withoutNormalizing(editor, () => {\n    if (fromListItem) {\n      const fromListItemSublist = findDescendant(editor, {\n        at: fromListItem[1],\n        match: {\n          type: getListTypes(editor),\n        },\n      });\n      if (!fromListItemSublist) return;\n\n      fromListPath = fromListItemSublist?.[1];\n    } else if (fromList) {\n      // eslint-disable-next-line prefer-destructuring\n      fromListPath = fromList[1];\n    } else {\n      return;\n    }\n\n    let to: Path | null = null;\n\n    if (_to) to = _to;\n    if (toList) {\n      if (toListIndex !== null) to = toList[1].concat([toListIndex]);\n      else {\n        const lastChildPath = getLastChildPath(toList);\n        to = Path.next(lastChildPath);\n      }\n    }\n    if (!to) return;\n\n    moved = moveChildren(editor, {\n      at: fromListPath,\n      to,\n      fromStartIndex,\n    });\n\n    // Remove the empty list\n    if (deleteFromList) {\n      deleteText(editor, { at: fromListPath });\n    }\n  });\n\n  return moved;\n};\n","import {\n  ELEMENT_DEFAULT,\n  getAboveNode,\n  getBlockAbove,\n  getCommonNode,\n  getPluginType,\n  isElement,\n  PlateEditor,\n  setElements,\n  unwrapNodes,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-core';\nimport { Path } from 'slate';\nimport {\n  ELEMENT_LI,\n  ELEMENT_LIC,\n  ELEMENT_OL,\n  ELEMENT_UL,\n} from '../createListPlugin';\nimport { getListTypes } from '../queries';\n\nexport const unwrapList = <V extends Value>(\n  editor: PlateEditor<V>,\n  { at }: { at?: Path } = {}\n) => {\n  const ancestorListTypeCheck = () => {\n    if (getAboveNode(editor, { match: { type: getListTypes(editor), at } })) {\n      return true;\n    }\n\n    // The selection's common node might be a list type\n    if (!at && editor.selection) {\n      const commonNode = getCommonNode(\n        editor,\n        editor.selection.anchor.path,\n        editor.selection.focus.path\n      );\n      if (\n        isElement(commonNode[0]) &&\n        getListTypes(editor).includes(commonNode[0].type)\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  withoutNormalizing(editor, () => {\n    do {\n      const licEntry = getBlockAbove(editor, {\n        at,\n        match: { type: getPluginType(editor, ELEMENT_LIC) },\n      });\n      if (licEntry) {\n        setElements(editor, {\n          at,\n          type: getPluginType(editor, ELEMENT_DEFAULT),\n        });\n      }\n\n      unwrapNodes(editor, {\n        at,\n        match: { type: getPluginType(editor, ELEMENT_LI) },\n        split: true,\n      });\n\n      unwrapNodes(editor, {\n        at,\n        match: {\n          type: [\n            getPluginType(editor, ELEMENT_UL),\n            getPluginType(editor, ELEMENT_OL),\n          ],\n        },\n        split: true,\n      });\n    } while (ancestorListTypeCheck());\n  });\n};\n","import {\n  getAboveNode,\n  getNode,\n  getPluginType,\n  insertElements,\n  isLastChild,\n  moveNodes,\n  PlateEditor,\n  TElement,\n  TElementEntry,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-core';\nimport { Path } from 'slate';\nimport { ELEMENT_LI } from '../createListPlugin';\nimport { hasListChild } from '../queries/hasListChild';\nimport { moveListItemsToList } from './moveListItemsToList';\nimport { unwrapList } from './unwrapList';\n\nexport interface MoveListItemUpOptions {\n  list: TElementEntry;\n  listItem: TElementEntry;\n}\n\n/**\n * Move a list item up.\n */\nexport const moveListItemUp = <V extends Value>(\n  editor: PlateEditor<V>,\n  { list, listItem }: MoveListItemUpOptions\n) => {\n  const move = () => {\n    const [listNode, listPath] = list;\n    const [liNode, liPath] = listItem;\n\n    const liParent = getAboveNode<TElement>(editor, {\n      at: listPath,\n      match: { type: getPluginType(editor, ELEMENT_LI) },\n    });\n    if (!liParent) {\n      let toListPath;\n      try {\n        toListPath = Path.next(listPath);\n      } catch (err) {\n        return;\n      }\n\n      const condA = hasListChild(editor, liNode);\n      const condB = !isLastChild(list, liPath);\n\n      if (condA || condB) {\n        // Insert a new list next to `list`\n        insertElements(\n          editor,\n          {\n            type: listNode.type,\n            children: [],\n          },\n          { at: toListPath }\n        );\n      }\n\n      if (condA) {\n        const toListNode = getNode<TElement>(editor, toListPath);\n        if (!toListNode) return;\n\n        // Move li sub-lis to the new list\n        moveListItemsToList(editor, {\n          fromListItem: listItem,\n          toList: [toListNode, toListPath],\n        });\n      }\n\n      // If there is siblings li, move them to the new list\n      if (condB) {\n        const toListNode = getNode<TElement>(editor, toListPath);\n        if (!toListNode) return;\n\n        // Move next lis to the new list\n        moveListItemsToList(editor, {\n          fromList: list,\n          fromStartIndex: liPath[liPath.length - 1] + 1,\n          toList: [toListNode, toListPath],\n          deleteFromList: false,\n        });\n      }\n\n      // Finally, unwrap the list\n      unwrapList(editor, { at: liPath.concat(0) });\n\n      return true;\n    }\n    const [, liParentPath] = liParent;\n\n    const toListPath = liPath.concat([1]);\n\n    // If li has next siblings, we need to move them.\n    if (!isLastChild(list, liPath)) {\n      // If li has no sublist, insert one.\n      if (!hasListChild(editor, liNode)) {\n        insertElements(\n          editor,\n          {\n            type: listNode.type,\n            children: [],\n          },\n          { at: toListPath }\n        );\n      }\n\n      const toListNode = getNode<TElement>(editor, toListPath);\n      if (!toListNode) return;\n\n      // Move next siblings to li sublist.\n      moveListItemsToList(editor, {\n        fromListItem: liParent,\n        toList: [toListNode, toListPath],\n        fromStartIndex: liPath[liPath.length - 1] + 1,\n        deleteFromList: false,\n      });\n    }\n\n    const movedUpLiPath = Path.next(liParentPath);\n\n    // Move li one level up: next to the li parent.\n    moveNodes(editor, {\n      at: liPath,\n      to: movedUpLiPath,\n    });\n\n    return true;\n  };\n\n  let moved: boolean | undefined = false;\n\n  withoutNormalizing(editor, () => {\n    moved = move();\n  });\n\n  return moved;\n};\n","import { PlateEditor, TElementEntry, Value } from '@udecode/plate-core';\nimport { isListNested } from '../queries/isListNested';\nimport { moveListItemUp } from './moveListItemUp';\n\n/**\n * If list is not nested and if li is not the first child, move li up.\n */\nexport const removeFirstListItem = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    list,\n    listItem,\n  }: {\n    list: TElementEntry;\n    listItem: TElementEntry;\n  }\n) => {\n  const [, listPath] = list;\n\n  if (!isListNested(editor, listPath)) {\n    moveListItemUp(editor, { list, listItem });\n\n    return true;\n  }\n\n  return false;\n};\n","import {\n  createPathRef,\n  getNodeEntries,\n  GetNodeEntriesOptions,\n  getParentNode,\n  getPluginType,\n  PlateEditor,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-core';\nimport { Path, PathRef } from 'slate';\nimport { ELEMENT_LIC } from '../createListPlugin';\nimport { isListNested } from '../queries/isListNested';\nimport { moveListItemDown } from './moveListItemDown';\nimport { moveListItemUp } from './moveListItemUp';\nimport { removeFirstListItem } from './removeFirstListItem';\n\nexport type MoveListItemsOptions = {\n  increase?: boolean;\n  at?: GetNodeEntriesOptions['at'];\n  enableResetOnShiftTab?: boolean;\n};\n\nexport const moveListItems = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    increase = true,\n    at = editor.selection ?? undefined,\n    enableResetOnShiftTab,\n  }: MoveListItemsOptions = {}\n) => {\n  const _nodes = getNodeEntries(editor, {\n    at,\n    match: {\n      type: getPluginType(editor, ELEMENT_LIC),\n    },\n  });\n\n  // Get the selected lic\n  const lics = Array.from(_nodes);\n\n  if (!lics.length) return;\n\n  const highestLicPaths: Path[] = [];\n  const highestLicPathRefs: PathRef[] = [];\n\n  // Filter out the nested lic, we just need to move the highest ones\n  lics.forEach((lic) => {\n    const licPath = lic[1];\n    const liPath = Path.parent(licPath);\n\n    const isAncestor = highestLicPaths.some((path) => {\n      const highestLiPath = Path.parent(path);\n\n      return Path.isAncestor(highestLiPath, liPath);\n    });\n    if (!isAncestor) {\n      highestLicPaths.push(licPath);\n      highestLicPathRefs.push(createPathRef(editor, licPath));\n    }\n  });\n\n  const licPathRefsToMove = increase\n    ? highestLicPathRefs\n    : highestLicPathRefs.reverse();\n\n  return withoutNormalizing(editor, () => {\n    let moved = false;\n\n    licPathRefsToMove.forEach((licPathRef) => {\n      const licPath = licPathRef.unref();\n      if (!licPath) return;\n\n      const listItem = getParentNode(editor, licPath);\n      if (!listItem) return;\n\n      const parentList = getParentNode(editor, listItem[1]);\n      if (!parentList) return;\n\n      let _moved: any;\n\n      if (increase) {\n        _moved = moveListItemDown(editor, {\n          list: parentList as any,\n          listItem: listItem as any,\n        });\n      } else if (isListNested(editor, parentList[1])) {\n        // un-indent a sub-list item\n        _moved = moveListItemUp(editor, {\n          list: parentList as any,\n          listItem: listItem as any,\n        });\n      } else if (enableResetOnShiftTab) {\n        // unindenting a top level list item, effectively breaking apart the list.\n        _moved = removeFirstListItem(editor, {\n          list: parentList as any,\n          listItem: listItem as any,\n        });\n      }\n\n      moved = _moved || moved;\n    });\n\n    return moved;\n  });\n};\n","import { PlateEditor, Value } from '@udecode/plate-core';\nimport { moveListItems } from './moveListItems';\n\nexport const indentListItems = <V extends Value>(editor: PlateEditor<V>) => {\n  moveListItems(editor, { increase: true });\n};\n","import {\n  collapseSelection,\n  deleteText,\n  getAboveNode,\n  getMarks,\n  getParentNode,\n  getPluginType,\n  insertElements,\n  isBlockTextEmptyAfterSelection,\n  isStartPoint,\n  moveNodes,\n  PlateEditor,\n  select,\n  splitNodes,\n  TElement,\n  Value,\n  withoutNormalizing,\n  wrapNodes,\n} from '@udecode/plate-core';\nimport { Path, Range } from 'slate';\nimport { ELEMENT_LI, ELEMENT_LIC } from '../createListPlugin';\n\n/**\n * Insert list item if selection in li>p.\n * TODO: test\n */\nexport const insertListItem = <V extends Value>(\n  editor: PlateEditor<V>\n): boolean => {\n  const liType = getPluginType(editor, ELEMENT_LI);\n  const licType = getPluginType(editor, ELEMENT_LIC);\n\n  if (!editor.selection) {\n    return false;\n  }\n\n  const licEntry = getAboveNode(editor, { match: { type: licType } });\n  if (!licEntry) return false;\n  const [, paragraphPath] = licEntry;\n\n  const listItemEntry = getParentNode(editor, paragraphPath);\n  if (!listItemEntry) return false;\n  const [listItemNode, listItemPath] = listItemEntry;\n\n  if (listItemNode.type !== liType) return false;\n\n  let success = false;\n\n  withoutNormalizing(editor, () => {\n    if (!Range.isCollapsed(editor.selection!)) {\n      deleteText(editor);\n    }\n\n    const isStart = isStartPoint(\n      editor,\n      editor.selection!.focus,\n      paragraphPath\n    );\n    const isEnd = isBlockTextEmptyAfterSelection(editor);\n\n    const nextParagraphPath = Path.next(paragraphPath);\n    const nextListItemPath = Path.next(listItemPath);\n\n    /**\n     * If start, insert a list item before\n     */\n    if (isStart) {\n      insertElements(\n        editor,\n        {\n          type: liType,\n          children: [{ type: licType, children: [{ text: '' }] }],\n        },\n        { at: listItemPath }\n      );\n\n      success = true;\n\n      return;\n    }\n\n    /**\n     * If not end, split nodes, wrap a list item on the new paragraph and move it to the next list item\n     */\n    if (!isEnd) {\n      withoutNormalizing(editor, () => {\n        splitNodes(editor);\n        wrapNodes<TElement>(\n          editor,\n          {\n            type: liType,\n            children: [],\n          },\n          { at: nextParagraphPath }\n        );\n        moveNodes(editor, {\n          at: nextParagraphPath,\n          to: nextListItemPath,\n        });\n        select(editor, nextListItemPath);\n        collapseSelection(editor, {\n          edge: 'start',\n        });\n      });\n    } else {\n      /**\n       * If end, insert a list item after and select it\n       */\n      const marks = getMarks(editor) || {};\n      insertElements(\n        editor,\n        {\n          type: liType,\n          children: [{ type: licType, children: [{ text: '', ...marks }] }],\n        },\n        { at: nextListItemPath }\n      );\n      select(editor, nextListItemPath);\n    }\n\n    /**\n     * If there is a list in the list item, move it to the next list item\n     */\n    if (listItemNode.children.length > 1) {\n      moveNodes(editor, {\n        at: nextParagraphPath,\n        to: nextListItemPath.concat(1),\n      });\n    }\n\n    success = true;\n  });\n\n  return success;\n};\n","import {\n  deleteText,\n  findDescendant,\n  getLastChildPath,\n  getParentNode,\n  insertElements,\n  moveChildren,\n  PlateEditor,\n  TElement,\n  TElementEntry,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-core';\nimport { Path } from 'slate';\nimport { getListTypes } from '../queries/getListTypes';\n\nexport interface MoveListItemSublistItemsToListItemSublistOptions {\n  /**\n   * The list item to merge.\n   */\n  fromListItem: TElementEntry;\n\n  /**\n   * The list item where to merge.\n   */\n  toListItem: TElementEntry;\n\n  /**\n   * Move to the start of the list instead of the end.\n   */\n  start?: boolean;\n}\n\n/**\n * Move fromListItem sublist list items to the end of `toListItem` sublist.\n * If there is no `toListItem` sublist, insert one.\n */\nexport const moveListItemSublistItemsToListItemSublist = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    fromListItem,\n    toListItem,\n    start,\n  }: MoveListItemSublistItemsToListItemSublistOptions\n) => {\n  const [, fromListItemPath] = fromListItem;\n  const [, toListItemPath] = toListItem;\n  let moved = 0;\n\n  withoutNormalizing(editor, () => {\n    const fromListItemSublist = findDescendant<TElement>(editor, {\n      at: fromListItemPath,\n      match: {\n        type: getListTypes(editor),\n      },\n    });\n    if (!fromListItemSublist) return;\n\n    const [, fromListItemSublistPath] = fromListItemSublist;\n\n    const toListItemSublist = findDescendant<TElement>(editor, {\n      at: toListItemPath,\n      match: {\n        type: getListTypes(editor),\n      },\n    });\n\n    let to: Path;\n\n    if (!toListItemSublist) {\n      const fromList = getParentNode(editor, fromListItemPath);\n      if (!fromList) return;\n      const [fromListNode] = fromList;\n\n      const fromListType = fromListNode.type;\n\n      const toListItemSublistPath = toListItemPath.concat([1]);\n\n      insertElements(\n        editor,\n        { type: fromListType as string, children: [] },\n        { at: toListItemSublistPath }\n      );\n\n      to = toListItemSublistPath.concat([0]);\n    } else if (start) {\n      const [, toListItemSublistPath] = toListItemSublist;\n      to = toListItemSublistPath.concat([0]);\n    } else {\n      to = Path.next(getLastChildPath(toListItemSublist));\n    }\n\n    moved = moveChildren(editor, {\n      at: fromListItemSublistPath,\n      to,\n    });\n\n    // Remove the empty list\n    deleteText(editor, { at: fromListItemSublistPath });\n  });\n\n  return moved;\n};\n","import {\n  getNode,\n  match,\n  moveChildren,\n  PlateEditor,\n  TElement,\n  TElementEntry,\n  Value,\n} from '@udecode/plate-core';\nimport { Path } from 'slate';\nimport { getListTypes } from '../queries/getListTypes';\n\nexport const moveListSiblingsAfterCursor = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    at,\n    to,\n  }: {\n    at: Path;\n    to: Path;\n  }\n): number => {\n  const offset = at[at.length - 1];\n  at = Path.parent(at);\n  const listNode = getNode<TElement>(editor, at)!;\n  const listEntry: TElementEntry = [listNode, at];\n\n  if (\n    !match(listNode, [], { type: getListTypes(editor) }) ||\n    Path.isParent(at, to) // avoid moving nodes within its own list\n  ) {\n    return 0;\n  }\n\n  return moveChildren(editor, {\n    at: listEntry as any,\n    to,\n    fromStartIndex: offset + 1,\n  });\n};\n","import {\n  createPathRef,\n  deleteMerge,\n  getNodeEntry,\n  getPluginType,\n  getPreviousPath,\n  insertElements,\n  isExpanded,\n  PlateEditor,\n  removeNodes,\n  TElement,\n  TElementEntry,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-core';\nimport { Path } from 'slate';\nimport { ELEMENT_LI, ELEMENT_LIC } from '../createListPlugin';\nimport { hasListChild } from '../queries/hasListChild';\nimport { moveListItemsToList } from './moveListItemsToList';\nimport { moveListItemSublistItemsToListItemSublist } from './moveListItemSublistItemsToListItemSublist';\n\nexport interface RemoveListItemOptions {\n  list: TElementEntry;\n  listItem: TElementEntry;\n  reverse?: boolean;\n}\n\n/**\n * Remove list item and move its sublist to list if any.\n */\nexport const removeListItem = <V extends Value>(\n  editor: PlateEditor<V>,\n  { list, listItem, reverse = true }: RemoveListItemOptions\n) => {\n  const [liNode, liPath] = listItem;\n\n  // Stop if the list item has no sublist\n  if (isExpanded(editor.selection) || !hasListChild(editor, liNode)) {\n    return false;\n  }\n\n  const previousLiPath = getPreviousPath(liPath);\n\n  let success = false;\n\n  withoutNormalizing(editor, () => {\n    /**\n     * If there is a previous li, we need to move sub-lis to the previous li.\n     * As we need to delete first, we will:\n     * 1. insert a temporary li: tempLi\n     * 2. move sub-lis to tempLi\n     * 3. delete\n     * 4. move sub-lis from tempLi to the previous li.\n     * 5. remove tempLi\n     */\n    if (previousLiPath) {\n      const previousLi = getNodeEntry<TElement>(editor, previousLiPath);\n\n      // 1\n      let tempLiPath = Path.next(liPath);\n      insertElements(\n        editor,\n        {\n          type: getPluginType(editor, ELEMENT_LI),\n          children: [\n            {\n              type: getPluginType(editor, ELEMENT_LIC),\n              children: [{ text: '' }],\n            },\n          ],\n        },\n        { at: tempLiPath }\n      );\n\n      const tempLi = getNodeEntry<TElement>(editor, tempLiPath);\n      const tempLiPathRef = createPathRef(editor, tempLi[1]);\n\n      // 2\n      moveListItemSublistItemsToListItemSublist(editor, {\n        fromListItem: listItem,\n        toListItem: tempLi,\n      });\n\n      // 3\n      deleteMerge(editor, {\n        reverse,\n      });\n\n      tempLiPath = tempLiPathRef.unref()!;\n\n      // 4\n      moveListItemSublistItemsToListItemSublist(editor, {\n        fromListItem: [tempLi[0], tempLiPath],\n        toListItem: previousLi,\n      });\n\n      // 5\n      removeNodes(editor, { at: tempLiPath });\n\n      success = true;\n      return;\n    }\n\n    // If it's the first li, move the sublist to the parent list\n    moveListItemsToList(editor, {\n      fromListItem: listItem,\n      toList: list,\n      toListIndex: 1,\n    });\n  });\n\n  return success;\n};\n","import {\n  ELEMENT_DEFAULT,\n  findNode,\n  getBlockAbove,\n  getCommonNode,\n  getNodeEntries,\n  getPluginOptions,\n  getPluginType,\n  isCollapsed,\n  isElement,\n  isRangeAcrossBlocks,\n  PlateEditor,\n  setElements,\n  TElement,\n  Value,\n  withoutNormalizing,\n  wrapNodes,\n} from '@udecode/plate-core';\nimport { Range } from 'slate';\nimport { ELEMENT_LI, ELEMENT_LIC } from '../createListPlugin';\nimport { getListItemEntry, getListTypes } from '../queries';\nimport { ListPlugin } from '../types';\nimport { unwrapList } from './unwrapList';\n\nexport const toggleList = <V extends Value>(\n  editor: PlateEditor<V>,\n  { type, pluginKey = type }: { type: string; pluginKey?: string }\n) =>\n  withoutNormalizing(editor, () => {\n    if (!editor.selection) {\n      return;\n    }\n\n    const { validLiChildrenTypes } = getPluginOptions<ListPlugin, V>(\n      editor,\n      pluginKey\n    );\n\n    if (isCollapsed(editor.selection) || !isRangeAcrossBlocks(editor)) {\n      // selection is collapsed\n      const res = getListItemEntry(editor);\n\n      if (res) {\n        const { list } = res;\n        if (list[0].type !== type) {\n          setElements(\n            editor,\n            { type },\n            {\n              at: editor.selection,\n              match: (n) =>\n                isElement(n) && getListTypes(editor).includes(n.type),\n              mode: 'lowest',\n            }\n          );\n        } else {\n          unwrapList(editor);\n        }\n      } else {\n        const list = { type, children: [] };\n        wrapNodes<TElement>(editor, list);\n\n        const _nodes = getNodeEntries(editor, {\n          match: { type: getPluginType(editor, ELEMENT_DEFAULT) },\n        });\n        const nodes = Array.from(_nodes);\n\n        const blockAbove = getBlockAbove(editor, {\n          match: { type: validLiChildrenTypes },\n        });\n        if (!blockAbove) {\n          setElements(editor, {\n            type: getPluginType(editor, ELEMENT_LIC),\n          });\n        }\n\n        const listItem = {\n          type: getPluginType(editor, ELEMENT_LI),\n          children: [],\n        };\n\n        for (const [, path] of nodes) {\n          wrapNodes<TElement>(editor, listItem, {\n            at: path,\n          });\n        }\n      }\n    } else {\n      // selection is a range\n\n      const [startPoint, endPoint] = Range.edges(editor.selection!);\n      const commonEntry = getCommonNode<TElement>(\n        editor,\n        startPoint.path,\n        endPoint.path\n      );\n\n      if (\n        getListTypes(editor).includes(commonEntry[0].type) ||\n        (commonEntry[0] as TElement).type === getPluginType(editor, ELEMENT_LI)\n      ) {\n        if ((commonEntry[0] as TElement).type !== type) {\n          const startList = findNode(editor, {\n            at: Range.start(editor.selection),\n            match: { type: getListTypes(editor) },\n            mode: 'lowest',\n          });\n          const endList = findNode(editor, {\n            at: Range.end(editor.selection),\n            match: { type: getListTypes(editor) },\n            mode: 'lowest',\n          });\n          const rangeLength = Math.min(\n            startList![1].length,\n            endList![1].length\n          );\n          setElements(\n            editor,\n            { type },\n            {\n              at: editor.selection,\n              match: (n, path) =>\n                isElement(n) &&\n                getListTypes(editor).includes(n.type) &&\n                path.length >= rangeLength,\n              mode: 'all',\n            }\n          );\n        } else {\n          unwrapList(editor);\n        }\n      } else {\n        const rootPathLength = commonEntry[1].length;\n        const _nodes = getNodeEntries<TElement>(editor, {\n          mode: 'all',\n        });\n        const nodes = Array.from(_nodes).filter(\n          ([, path]) => path.length === rootPathLength + 1\n        );\n\n        nodes.forEach((n) => {\n          if (getListTypes(editor).includes(n[0].type)) {\n            setElements(\n              editor,\n              { type },\n              {\n                at: n[1],\n                match: (_n) =>\n                  isElement(_n) && getListTypes(editor).includes(_n.type),\n                mode: 'all',\n              }\n            );\n          } else {\n            if (!validLiChildrenTypes?.includes(n[0].type)) {\n              setElements(\n                editor,\n                { type: getPluginType(editor, ELEMENT_LIC) },\n                { at: n[1] }\n              );\n            }\n\n            const listItem = {\n              type: getPluginType(editor, ELEMENT_LI),\n              children: [],\n            };\n            wrapNodes<TElement>(editor, listItem, {\n              at: n[1],\n            });\n\n            const list = { type, children: [] };\n            wrapNodes<TElement>(editor, list, { at: n[1] });\n          }\n        });\n      }\n    }\n  });\n","import { PlateEditor, Value } from '@udecode/plate-core';\nimport { moveListItems, MoveListItemsOptions } from './moveListItems';\n\nexport type UnindentListItemsOptions = Omit<MoveListItemsOptions, 'increase'>;\n\nexport const unindentListItems = <V extends Value>(\n  editor: PlateEditor<V>,\n  options: UnindentListItemsOptions = {}\n) => moveListItems(editor, { ...options, increase: false });\n","import {\n  getPluginType,\n  Hotkeys,\n  isCollapsed,\n  KeyboardHandlerReturnType,\n  PlateEditor,\n  select,\n  someNode,\n  unhangRange,\n  Value,\n  WithPlatePlugin,\n} from '@udecode/plate-core';\nimport isHotkey from 'is-hotkey';\nimport { castArray } from 'lodash';\nimport { Range } from 'slate';\nimport { ELEMENT_LI } from './createListPlugin';\nimport { moveListItems, toggleList } from './transforms';\nimport { ListPlugin } from './types';\n\nexport const onKeyDownList = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>\n>(\n  editor: E,\n  {\n    type,\n    options: { hotkey, enableResetOnShiftTab },\n  }: WithPlatePlugin<ListPlugin, V, E>\n): KeyboardHandlerReturnType => (e) => {\n  if (e.defaultPrevented) return;\n\n  const isTab = Hotkeys.isTab(editor, e);\n  const isUntab = Hotkeys.isUntab(editor, e);\n\n  let workRange = editor.selection;\n\n  if (editor.selection && (isTab || isUntab)) {\n    const { selection } = editor;\n\n    // Unhang the expanded selection\n    if (!isCollapsed(editor.selection)) {\n      const { anchor, focus } = Range.isBackward(selection)\n        ? { anchor: { ...selection.focus }, focus: { ...selection.anchor } }\n        : { anchor: { ...selection.anchor }, focus: { ...selection.focus } };\n\n      // This is a workaround for a Slate bug\n      // See: https://github.com/ianstormtaylor/slate/pull/5039\n      const unHungRange = unhangRange(editor, { anchor, focus });\n      if (unHungRange) {\n        workRange = unHungRange;\n        select(editor, unHungRange);\n      }\n    }\n\n    // check if we're in a list context.\n    const listSelected = someNode(editor, {\n      match: { type: getPluginType(editor, ELEMENT_LI) },\n    });\n\n    if (workRange && listSelected) {\n      e.preventDefault();\n      moveListItems(editor, {\n        at: workRange,\n        increase: isTab,\n        enableResetOnShiftTab,\n      });\n      return true;\n    }\n  }\n\n  if (!hotkey) return;\n\n  const hotkeys = castArray(hotkey);\n\n  for (const _hotkey of hotkeys) {\n    if (isHotkey(_hotkey)(e as any)) {\n      toggleList(editor, { type: type! });\n    }\n  }\n};\n","import {\n  deleteMerge,\n  ELEMENT_DEFAULT,\n  getPluginType,\n  isFirstChild,\n  isSelectionAtBlockStart,\n  mockPlugin,\n  PlateEditor,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-core';\nimport {\n  onKeyDownResetNode,\n  ResetNodePlugin,\n  SIMULATE_BACKSPACE,\n} from '@udecode/plate-reset-node';\nimport { getListItemEntry } from './queries/getListItemEntry';\nimport { isListNested } from './queries/isListNested';\nimport { removeFirstListItem } from './transforms/removeFirstListItem';\nimport { removeListItem } from './transforms/removeListItem';\nimport { unwrapList } from './transforms/unwrapList';\nimport { ELEMENT_LI } from './createListPlugin';\n\nexport const deleteBackwardList = <V extends Value>(\n  editor: PlateEditor<V>,\n  unit: 'character' | 'word' | 'line' | 'block'\n) => {\n  const res = getListItemEntry(editor, {});\n\n  let moved: boolean | undefined = false;\n\n  if (res) {\n    const { list, listItem } = res;\n\n    if (\n      isSelectionAtBlockStart(editor, {\n        match: (node) => node.type === getPluginType(editor, ELEMENT_LI),\n      })\n    ) {\n      withoutNormalizing(editor, () => {\n        moved = removeFirstListItem(editor, { list, listItem });\n        if (moved) return true;\n\n        moved = removeListItem(editor, { list, listItem });\n        if (moved) return true;\n\n        if (isFirstChild(listItem[1]) && !isListNested(editor, list[1])) {\n          onKeyDownResetNode(\n            editor as any,\n            mockPlugin<ResetNodePlugin>({\n              options: {\n                rules: [\n                  {\n                    types: [getPluginType(editor, ELEMENT_LI)],\n                    defaultType: getPluginType(editor, ELEMENT_DEFAULT),\n                    hotkey: 'backspace',\n                    predicate: () => isSelectionAtBlockStart(editor),\n                    onReset: (e) => unwrapList(e),\n                  },\n                ],\n              },\n            })\n          )(SIMULATE_BACKSPACE);\n          moved = true;\n          return;\n        }\n\n        deleteMerge(editor, {\n          unit,\n          reverse: true,\n        });\n        moved = true;\n      });\n    }\n  }\n\n  return moved;\n};\n","import {\n  getBlockAbove,\n  getChildren,\n  getEditorString,\n  getNode,\n  getNodeEntries,\n  getNodeEntry,\n  getParentNode,\n  getPluginType,\n  getPointAfter,\n  isSelectionAtBlockEnd,\n  PlateEditor,\n  removeNodes,\n  TElement,\n  TElementEntry,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-core';\nimport { Path } from 'slate';\nimport { ELEMENT_LI } from './createListPlugin';\nimport { getListItemEntry, getListRoot, hasListChild } from './queries';\nimport {\n  moveListItemsToList,\n  moveListItemUp,\n  removeFirstListItem,\n  removeListItem,\n} from './transforms';\n\nconst selectionIsNotInAListHandler = <V extends Value>(\n  editor: PlateEditor<V>\n): boolean => {\n  const pointAfterSelection = getPointAfter(\n    editor,\n    editor.selection!.focus.path\n  );\n\n  if (pointAfterSelection) {\n    // there is a block after it\n    const nextSiblingListRes = getListItemEntry(editor, {\n      at: pointAfterSelection,\n    });\n\n    if (nextSiblingListRes) {\n      // the next block is a list\n      const { listItem } = nextSiblingListRes;\n      const parentBlockEntity = getBlockAbove(editor, {\n        at: editor.selection!.anchor,\n      });\n\n      if (!getEditorString(editor, parentBlockEntity![1])) {\n        // the selected block is empty\n        removeNodes(editor);\n\n        return true;\n      }\n\n      if (hasListChild(editor, listItem[0])) {\n        // the next block has children, so we have to move the first item up\n        const sublistRes = getListItemEntry(editor, {\n          at: [...listItem[1], 1, 0, 0],\n        });\n\n        moveListItemUp(editor, sublistRes!);\n      }\n    }\n  }\n\n  return false;\n};\n\nconst selectionIsInAListHandler = <V extends Value>(\n  editor: PlateEditor<V>,\n  res: { list: TElementEntry; listItem: TElementEntry }\n): boolean => {\n  const { listItem } = res;\n\n  // if it has no children\n  if (!hasListChild(editor, listItem[0])) {\n    const liType = getPluginType(editor, ELEMENT_LI);\n    const _nodes = getNodeEntries(editor, {\n      at: listItem[1],\n      mode: 'lowest',\n      match: (node, path) => {\n        if (path.length === 0) {\n          return false;\n        }\n\n        const isNodeLi = (node as TElement).type === liType;\n        const isSiblingOfNodeLi =\n          getNode<TElement>(editor, Path.next(path))?.type === liType;\n\n        return isNodeLi && isSiblingOfNodeLi;\n      },\n    });\n    const liWithSiblings = Array.from(_nodes, (entry) => entry[1])[0];\n\n    if (!liWithSiblings) {\n      // there are no more list item in the list\n      const pointAfterListItem = getPointAfter(editor, listItem[1]);\n\n      if (pointAfterListItem) {\n        // there is a block after it\n        const nextSiblingListRes = getListItemEntry(editor, {\n          at: pointAfterListItem,\n        });\n\n        if (nextSiblingListRes) {\n          // it is a list so we merge the lists\n          const listRoot = getListRoot(editor, listItem[1]);\n\n          moveListItemsToList(editor, {\n            fromList: nextSiblingListRes.list,\n            toList: listRoot,\n            deleteFromList: true,\n          });\n\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    const siblingListItem = getNodeEntry<TElement>(\n      editor,\n      Path.next(liWithSiblings)\n    );\n\n    const siblingList = getParentNode<TElement>(editor, siblingListItem[1]);\n\n    if (\n      siblingList &&\n      removeListItem(editor, {\n        list: siblingList,\n        listItem: siblingListItem,\n        reverse: false,\n      })\n    ) {\n      return true;\n    }\n\n    // if (skipDefaultDelete) return skipDefaultDelete;\n\n    return false;\n  }\n\n  // if it has children\n  const nestedList = getNodeEntry<TElement>(\n    editor,\n    Path.next([...listItem[1], 0])\n  );\n  const nestedListItem = getChildren<TElement>(nestedList)[0];\n\n  if (\n    removeFirstListItem(editor, {\n      list: nestedList,\n      listItem: nestedListItem,\n    })\n  ) {\n    return true;\n  }\n\n  if (\n    removeListItem(editor, {\n      list: nestedList,\n      listItem: nestedListItem,\n    })\n  ) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const deleteForwardList = <V extends Value>(editor: PlateEditor<V>) => {\n  let skipDefaultDelete = false;\n\n  if (!editor?.selection) {\n    return skipDefaultDelete;\n  }\n\n  if (!isSelectionAtBlockEnd(editor)) {\n    return skipDefaultDelete;\n  }\n\n  withoutNormalizing(editor, () => {\n    const res = getListItemEntry(editor, {});\n\n    if (!res) {\n      skipDefaultDelete = selectionIsNotInAListHandler(editor);\n      return;\n    }\n\n    skipDefaultDelete = selectionIsInAListHandler(editor, res);\n  });\n\n  return skipDefaultDelete;\n};\n","import {\n  createPathRef,\n  deleteMerge,\n  getAboveNode,\n  getEndPoint,\n  getParentNode,\n  getPluginType,\n  getStartPoint,\n  PlateEditor,\n  removeNodes,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-core';\nimport { Range } from 'slate';\nimport { getHighestEmptyList } from './queries/getHighestEmptyList';\nimport { hasListChild } from './queries/hasListChild';\nimport { isAcrossListItems } from './queries/isAcrossListItems';\nimport { ELEMENT_LI } from './createListPlugin';\n\nexport const deleteFragmentList = <V extends Value>(editor: PlateEditor<V>) => {\n  let deleted = false;\n\n  withoutNormalizing(editor, () => {\n    // Selection should be across list items\n    if (!isAcrossListItems(editor)) return;\n\n    /**\n     * Check if the end li can be deleted (if it has no sublist).\n     * Store the path ref to delete it after deleteMerge.\n     */\n    const end = getEndPoint(editor, editor.selection as Range);\n    const liEnd = getAboveNode(editor, {\n      at: end,\n      match: { type: getPluginType(editor, ELEMENT_LI) },\n    });\n    const liEndCanBeDeleted = liEnd && !hasListChild(editor, liEnd[0]);\n    const liEndPathRef = liEndCanBeDeleted\n      ? createPathRef(editor, liEnd![1])\n      : undefined;\n\n    /**\n     * Delete fragment and move end block children to start block\n     */\n    deleteMerge(editor);\n\n    const start = getStartPoint(editor, editor.selection as Range);\n    const liStart = getAboveNode(editor, {\n      at: start,\n      match: { type: getPluginType(editor, ELEMENT_LI) },\n    });\n\n    if (liEndPathRef) {\n      const liEndPath = liEndPathRef.unref()!;\n\n      const listStart = liStart && getParentNode(editor, liStart[1]);\n\n      const deletePath = getHighestEmptyList(editor, {\n        liPath: liEndPath,\n        diffListPath: listStart?.[1],\n      });\n\n      if (deletePath) {\n        removeNodes(editor, { at: deletePath });\n      }\n\n      deleted = true;\n    }\n  });\n\n  return deleted;\n};\n","import {\n  ELEMENT_DEFAULT,\n  getPluginType,\n  isBlockAboveEmpty,\n  mockPlugin,\n  PlateEditor,\n  Value,\n} from '@udecode/plate-core';\nimport {\n  onKeyDownResetNode,\n  ResetNodePlugin,\n  SIMULATE_BACKSPACE,\n} from '@udecode/plate-reset-node';\nimport { getListItemEntry } from './queries/getListItemEntry';\nimport { insertListItem } from './transforms/insertListItem';\nimport { moveListItemUp } from './transforms/moveListItemUp';\nimport { unwrapList } from './transforms/unwrapList';\nimport { ELEMENT_LI } from './createListPlugin';\n\nexport const insertBreakList = <V extends Value>(editor: PlateEditor<V>) => {\n  if (!editor.selection) return;\n\n  const res = getListItemEntry(editor, {});\n  let moved: boolean | undefined;\n\n  // If selection is in a li\n  if (res) {\n    const { list, listItem } = res;\n\n    // If selected li is empty, move it up.\n    if (isBlockAboveEmpty(editor)) {\n      moved = moveListItemUp(editor, {\n        list,\n        listItem,\n      });\n\n      if (moved) return true;\n    }\n  }\n\n  const didReset = onKeyDownResetNode(\n    editor as any,\n    mockPlugin<ResetNodePlugin>({\n      options: {\n        rules: [\n          {\n            types: [getPluginType(editor, ELEMENT_LI)],\n            defaultType: getPluginType(editor, ELEMENT_DEFAULT),\n            predicate: () => !moved && isBlockAboveEmpty(editor),\n            onReset: (_editor) => unwrapList(_editor),\n          },\n        ],\n      },\n    })\n  )(SIMULATE_BACKSPACE as any);\n  if (didReset) return true;\n\n  /**\n   * If selection is in li > p, insert li.\n   */\n  if (!moved) {\n    const inserted = insertListItem(editor);\n    if (inserted) return true;\n  }\n};\n","import {\n  findNode,\n  getCommonNode,\n  getNode,\n  getNodes,\n  getNodeString,\n  getNodeTexts,\n  getPlugin,\n  insertElements,\n  insertFragment,\n  isElement,\n  PlateEditor,\n  removeNodes,\n  TAncestor,\n  TAncestorEntry,\n  TDescendant,\n  TDescendantEntry,\n  TElement,\n  TElementEntry,\n  TText,\n  Value,\n  WithPlatePlugin,\n} from '@udecode/plate-core';\nimport { Path } from 'slate';\nimport { ELEMENT_LI } from './createListPlugin';\nimport { getListItemContentType, getListItemType, isListRoot } from './queries';\n\nexport const insertFragmentList = <V extends Value>(editor: PlateEditor<V>) => {\n  const { insertFragment: _insertFragment } = editor;\n\n  const listItemPlugin = getPlugin<{}, V>(editor, ELEMENT_LI);\n  const listItemType = getListItemType(editor);\n  const listItemContentType = getListItemContentType(editor);\n\n  const getFirstAncestorOfType = (\n    root: TDescendant,\n    entry: TDescendantEntry,\n    { type }: WithPlatePlugin\n  ): TAncestorEntry => {\n    let ancestor: Path = Path.parent(entry[1]);\n    while (getNode<TElement>(root, ancestor)!.type !== type) {\n      ancestor = Path.parent(ancestor);\n    }\n\n    return [getNode<TAncestor>(root, ancestor)!, ancestor];\n  };\n\n  const findListItemsWithContent = (first: TDescendant): TDescendant[] => {\n    let prev = null;\n    let node = first;\n    while (\n      isListRoot(editor, node) ||\n      (node.type === listItemType &&\n        (node.children as TElement[])[0].type !== listItemContentType)\n    ) {\n      prev = node;\n      [node] = node.children as TDescendant[];\n    }\n\n    return prev ? (prev.children as TDescendant[]) : [node];\n  };\n\n  /**\n   * Removes the \"empty\" leading lis. Empty in this context means lis only with other lis as children.\n   *\n   * @returns If argument is not a list root, returns it, otherwise returns ul[] or li[].\n   */\n  const trimList = (listRoot: TDescendant): TElement[] => {\n    if (!isListRoot(editor, listRoot)) {\n      return [listRoot as TElement];\n    }\n\n    const _texts = getNodeTexts(listRoot);\n    const textEntries = Array.from(_texts);\n\n    const commonAncestorEntry = textEntries.reduce(\n      (commonAncestor, textEntry) =>\n        Path.isAncestor(commonAncestor[1], textEntry[1])\n          ? commonAncestor\n          : (getCommonNode(listRoot, textEntry[1], commonAncestor[1]) as any),\n      // any list item would do, we grab the first one\n      getFirstAncestorOfType(listRoot, textEntries[0], listItemPlugin as any)\n    );\n\n    const [first, ...rest] = isListRoot(\n      editor,\n      commonAncestorEntry[0] as TDescendant\n    )\n      ? (commonAncestorEntry[0] as any).children\n      : [commonAncestorEntry[0]];\n    return [...findListItemsWithContent(first), ...rest];\n  };\n\n  const wrapNodeIntoListItem = (node: TDescendant): TElement => {\n    return node.type === listItemType\n      ? (node as TElement)\n      : ({\n          type: listItemType,\n          children: [node],\n        } as TElement);\n  };\n\n  /**\n   * Checks if the fragment only consists of a single LIC in which case it is considered the user's intention was to copy a text, not a list\n   */\n  const isSingleLic = (fragment: TDescendant[]) => {\n    const isFragmentOnlyListRoot =\n      fragment.length === 1 && isListRoot(editor, fragment[0]);\n\n    return (\n      isFragmentOnlyListRoot &&\n      [...getNodes({ children: fragment } as any)]\n        .filter((entry): entry is TElementEntry => isElement(entry[0]))\n        .filter(([node]) => node.type === listItemContentType).length === 1\n    );\n  };\n\n  const getTextAndListItemNodes = (\n    fragment: TDescendant[],\n    liEntry: TElementEntry,\n    licEntry: TElementEntry\n  ) => {\n    const [, liPath] = liEntry;\n    const [licNode, licPath] = licEntry;\n    const isEmptyNode = !getNodeString(licNode);\n    const [first, ...rest] = fragment\n      .flatMap(trimList)\n      .map(wrapNodeIntoListItem);\n    let textNode: TText;\n    let listItemNodes: TElement[];\n    if (isListRoot(editor, fragment[0])) {\n      if (isSingleLic(fragment)) {\n        textNode = first as any;\n        listItemNodes = rest as TElement[];\n      } else if (isEmptyNode) {\n        // FIXME: is there a more direct way to set this?\n        const li = getNode(editor, liPath);\n        const [, ...currentSublists] = li!.children as TElement[];\n        const [newLic, ...newSublists] = first.children as TElement[];\n        insertElements(editor, newLic, {\n          at: Path.next(licPath),\n          select: true,\n        });\n        removeNodes(editor, {\n          at: licPath,\n        });\n        if (newSublists?.length) {\n          if (currentSublists?.length) {\n            // TODO: any better way to compile the path where the LIs of the newly inserted element will be inserted?\n            const path = [...liPath, 1, 0];\n            insertElements(editor, newSublists[0].children as TElement[], {\n              at: path,\n              select: true,\n            });\n          } else {\n            insertElements(editor, newSublists, {\n              at: Path.next(licPath),\n              select: true,\n            });\n          }\n        }\n\n        textNode = { text: '' };\n        listItemNodes = rest as TElement[];\n      } else {\n        textNode = { text: '' };\n        listItemNodes = [first as TElement, ...(rest as TElement[])];\n      }\n    } else {\n      textNode = first as any;\n      listItemNodes = rest as TElement[];\n    }\n\n    return { textNode, listItemNodes };\n  };\n\n  return (fragment: TDescendant[]) => {\n    let liEntry = findNode<TElement>(editor, {\n      match: { type: listItemType },\n      mode: 'lowest',\n    });\n    // not inserting into a list item, delegate to other plugins\n    if (!liEntry) {\n      return _insertFragment(\n        isListRoot(editor, fragment[0]) ? [{ text: '' }, ...fragment] : fragment\n      );\n    }\n\n    // delete selection (if necessary) so that it can check if needs to insert into an empty block\n    insertFragment<TText>(editor, [{ text: '' }]);\n\n    // refetch to find the currently selected LI after the deletion above is performed\n    liEntry = findNode<TElement>(editor, {\n      match: { type: listItemType },\n      mode: 'lowest',\n    });\n\n    const licEntry = findNode<TElement>(editor, {\n      match: { type: listItemContentType },\n      mode: 'lowest',\n    });\n    if (!licEntry) {\n      return _insertFragment(\n        isListRoot(editor, fragment[0]) ? [{ text: '' }, ...fragment] : fragment\n      );\n    }\n\n    const { textNode, listItemNodes } = getTextAndListItemNodes(\n      fragment,\n      liEntry!,\n      licEntry\n    );\n\n    insertFragment<TText>(editor, [textNode]); // insert text if needed\n\n    const [, liPath] = liEntry!;\n\n    return insertElements(editor, listItemNodes, {\n      at: Path.next(liPath),\n      select: true,\n    });\n  };\n};\n","import {\n  createPathRef,\n  getChildren,\n  getParentNode,\n  getPluginType,\n  insertEmptyElement,\n  isBlock,\n  match,\n  moveNodes,\n  PlateEditor,\n  removeNodes,\n  setElements,\n  TDescendant,\n  TElement,\n  TElementEntry,\n  TNodeEntry,\n  Value,\n} from '@udecode/plate-core';\nimport { Path, PathRef } from 'slate';\nimport { ELEMENT_LIC, ELEMENT_OL, ELEMENT_UL } from '../createListPlugin';\nimport { getListTypes } from '../queries';\nimport { moveListItemUp } from '../transforms';\nimport { ListPlugin } from '../types';\n\n/**\n * Recursively get all the:\n * - block children\n * - inline children except those at excludeDepth\n */\nexport const getDeepInlineChildren = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    children,\n  }: {\n    children: TNodeEntry<TDescendant>[];\n  }\n) => {\n  const inlineChildren: TNodeEntry<TDescendant>[] = [];\n\n  for (const child of children) {\n    if (isBlock(editor, child[0])) {\n      inlineChildren.push(\n        ...getDeepInlineChildren(editor, {\n          children: getChildren(child),\n        })\n      );\n    } else {\n      inlineChildren.push(child);\n    }\n  }\n\n  return inlineChildren;\n};\n\n/**\n * If the list item has no child: insert an empty list item container.\n * Else: move the children that are not valid to the list item container.\n */\nexport const normalizeListItem = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    listItem,\n    validLiChildrenTypes = [],\n  }: { listItem: TElementEntry } & ListPlugin\n) => {\n  let changed = false;\n\n  const allValidLiChildrenTypes = [\n    getPluginType(editor, ELEMENT_UL),\n    getPluginType(editor, ELEMENT_OL),\n    getPluginType(editor, ELEMENT_LIC),\n    ...validLiChildrenTypes,\n  ];\n\n  const [, liPath] = listItem;\n  const liChildren = getChildren<TElement>(listItem);\n\n  // Get invalid (type) li children path refs to be moved\n  const invalidLiChildrenPathRefs = liChildren\n    .filter(([child]) => !allValidLiChildrenTypes.includes(child.type))\n    .map(([, childPath]) => createPathRef(editor, childPath));\n\n  const firstLiChild: TElementEntry | undefined = liChildren[0];\n  const [firstLiChildNode, firstLiChildPath] = firstLiChild ?? [];\n\n  // If li has no child or inline child, insert lic\n  if (!firstLiChild || !isBlock(editor, firstLiChildNode)) {\n    insertEmptyElement(editor, getPluginType(editor, ELEMENT_LIC), {\n      at: liPath.concat([0]),\n    });\n    return true;\n  }\n\n  // If first li child is a block but not lic, set it to lic\n  if (\n    isBlock(editor, firstLiChildNode) &&\n    !match(firstLiChildNode, [], {\n      type: getPluginType(editor, ELEMENT_LIC),\n    })\n  ) {\n    if (\n      match(firstLiChildNode, [], {\n        type: getListTypes(editor),\n      })\n    ) {\n      // the listItem has no lic so we move the children up a level\n      const parent = getParentNode(editor, listItem[1]);\n      const sublist = firstLiChild;\n      const children = getChildren<TElement>(firstLiChild).reverse();\n      children.forEach((c) => {\n        moveListItemUp(editor, {\n          list: sublist,\n          listItem: c,\n        });\n      });\n\n      removeNodes(editor, { at: [...parent![1], 0] });\n\n      return true;\n    }\n\n    // Allow block elements listed as valid li children types to be a first child instead of LIC\n    if (validLiChildrenTypes.includes(firstLiChildNode.type)) {\n      return true;\n    }\n\n    setElements(\n      editor,\n      {\n        type: getPluginType(editor, ELEMENT_LIC),\n      },\n      {\n        at: firstLiChildPath,\n      }\n    );\n\n    changed = true;\n  }\n\n  const licChildren = getChildren(firstLiChild);\n\n  if (licChildren.length) {\n    const blockPathRefs: PathRef[] = [];\n    const inlineChildren: TNodeEntry[] = [];\n\n    // Check that lic has no block children\n    for (const licChild of licChildren) {\n      if (!isBlock(editor, licChild[0])) {\n        break;\n      }\n\n      blockPathRefs.push(createPathRef(editor, licChild[1]));\n\n      inlineChildren.push(\n        ...getDeepInlineChildren(editor, {\n          children: getChildren(licChild),\n        })\n      );\n    }\n\n    const to = Path.next(licChildren[licChildren.length - 1]?.[1]);\n\n    // Move lic nested inline children to its children\n    inlineChildren.reverse().forEach(([, path]) => {\n      moveNodes(editor, {\n        at: path,\n        to,\n      });\n    });\n\n    // Remove lic block children\n    blockPathRefs.forEach((pathRef) => {\n      const path = pathRef.unref();\n\n      path &&\n        removeNodes(editor, {\n          at: path,\n        });\n    });\n\n    if (blockPathRefs.length) {\n      changed = true;\n    }\n  }\n\n  if (changed) return true;\n\n  // Ensure that any text nodes under the list are inside the list item container\n  invalidLiChildrenPathRefs.reverse().forEach((ref) => {\n    const path = ref.unref();\n\n    path &&\n      moveNodes(editor, {\n        at: path,\n        to: firstLiChildPath.concat([0]),\n      });\n  });\n\n  return !!invalidLiChildrenPathRefs.length;\n};\n","import {\n  getNodeEntry,\n  getParentNode,\n  match,\n  moveNodes,\n  PlateEditor,\n  TElement,\n  TElementEntry,\n  Value,\n} from '@udecode/plate-core';\nimport { Path } from 'slate';\nimport { getListTypes } from '../queries';\n\n// When pasting from e.g. Google Docs, the structure of nested lists like \"ul -> ul\"\n// should be normalized to \"ul -> li -> lic + ul\".\n// In other words, a nested list as a direct children of a list should be moved into a previous list item sibling\nexport const normalizeNestedList = <V extends Value>(\n  editor: PlateEditor<V>,\n  { nestedListItem }: { nestedListItem: TElementEntry }\n) => {\n  const [, path] = nestedListItem;\n\n  const parentNode = getParentNode(editor, path);\n  const hasParentList =\n    parentNode && match(parentNode[0], [], { type: getListTypes(editor) });\n  if (!hasParentList) {\n    return false;\n  }\n\n  let previousListItemPath: Path;\n  try {\n    previousListItemPath = Path.previous(path);\n  } catch (e) {\n    return false;\n  }\n\n  // Previous sibling is the new parent\n  const previousSiblingItem = getNodeEntry<TElement>(\n    editor,\n    previousListItemPath\n  );\n\n  if (previousSiblingItem) {\n    const [, previousPath] = previousSiblingItem;\n    const newPath = previousPath.concat([1]);\n\n    // Move the current item to the sublist\n    moveNodes(editor, {\n      at: path,\n      to: newPath,\n    });\n\n    return true;\n  }\n};\n","import {\n  ELEMENT_DEFAULT,\n  getChildren,\n  getNode,\n  getParentNode,\n  getPluginType,\n  getPreviousPath,\n  isElement,\n  match,\n  PlateEditor,\n  removeNodes,\n  setElements,\n  TElement,\n  TNodeEntry,\n  Value,\n  wrapNodes,\n} from '@udecode/plate-core';\nimport { Path } from 'slate';\nimport { ELEMENT_LI, ELEMENT_LIC } from '../createListPlugin';\nimport { getListTypes, isListRoot } from '../queries';\nimport { moveListItemsToList } from '../transforms';\nimport { ListPlugin } from '../types';\nimport { normalizeListItem } from './normalizeListItem';\nimport { normalizeNestedList } from './normalizeNestedList';\n\n/**\n * Normalize list node to force the ul>li>p+ul structure.\n */\nexport const normalizeList = <V extends Value>(\n  editor: PlateEditor<V>,\n  { validLiChildrenTypes }: ListPlugin\n) => {\n  const { normalizeNode } = editor;\n  const liType = getPluginType(editor, ELEMENT_LI);\n  const licType = getPluginType(editor, ELEMENT_LIC);\n  const defaultType = getPluginType(editor, ELEMENT_DEFAULT);\n\n  return ([node, path]: TNodeEntry) => {\n    if (!isElement(node)) {\n      return normalizeNode([node, path]);\n    }\n\n    if (isListRoot(editor, node)) {\n      const nonLiChild = getChildren([node, path]).find(\n        ([child]) => child.type !== liType\n      );\n\n      if (nonLiChild) {\n        return wrapNodes<TElement>(\n          editor,\n          { type: liType, children: [] },\n          { at: nonLiChild[1] }\n        );\n      }\n    }\n\n    // remove empty list\n    if (match(node, [], { type: getListTypes(editor) })) {\n      if (\n        !node.children.length ||\n        !node.children.find((item) => item.type === liType)\n      ) {\n        return removeNodes(editor, { at: path });\n      }\n\n      const nextPath = Path.next(path);\n      const nextNode = getNode<TElement>(editor, nextPath);\n\n      // Has a list afterwards with the same type\n      if (nextNode?.type === node.type) {\n        moveListItemsToList(editor, {\n          fromList: [nextNode, nextPath],\n          toList: [node, path],\n          deleteFromList: true,\n        });\n      }\n\n      const prevPath = getPreviousPath(path) as Path;\n      const prevNode = getNode<TElement>(editor, prevPath);\n\n      // Has a list before with the same type\n      if (prevNode?.type === node.type) {\n        editor.normalizeNode([prevNode, prevPath]);\n\n        // early return since this node will no longer exists\n        return;\n      }\n\n      if (normalizeNestedList(editor, { nestedListItem: [node, path] })) {\n        return;\n      }\n    }\n\n    if (node.type === getPluginType(editor, ELEMENT_LI)) {\n      if (\n        normalizeListItem(editor, {\n          listItem: [node, path],\n          validLiChildrenTypes,\n        })\n      ) {\n        return;\n      }\n    }\n\n    // LIC should have LI parent. If not, set LIC to DEFAULT type.\n    if (node.type === licType && licType !== defaultType) {\n      if (getParentNode(editor, path)?.[0].type !== liType) {\n        setElements(editor, { type: defaultType }, { at: path });\n        return;\n      }\n    }\n\n    normalizeNode([node, path]);\n  };\n};\n","import { PlateEditor, Value, WithPlatePlugin } from '@udecode/plate-core';\nimport { deleteBackwardList } from './deleteBackwardList';\nimport { deleteForwardList } from './deleteForwardList';\nimport { deleteFragmentList } from './deleteFragmentList';\nimport { insertBreakList } from './insertBreakList';\nimport { insertFragmentList } from './insertFragmentList';\nimport { normalizeList } from './normalizers';\nimport { ListPlugin } from './types';\n\nexport const withList = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>\n>(\n  editor: E,\n  { options: { validLiChildrenTypes } }: WithPlatePlugin<ListPlugin, V, E>\n) => {\n  const { insertBreak, deleteBackward, deleteForward, deleteFragment } = editor;\n\n  editor.insertBreak = () => {\n    if (insertBreakList(editor)) return;\n\n    insertBreak();\n  };\n\n  editor.deleteBackward = (unit) => {\n    if (deleteBackwardList(editor, unit)) return;\n\n    deleteBackward(unit);\n  };\n\n  editor.deleteForward = (unit) => {\n    if (deleteForwardList(editor)) return;\n\n    deleteForward(unit);\n  };\n\n  editor.deleteFragment = (direction) => {\n    if (deleteFragmentList(editor)) return;\n\n    deleteFragment(direction);\n  };\n\n  editor.insertFragment = insertFragmentList(editor);\n\n  editor.normalizeNode = normalizeList(editor, { validLiChildrenTypes });\n\n  return editor;\n};\n","import {\n  createPluginFactory,\n  KEY_DESERIALIZE_HTML,\n  PlatePlugin,\n  someNode,\n} from '@udecode/plate-core';\nimport { onKeyDownList } from './onKeyDownList';\nimport { ListPlugin } from './types';\nimport { withList } from './withList';\n\nexport const ELEMENT_UL = 'ul';\nexport const ELEMENT_OL = 'ol';\nexport const ELEMENT_LI = 'li';\nexport const ELEMENT_LIC = 'lic';\n\n/**\n * Enables support for bulleted, numbered and to-do lists.\n */\nexport const createListPlugin = createPluginFactory({\n  key: 'list',\n  plugins: [\n    {\n      key: ELEMENT_UL,\n      isElement: true,\n      handlers: {\n        onKeyDown: onKeyDownList,\n      },\n      withOverrides: withList,\n      deserializeHtml: {\n        rules: [\n          {\n            validNodeName: 'UL',\n          },\n        ],\n      },\n    } as PlatePlugin<ListPlugin>,\n    {\n      key: ELEMENT_OL,\n      isElement: true,\n      handlers: {\n        onKeyDown: onKeyDownList,\n      },\n      deserializeHtml: { rules: [{ validNodeName: 'OL' }] },\n    } as PlatePlugin<ListPlugin>,\n    {\n      key: ELEMENT_LI,\n      isElement: true,\n      deserializeHtml: { rules: [{ validNodeName: 'LI' }] },\n      then: (editor, { type }) => ({\n        inject: {\n          pluginsByKey: {\n            [KEY_DESERIALIZE_HTML]: {\n              editor: {\n                insertData: {\n                  preInsert: () => {\n                    return someNode(editor, { match: { type } });\n                  },\n                },\n              },\n            },\n          },\n        },\n      }),\n    },\n    {\n      key: ELEMENT_LIC,\n      isElement: true,\n    },\n  ],\n});\n","import {\n  createPluginFactory,\n  HotkeyPlugin,\n  onKeyDownToggleElement,\n} from '@udecode/plate-core';\n\nexport const ELEMENT_TODO_LI = 'action_item';\n\nexport const createTodoListPlugin = createPluginFactory<HotkeyPlugin>({\n  key: ELEMENT_TODO_LI,\n  isElement: true,\n  handlers: {\n    onKeyDown: onKeyDownToggleElement,\n  },\n  options: {\n    hotkey: ['mod+opt+4', 'mod+shift+4'],\n  },\n});\n"],"names":["isArray","isListNested","editor","listPath","listParentNode","getParentNode","type","getPluginType","ELEMENT_LI","getUnorderedListType","ELEMENT_UL","getOrderedListType","ELEMENT_OL","getListTypes","getListItemType","getListItemContentType","ELEMENT_LIC","getHighestEmptyList","diffListPath","liPath","list","getAboveNode","at","match","listNode","Path","equals","children","length","liParent","getListItemEntry","selection","liType","_at","Range","isRange","isCollapsed","focus","path","anchor","node","getNode","listItem","getListRoot","parentList","parentListPath","hasListChild","some","n","isAcrossListItems","isAcrossBlocks","isRangeAcrossBlocks","someNode","isListRoot","isElement","includes","moveListItemDown","moved","listItemPath","previousListItemPath","previous","e","previousSiblingItem","getNodeEntry","previousNode","previousPath","sublist","find","newPath","concat","withoutNormalizing","wrapNodes","moveNodes","to","moveListItemsToList","fromList","fromListItem","fromStartIndex","_to","toList","toListIndex","deleteFromList","fromListPath","fromListItemSublist","findDescendant","lastChildPath","getLastChildPath","next","moveChildren","deleteText","unwrapList","ancestorListTypeCheck","commonNode","getCommonNode","licEntry","getBlockAbove","setElements","ELEMENT_DEFAULT","unwrapNodes","split","moveListItemUp","move","liNode","toListPath","err","condA","condB","isLastChild","insertElements","toListNode","liParentPath","movedUpLiPath","removeFirstListItem","moveListItems","increase","undefined","enableResetOnShiftTab","_nodes","getNodeEntries","lics","Array","from","highestLicPaths","highestLicPathRefs","forEach","lic","licPath","parent","isAncestor","highestLiPath","push","createPathRef","licPathRefsToMove","reverse","licPathRef","unref","_moved","indentListItems","insertListItem","licType","paragraphPath","listItemEntry","listItemNode","success","isStart","isStartPoint","isEnd","isBlockTextEmptyAfterSelection","nextParagraphPath","nextListItemPath","text","splitNodes","select","collapseSelection","edge","marks","getMarks","moveListItemSublistItemsToListItemSublist","toListItem","start","fromListItemPath","toListItemPath","fromListItemSublistPath","toListItemSublist","fromListNode","fromListType","toListItemSublistPath","moveListSiblingsAfterCursor","offset","listEntry","isParent","removeListItem","isExpanded","previousLiPath","getPreviousPath","previousLi","tempLiPath","tempLi","tempLiPathRef","deleteMerge","removeNodes","toggleList","pluginKey","validLiChildrenTypes","getPluginOptions","res","mode","nodes","blockAbove","startPoint","endPoint","edges","commonEntry","startList","findNode","endList","end","rangeLength","Math","min","rootPathLength","filter","_n","unindentListItems","options","onKeyDownList","hotkey","defaultPrevented","isTab","Hotkeys","isUntab","workRange","isBackward","unHungRange","unhangRange","listSelected","preventDefault","hotkeys","_castArray","_hotkey","isHotkey","deleteBackwardList","unit","isSelectionAtBlockStart","isFirstChild","onKeyDownResetNode","mockPlugin","rules","types","defaultType","predicate","onReset","SIMULATE_BACKSPACE","selectionIsNotInAListHandler","pointAfterSelection","getPointAfter","nextSiblingListRes","parentBlockEntity","getEditorString","sublistRes","selectionIsInAListHandler","isNodeLi","isSiblingOfNodeLi","liWithSiblings","entry","pointAfterListItem","listRoot","siblingListItem","siblingList","nestedList","nestedListItem","getChildren","deleteForwardList","skipDefaultDelete","isSelectionAtBlockEnd","deleteFragmentList","deleted","getEndPoint","liEnd","liEndCanBeDeleted","liEndPathRef","getStartPoint","liStart","liEndPath","listStart","deletePath","insertBreakList","isBlockAboveEmpty","didReset","_editor","inserted","insertFragmentList","insertFragment","_insertFragment","listItemPlugin","getPlugin","listItemType","listItemContentType","getFirstAncestorOfType","root","ancestor","findListItemsWithContent","first","prev","trimList","_texts","getNodeTexts","textEntries","commonAncestorEntry","reduce","commonAncestor","textEntry","rest","wrapNodeIntoListItem","isSingleLic","fragment","isFragmentOnlyListRoot","getNodes","getTextAndListItemNodes","liEntry","licNode","isEmptyNode","getNodeString","flatMap","map","textNode","listItemNodes","li","currentSublists","newLic","newSublists","getDeepInlineChildren","inlineChildren","child","isBlock","normalizeListItem","changed","allValidLiChildrenTypes","liChildren","invalidLiChildrenPathRefs","childPath","firstLiChild","firstLiChildNode","firstLiChildPath","insertEmptyElement","c","licChildren","blockPathRefs","licChild","pathRef","ref","normalizeNestedList","parentNode","hasParentList","normalizeList","normalizeNode","nonLiChild","item","nextPath","nextNode","prevPath","prevNode","withList","insertBreak","deleteBackward","deleteForward","deleteFragment","direction","createListPlugin","createPluginFactory","key","plugins","handlers","onKeyDown","withOverrides","deserializeHtml","validNodeName","then","inject","pluginsByKey","KEY_DESERIALIZE_HTML","insertData","preInsert","ELEMENT_TODO_LI","createTodoListPlugin","onKeyDownToggleElement"],"mappings":"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"}