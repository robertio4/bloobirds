import { ResizableProps } from '@udecode/plate-media/dist/resizable/Resizable';
import { ImageElementPropsCaption, ImageElementStyleProps } from './ImageElement.types';
export declare const getResizableCss: ({ focused, selected, align, }?: {
    focused?: boolean | undefined;
    selected?: boolean | undefined;
    align?: ResizableProps['align'];
}) => {
    resizable: (false | import("twin.macro").TwStyle)[];
    handleLeft: (string | number | false | import("styled-components").CSSObject | import("twin.macro").TwStyle | import("styled-components").Keyframes | Pick<import("styled-components").StyledComponentBase<any, any, any, any>, keyof import("styled-components").StyledComponentBase<any, any, {}, never>> | import("styled-components").FlattenSimpleInterpolation | null | undefined)[];
    handleRight: (string | number | false | import("styled-components").CSSObject | import("twin.macro").TwStyle | import("styled-components").Keyframes | Pick<import("styled-components").StyledComponentBase<any, any, any, any>, keyof import("styled-components").StyledComponentBase<any, any, {}, never>> | import("styled-components").FlattenSimpleInterpolation | null | undefined)[];
};
export declare const getCaptionCss: ({ align, caption, }?: {
    align?: ResizableProps['align'];
    caption?: ImageElementPropsCaption | undefined;
}) => {
    figcaption: (false | import("twin.macro").TwStyle)[];
    caption: (false | import("twin.macro").TwStyle | import("styled-components").FlattenSimpleInterpolation)[];
};
export declare const getImageElementStyles: (props: ImageElementStyleProps) => {
    root: import("@udecode/plate-styled-components").Style;
} & Record<"root" | keyof import("./ImageElement.types").ImageElementStyles, import("@udecode/plate-styled-components").Style | undefined>;
//# sourceMappingURL=ImageElement.styles.d.ts.map