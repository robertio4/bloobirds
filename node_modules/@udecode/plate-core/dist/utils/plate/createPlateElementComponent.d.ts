import { ElementType } from 'react';
import { UseElementPropsOptions } from '../../hooks/index';
import { TElement, Value } from '../../slate/index';
import { As } from '../../types/index';
export declare type CreatePlateElementComponentOptions<T extends TElement = TElement, A extends As = 'div'> = {
    as?: ElementType;
} & Pick<UseElementPropsOptions<T, A>, 'elementToAttributes'>;
/**
 * Create the top-level React component for a Slate element.
 */
export declare const createPlateElementComponent: <T extends TElement = TElement, A extends As<any> = "div">({ as, elementToAttributes, }?: CreatePlateElementComponentOptions<T, A>) => import("../../types/index").Component<import("../../types/index").PlateRenderNodeProps<Value, import("../../types/index").PlateEditor<Value>> & Omit<import("slate-react").RenderElementProps, "element"> & {
    element: T;
} & import("../../types/index").AsProps<A> & {
    [index: `data-${string}`]: unknown;
    wrapElement?: import("../../types/index").WrapElement | undefined;
    children?: import("../../types/index").Children<any>;
} & Omit<import("react").ComponentPropsWithRef<NonNullable<A>>, "children" | keyof import("../../types/index").AsProps<T_1>>>;
//# sourceMappingURL=createPlateElementComponent.d.ts.map