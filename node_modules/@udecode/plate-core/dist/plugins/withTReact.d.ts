import { TEditor, Value } from '../slate/editor/TEditor';
export declare const withTReact: <V extends Value = Value, E extends TEditor<V> = TEditor<V>, EE extends E = E & Omit<import("slate").BaseEditor, "children" | "operations" | "marks" | "isInline" | "isVoid" | "markableVoid" | "normalizeNode" | "apply" | "getFragment" | "insertFragment" | "insertNode" | "getDirtyPaths" | "id"> & {
    id: any;
    children: V;
    operations: import("..").TOperation<import("..").TDescendant>[];
    marks: Record<string, any> | null;
    isInline: <N extends import("..").TElement>(element: N) => boolean;
    isVoid: <N_1 extends import("..").TElement>(element: N_1) => boolean;
    markableVoid: <N_2 extends import("..").TElement>(element: N_2) => boolean;
    normalizeNode: <N_3 extends import("..").TNode>(entry: import("..").TNodeEntry<N_3>) => void;
    apply: <N_4 extends import("..").TDescendant>(operation: import("..").TOperation<N_4>) => void;
    getFragment: <N_5 extends import("..").TDescendant>() => N_5[];
    insertFragment: <N_6 extends import("..").TDescendant>(fragment: N_6[]) => void;
    insertNode: <N_7 extends import("..").TDescendant>(node: N_7) => void;
    getDirtyPaths: <N_8 extends import("..").TDescendant>(operation: import("..").TOperation<N_8>) => import("slate").Path[];
} & import("..").UnknownObject & Pick<import("slate-react").ReactEditor, "insertData" | "insertFragmentData" | "insertTextData" | "setFragmentData" | "hasRange" | "hasTarget" | "hasEditableTarget" | "hasSelectableTarget" | "isTargetInsideNonReadonlyVoid">>(editor: E) => EE;
//# sourceMappingURL=withTReact.d.ts.map