{"version":3,"file":"index.js","sources":["../src/CodeBlockElement/CodeBlockElement.styles.ts","../src/CodeBlockElement/CodeBlockSelectElement.tsx","../src/CodeBlockElement/CodeBlockElement.tsx","../src/CodeBlockElement/CodeLineElement.styles.ts","../src/CodeBlockElement/CodeLineElement.tsx","../src/CodeBlockElement/CodeSyntaxLeaf.tsx","../src/CodeBlockToolbarButton/CodeBlockToolbarButton.tsx"],"sourcesContent":["import { TCodeBlockElement } from '@udecode/plate-code-block';\nimport { Value } from '@udecode/plate-core';\nimport {\n  createStyles,\n  StyledElementProps,\n} from '@udecode/plate-styled-components';\nimport { css } from 'styled-components';\nimport tw from 'twin.macro';\n\nexport const getCodeBlockElementStyles = <V extends Value>(\n  props: StyledElementProps<V, TCodeBlockElement>\n) =>\n  createStyles(\n    { prefixClassNames: 'CodeBlockElement', ...props },\n    {\n      root: [\n        tw`whitespace-pre-wrap py-3 px-4`,\n        css`\n          font-size: 16px;\n          font-family: SFMono-Regular, Consolas, Monaco, 'Liberation Mono',\n            Menlo, Courier, monospace;\n          tab-size: 2;\n          line-height: normal;\n          border-radius: 3px;\n          background-color: rgb(247, 246, 243);\n        `,\n      ],\n    }\n  );\n","import React from 'react';\nimport {\n  CODE_BLOCK_LANGUAGES,\n  CODE_BLOCK_LANGUAGES_POPULAR,\n  CodeBlockPlugin,\n  ELEMENT_CODE_BLOCK,\n} from '@udecode/plate-code-block';\nimport { getPluginOptions, useEditorRef } from '@udecode/plate-core';\nimport { useReadOnly } from 'slate-react';\nimport { CSSProp } from 'styled-components';\n\nexport const CodeBlockSelectElement = ({\n  lang,\n  onChange,\n  ...props\n}: {\n  lang?: string;\n  onChange: Function;\n  className?: string;\n  css?: CSSProp;\n}) => {\n  const [value, setValue] = React.useState(lang);\n  const editor = useEditorRef();\n\n  if (useReadOnly()) return null;\n\n  const { syntaxPopularFirst } = getPluginOptions<CodeBlockPlugin>(\n    editor,\n    ELEMENT_CODE_BLOCK\n  );\n\n  return (\n    <select\n      value={value}\n      style={{ float: 'right' }}\n      onClick={(e) => {\n        e.stopPropagation();\n      }}\n      onChange={(e) => {\n        onChange(e.target.value);\n        setValue(e.target.value);\n      }}\n      contentEditable={false}\n      {...props}\n    >\n      <option value=\"\">Plain text</option>\n      {syntaxPopularFirst &&\n        Object.entries(CODE_BLOCK_LANGUAGES_POPULAR).map(([key, val]) => (\n          <option key={key} value={key}>\n            {val}\n          </option>\n        ))}\n      {Object.entries(CODE_BLOCK_LANGUAGES).map(([key, val]) => (\n        <option key={key} value={key}>\n          {val}\n        </option>\n      ))}\n    </select>\n  );\n};\n","import React from 'react';\nimport {\n  CodeBlockPlugin,\n  ELEMENT_CODE_BLOCK,\n  TCodeBlockElement,\n} from '@udecode/plate-code-block';\nimport {\n  findNodePath,\n  getPluginOptions,\n  setNodes,\n  Value,\n} from '@udecode/plate-core';\nimport {\n  getRootProps,\n  StyledElementProps,\n} from '@udecode/plate-styled-components';\nimport { getCodeBlockElementStyles } from './CodeBlockElement.styles';\nimport { CodeBlockSelectElement } from './CodeBlockSelectElement';\n\nexport const CodeBlockElement = <V extends Value>(\n  props: StyledElementProps<V, TCodeBlockElement>\n) => {\n  const { attributes, children, nodeProps, element, editor } = props;\n\n  const rootProps = getRootProps(props);\n\n  const { lang } = element;\n\n  const { root } = getCodeBlockElementStyles(props as any);\n  const { syntax } = getPluginOptions<CodeBlockPlugin, V>(\n    editor,\n    ELEMENT_CODE_BLOCK\n  );\n  const codeClassName = lang ? `${lang} language-${lang}` : '';\n\n  return (\n    <>\n      <pre\n        {...attributes}\n        css={root.css}\n        className={root.className}\n        {...rootProps}\n        {...nodeProps}\n      >\n        {syntax && (\n          <CodeBlockSelectElement\n            data-testid=\"CodeBlockSelectElement\"\n            lang={lang}\n            onChange={(val: string) => {\n              const path = findNodePath(editor, element);\n              path &&\n                setNodes<TCodeBlockElement>(\n                  editor,\n                  { lang: val },\n                  { at: path }\n                );\n            }}\n          />\n        )}\n        <code className={codeClassName}>{children}</code>\n      </pre>\n    </>\n  );\n};\n","import { Value } from '@udecode/plate-core';\nimport {\n  createStyles,\n  StyledElementProps,\n} from '@udecode/plate-styled-components';\n\nexport const getCodeLineElementStyles = <V extends Value>(\n  props: StyledElementProps<V>\n) =>\n  createStyles(\n    { prefixClassNames: 'CodeLineElement', ...props },\n    {\n      root: [{}],\n    }\n  );\n","import React from 'react';\nimport { Value } from '@udecode/plate-core';\nimport {\n  getRootProps,\n  StyledElementProps,\n} from '@udecode/plate-styled-components';\nimport { getCodeLineElementStyles } from './CodeLineElement.styles';\n\nexport const CodeLineElement = <V extends Value>(\n  props: StyledElementProps<V>\n) => {\n  const { attributes, children, nodeProps } = props;\n\n  const rootProps = getRootProps(props);\n  const { root } = getCodeLineElementStyles(props);\n\n  return (\n    <div\n      {...attributes}\n      css={root.css}\n      className={root.className}\n      {...rootProps}\n      {...nodeProps}\n    >\n      {children}\n    </div>\n  );\n};\n","import React from 'react';\nimport { PlatePluginComponent } from '@udecode/plate-core';\n\nexport const CodeSyntaxLeaf: PlatePluginComponent = ({\n  attributes,\n  children,\n  leaf,\n}) => (\n  <span {...attributes}>\n    <span className={`prism-token token ${leaf.tokenType}`}>{children}</span>\n  </span>\n);\n","import React from 'react';\nimport {\n  CodeBlockInsertOptions,\n  ELEMENT_CODE_BLOCK,\n  insertEmptyCodeBlock,\n} from '@udecode/plate-code-block';\nimport {\n  focusEditor,\n  getPluginType,\n  getPreventDefaultHandler,\n  useEventPlateId,\n  usePlateEditorState,\n  Value,\n} from '@udecode/plate-core';\nimport {\n  BlockToolbarButton,\n  ToolbarButtonProps,\n} from '@udecode/plate-ui-toolbar';\n\nexport const CodeBlockToolbarButton = <V extends Value>({\n  id,\n  options,\n  ...props\n}: ToolbarButtonProps & {\n  options?: CodeBlockInsertOptions<V>;\n}) => {\n  const editor = usePlateEditorState(useEventPlateId(id));\n\n  return (\n    <BlockToolbarButton\n      tooltip={{ content: 'Code Block' }}\n      type={getPluginType(editor, ELEMENT_CODE_BLOCK)}\n      onClick={(e) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        getPreventDefaultHandler(insertEmptyCodeBlock, editor, {\n          insertNodesOptions: { select: true },\n          ...options,\n        });\n        focusEditor(editor);\n      }}\n      {...props}\n    />\n  );\n};\n"],"names":["getCodeBlockElementStyles","props","createStyles","prefixClassNames","root","css","CodeBlockSelectElement","lang","onChange","value","setValue","React","useState","editor","useEditorRef","useReadOnly","syntaxPopularFirst","getPluginOptions","ELEMENT_CODE_BLOCK","float","e","stopPropagation","target","Object","entries","CODE_BLOCK_LANGUAGES_POPULAR","map","key","val","CODE_BLOCK_LANGUAGES","CodeBlockElement","attributes","children","nodeProps","element","rootProps","getRootProps","syntax","codeClassName","className","path","findNodePath","setNodes","at","getCodeLineElementStyles","CodeLineElement","CodeSyntaxLeaf","leaf","tokenType","CodeBlockToolbarButton","id","options","usePlateEditorState","useEventPlateId","BlockToolbarButton","content","getPluginType","preventDefault","getPreventDefaultHandler","insertEmptyCodeBlock","insertNodesOptions","select","focusEditor"],"mappings":"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"}