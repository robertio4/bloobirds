import { createStyles, PortalBody } from '@udecode/plate-styled-components';
import _styled, { css } from 'styled-components';
import React, { useEffect, useCallback } from 'react';
import { useComboboxSelectors, useComboboxControls, comboboxActions, useActiveComboboxStore, getComboboxStoreById, comboboxSelectors } from '@udecode/plate-combobox';
import { usePlateEditorState, useEventEditorSelectors } from '@udecode/plate-core';
import { getRangeBoundingClientRect, useVirtualFloating, offset, shift, flip } from '@udecode/plate-floating';

const getComboboxStyles = props => {
  const item = [{
    "display": "flex",
    "alignItems": "center",
    "paddingLeft": "0.5rem",
    "paddingRight": "0.5rem",
    "cursor": "pointer"
  }, css(["font-size:14px;border-radius:0;min-height:36px;user-select:none;color:rgb(32,31,30);"])];
  return createStyles({
    prefixClassNames: 'Combobox',
    ...props
  }, [{
    root: [{
      "--tw-bg-opacity": "1",
      "backgroundColor": "rgba(255, 255, 255, var(--tw-bg-opacity))",
      "margin": "0px",
      "padding": "0px",
      "overflow": "scroll"
    }, css(["width:300px;max-height:288px;border-radius:0 0 2px 2px;box-shadow:rgba(0,0,0,0.133) 0 3.2px 7.2px 0,rgba(0,0,0,0.11) 0 0.6px 1.8px 0;z-index:500;"])],
    item: [...item, css(["background:transparent;:hover{background:rgb(243,242,241);}"])],
    highlightedItem: [...item, css(["background:rgb(237,235,233);:hover{background:rgb(237,235,233);}"])]
  }]);
};

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

const ComboboxContent = props => {
  var _useComboboxSelectors, _activeComboboxStore$, _activeComboboxStore$2, _activeComboboxStore$3, _activeComboboxStore$4, _activeComboboxStore$5, _activeComboboxStore$6, _activeComboboxStore$7;

  const {
    component: Component,
    items,
    portalElement,
    onRenderItem
  } = props;
  const targetRange = useComboboxSelectors.targetRange();
  const filteredItems = useComboboxSelectors.filteredItems();
  const highlightedIndex = useComboboxSelectors.highlightedIndex();
  const floatingOptions = useComboboxSelectors.floatingOptions();
  const editor = usePlateEditorState();
  const combobox = useComboboxControls();
  const activeComboboxStore = useActiveComboboxStore();
  const text = (_useComboboxSelectors = useComboboxSelectors.text()) !== null && _useComboboxSelectors !== void 0 ? _useComboboxSelectors : '';
  const storeItems = useComboboxSelectors.items();
  const filter = (_activeComboboxStore$ = (_activeComboboxStore$2 = activeComboboxStore.use).filter) === null || _activeComboboxStore$ === void 0 ? void 0 : _activeComboboxStore$.call(_activeComboboxStore$2);
  const sort = (_activeComboboxStore$3 = (_activeComboboxStore$4 = activeComboboxStore.use).sort) === null || _activeComboboxStore$3 === void 0 ? void 0 : _activeComboboxStore$3.call(_activeComboboxStore$4);
  const maxSuggestions = (_activeComboboxStore$5 = (_activeComboboxStore$6 = (_activeComboboxStore$7 = activeComboboxStore.use).maxSuggestions) === null || _activeComboboxStore$6 === void 0 ? void 0 : _activeComboboxStore$6.call(_activeComboboxStore$7)) !== null && _activeComboboxStore$5 !== void 0 ? _activeComboboxStore$5 : storeItems.length; // Update items

  useEffect(() => {
    items && comboboxActions.items(items);
  }, [items]); // Filter items

  useEffect(() => {
    comboboxActions.filteredItems(storeItems.filter(filter ? filter(text) : value => value.text.toLowerCase().startsWith(text.toLowerCase())).sort(sort === null || sort === void 0 ? void 0 : sort(text)).slice(0, maxSuggestions));
  }, [filter, sort, storeItems, maxSuggestions, text]); // Get target range rect

  const getBoundingClientRect = useCallback(() => getRangeBoundingClientRect(editor, targetRange), [editor, targetRange]); // Update popper position

  const {
    style,
    floating
  } = useVirtualFloating({
    placement: 'bottom-start',
    getBoundingClientRect,
    middleware: [offset(4), shift(), flip()],
    ...floatingOptions
  });
  const menuProps = combobox ? combobox.getMenuProps({}, {
    suppressRefError: true
  }) : {
    ref: null
  };
  const {
    root,
    item: styleItem,
    highlightedItem
  } = getComboboxStyles(props);
  return /*#__PURE__*/React.createElement(PortalBody, {
    element: portalElement
  }, /*#__PURE__*/React.createElement(_StyledUl, _extends({}, menuProps, {
    ref: floating,
    style: style,
    className: root.className,
    $_css: root.css
  }), Component ? Component({
    store: activeComboboxStore
  }) : null, filteredItems.map((item, index) => {
    const Item = onRenderItem ? onRenderItem({
      search: text,
      item: item
    }) : item.text;
    const highlighted = index === highlightedIndex;
    return /*#__PURE__*/React.createElement(_StyledDiv, _extends({
      key: item.key,
      className: !highlighted ? styleItem === null || styleItem === void 0 ? void 0 : styleItem.className : highlightedItem === null || highlightedItem === void 0 ? void 0 : highlightedItem.className
    }, combobox.getItemProps({
      item,
      index
    }), {
      onMouseDown: e => {
        var _getComboboxStoreById;

        e.preventDefault();
        const onSelectItem = (_getComboboxStoreById = getComboboxStoreById(comboboxSelectors.activeId())) === null || _getComboboxStoreById === void 0 ? void 0 : _getComboboxStoreById.get.onSelectItem();
        onSelectItem === null || onSelectItem === void 0 ? void 0 : onSelectItem(editor, item);
      },
      $_css2: !highlighted ? styleItem === null || styleItem === void 0 ? void 0 : styleItem.css : highlightedItem === null || highlightedItem === void 0 ? void 0 : highlightedItem.css
    }), Item);
  })));
};
/**
 * Register the combobox id, trigger, onSelectItem
 * Renders the combobox if active.
 */


const Combobox = ({
  id,
  trigger,
  searchPattern,
  onSelectItem,
  controlled,
  maxSuggestions,
  filter,
  sort,
  floatingOptions,
  disabled: _disabled,
  ...props
}) => {
  var _props$items, _useEventEditorSelect;

  const storeItems = useComboboxSelectors.items();
  const disabled = _disabled !== null && _disabled !== void 0 ? _disabled : !storeItems.length && !((_props$items = props.items) !== null && _props$items !== void 0 && _props$items.length);
  const editor = usePlateEditorState();
  const focusedEditorId = (_useEventEditorSelect = useEventEditorSelectors.focus) === null || _useEventEditorSelect === void 0 ? void 0 : _useEventEditorSelect.call(useEventEditorSelectors);
  const combobox = useComboboxControls();
  const activeId = useComboboxSelectors.activeId();
  useEffect(() => {
    if (floatingOptions) {
      comboboxActions.floatingOptions(floatingOptions);
    }
  }, [floatingOptions]);
  useEffect(() => {
    comboboxActions.setComboboxById({
      id,
      trigger,
      searchPattern,
      controlled,
      onSelectItem,
      maxSuggestions,
      filter,
      sort
    });
  }, [id, trigger, searchPattern, controlled, onSelectItem, maxSuggestions, filter, sort]);

  if (!combobox || !editor.selection || focusedEditorId !== editor.id || activeId !== id || disabled) {
    return null;
  }

  return /*#__PURE__*/React.createElement(ComboboxContent, props);
};

var _StyledUl = _styled("ul").withConfig({
  displayName: "Combobox___StyledUl",
  componentId: "sc-1chhjwl-0"
})(["", ""], p => p.$_css);

var _StyledDiv = _styled("div").withConfig({
  displayName: "Combobox___StyledDiv",
  componentId: "sc-1chhjwl-1"
})(["", ""], p => p.$_css2);

export { Combobox, getComboboxStyles };
//# sourceMappingURL=index.es.js.map
