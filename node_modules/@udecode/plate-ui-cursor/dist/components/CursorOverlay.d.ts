import { RefObject } from 'react';
import { RenderFunction, UnknownObject } from '@udecode/plate-core';
import { CursorData, CursorState } from '../types';
import { CursorProps } from './Cursor';
export interface CursorOverlayProps<TCursorData extends UnknownObject = UnknownObject> extends Pick<CursorProps<CursorData>, 'disableCaret' | 'disableSelection' | 'onRenderCaret' | 'onRenderSelectionRect' | 'as' | 'classNames' | 'prefixClassNames' | 'styles'> {
    /**
     * Cursor states to use for calculating the overlay positions, by key.
     */
    cursors?: Record<string, CursorState<TCursorData>>;
    /**
     * Container the overlay will be rendered in.
     * If set, all returned overlay positions will be relative to this container.
     */
    containerRef?: RefObject<HTMLElement>;
    /**
     * Whether to refresh the cursor overlay positions on container resize.
     * @default true
     */
    refreshOnResize?: boolean;
    /**
     * Overrides `Cursor` component.
     */
    onRenderCursor?: RenderFunction<CursorProps>;
}
export declare const CursorOverlayContent: <TCursorData extends UnknownObject = UnknownObject>({ as, classNames, prefixClassNames, styles, onRenderCursor: CursorComponent, onRenderSelectionRect, onRenderCaret, ...props }: CursorOverlayProps<TCursorData>) => JSX.Element;
export declare const CursorOverlay: <TCursorData extends UnknownObject = UnknownObject>(props: CursorOverlayProps<TCursorData>) => JSX.Element | null;
//# sourceMappingURL=CursorOverlay.d.ts.map