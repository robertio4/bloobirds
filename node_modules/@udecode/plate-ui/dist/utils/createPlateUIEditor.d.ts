/// <reference types="react" />
import { CreatePlateEditorOptions, PlateEditor, TEditor, Value } from '@udecode/plate-headless';
/**
 * Create a plate editor with default UI.
 */
export declare const createPlateUIEditor: <V extends Value = Value, E extends TEditor<V> = TEditor<V>>({ components, ...options }?: CreatePlateEditorOptions<V, E>) => E & Omit<import("slate").BaseEditor, "children" | "operations" | "marks" | "isInline" | "isVoid" | "markableVoid" | "normalizeNode" | "apply" | "getFragment" | "insertFragment" | "insertNode" | "getDirtyPaths" | "id"> & {
    id: any;
    children: V;
    operations: import("@udecode/plate-headless").TOperation<import("@udecode/plate-headless").TDescendant>[];
    marks: Record<string, any> | null;
    isInline: <N extends import("@udecode/plate-headless").TElement>(element: N) => boolean;
    isVoid: <N_1 extends import("@udecode/plate-headless").TElement>(element: N_1) => boolean;
    markableVoid: <N_2 extends import("@udecode/plate-headless").TElement>(element: N_2) => boolean;
    normalizeNode: <N_3 extends import("@udecode/plate-headless").TNode>(entry: import("@udecode/plate-headless").TNodeEntry<N_3>) => void;
    apply: <N_4 extends import("@udecode/plate-headless").TDescendant>(operation: import("@udecode/plate-headless").TOperation<N_4>) => void;
    getFragment: <N_5 extends import("@udecode/plate-headless").TDescendant>() => N_5[];
    insertFragment: <N_6 extends import("@udecode/plate-headless").TDescendant>(fragment: N_6[]) => void;
    insertNode: <N_7 extends import("@udecode/plate-headless").TDescendant>(node: N_7) => void;
    getDirtyPaths: <N_8 extends import("@udecode/plate-headless").TDescendant>(operation: import("@udecode/plate-headless").TOperation<N_8>) => import("slate").Path[];
} & import("@udecode/plate-headless").UnknownObject & Pick<import("slate-history").HistoryEditor, "history" | "undo" | "redo"> & Pick<import("slate-react").ReactEditor, "insertData" | "insertFragmentData" | "insertTextData" | "setFragmentData" | "hasRange" | "hasTarget" | "hasEditableTarget" | "hasSelectableTarget" | "isTargetInsideNonReadonlyVoid"> & {
    key: any;
    plugins: import("@udecode/plate-headless").WithPlatePlugin<{}, V, PlateEditor<V>>[];
    pluginsByKey: Record<string, import("@udecode/plate-headless").WithPlatePlugin<{}, V, PlateEditor<V>>>;
    prevSelection: import("slate").BaseRange | null;
    blockFactory: (node?: Partial<import("@udecode/plate-headless").TElement> | undefined, path?: import("slate").Path | undefined) => import("@udecode/plate-headless").ElementOf<TEditor<V>>;
    childrenFactory: () => V;
    currentKeyboardEvent: import("react").KeyboardEvent<Element> | null;
};
//# sourceMappingURL=createPlateUIEditor.d.ts.map