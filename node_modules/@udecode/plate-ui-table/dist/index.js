'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var plateCore = require('@udecode/plate-core');
var plateTable = require('@udecode/plate-table');
var plateStyledComponents = require('@udecode/plate-styled-components');
var _styled = require('styled-components');
var React = require('react');
var reResizable = require('re-resizable');
var slateReact = require('slate-react');
var plateFloating = require('@udecode/plate-floating');
var plateUiButton = require('@udecode/plate-ui-button');
var plateUiToolbar = require('@udecode/plate-ui-toolbar');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _styled__default = /*#__PURE__*/_interopDefaultLegacy(_styled);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

const {
  tableStore,
  useTableStore
} = plateCore.createAtomStore({
  hoveredColIndex: null,
  resizingCol: null,
  selectedCells: null
}, {
  name: 'table',
  scope: plateTable.ELEMENT_TABLE
});

const getTableCellElementStyles = props => {
  const {
    hovered,
    selected,
    hideBorder,
    readOnly
  } = props;
  return plateStyledComponents.createStyles({
    prefixClassNames: 'TableCellElement',
    ...props
  }, {
    root: [{
      "position": "relative",
      "padding": "0px",
      "overflow": "visible",
      "--tw-bg-opacity": "1",
      "backgroundColor": "rgba(255, 255, 255, var(--tw-bg-opacity))"
    }, hideBorder ? {
      "borderStyle": "none"
    } : {
      "borderTopWidth": "1px",
      "borderLeftWidth": "1px",
      "borderBottomWidth": "0px",
      "borderRightWidth": "0px",
      "--tw-border-opacity": "1",
      "borderColor": "rgba(209, 213, 219, var(--tw-border-opacity))"
    }, selected && {
      "borderWidth": "1px",
      "--tw-border-opacity": "1",
      "borderColor": "rgba(59, 130, 246, var(--tw-border-opacity))"
    }, _styled.css(["min-width:48px;"])],
    content: {
      "position": "relative",
      "paddingLeft": "0.75rem",
      "paddingRight": "0.75rem",
      "paddingTop": "0.5rem",
      "paddingBottom": "0.5rem",
      "zIndex": "10",
      "height": "100%",
      "boxSizing": "border-box"
    },
    resizableWrapper: [{
      "position": "absolute",
      "width": "100%",
      "height": "100%",
      "top": "0px"
    }, selected && {
      "display": "none"
    }],
    selectedCell: [!selected && {
      "display": "none"
    }, {
      "position": "absolute",
      "top": "0px",
      "left": "0px",
      "width": "100%",
      "height": "100%",
      "pointerEvents": "none"
    }, selected && _styled.css(["z-index:12;background-color:rgb(179,212,255);opacity:0.3;"])],
    handle: [{
      "position": "absolute"
    }, !readOnly && hovered && {
      "--tw-bg-opacity": "1",
      "backgroundColor": "rgba(59, 130, 246, var(--tw-bg-opacity))"
    }, _styled.css(["top:-12px;right:-2px;width:4px;height:calc(100% + 12px);z-index:10;"])]
  });
};

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

function toVal(mix) {
	var k, y, str='';

	if (typeof mix === 'string' || typeof mix === 'number') {
		str += mix;
	} else if (typeof mix === 'object') {
		if (Array.isArray(mix)) {
			for (k=0; k < mix.length; k++) {
				if (mix[k]) {
					if (y = toVal(mix[k])) {
						str && (str += ' ');
						str += y;
					}
				}
			}
		} else {
			for (k in mix) {
				if (mix[k]) {
					str && (str += ' ');
					str += k;
				}
			}
		}
	}

	return str;
}

function clsx () {
	var i=0, tmp, x, str='';
	while (i < arguments.length) {
		if (tmp = arguments[i++]) {
			if (x = toVal(tmp)) {
				str && (str += ' ');
				str += x;
			}
		}
	}
	return str;
}

const useIsCellSelected = element => {
  const selectedCells = useTableStore().get.selectedCells();
  return React.useMemo(() => selectedCells === null || selectedCells === void 0 ? void 0 : selectedCells.includes(element), [element, selectedCells]);
};

const TableCellElement = props => {
  const {
    attributes,
    children,
    nodeProps,
    element,
    resizableProps,
    editor,
    ignoreReadOnly = false
  } = props;
  const rootProps = plateStyledComponents.getRootProps(props);
  const readOnly = slateReact.useReadOnly();
  const [hoveredColIndex, setHoveredColIndex] = useTableStore().use.hoveredColIndex();
  const setResizingCol = useTableStore().set.resizingCol();
  React.useEffect(() => {
    setHoveredColIndex(null);
  }, [element, setHoveredColIndex]);
  const isCellSelected = useIsCellSelected(element);
  const handleResize = ignoreReadOnly || !readOnly ? {
    right: {
      top: -12,
      height: 'calc(100% + 12px)',
      zIndex: 20
    }
  } : undefined;
  const colIndex = plateTable.getTableColumnIndex(editor, {
    node: element
  });
  const {
    root,
    content,
    resizableWrapper,
    resizable,
    selectedCell,
    handle
  } = getTableCellElementStyles({ ...props,
    selected: isCellSelected,
    hovered: hoveredColIndex === colIndex,
    readOnly: !ignoreReadOnly && readOnly
  });

  const onResize = (e, direction, ref) => {
    setResizingCol({
      index: colIndex,
      width: ref.offsetWidth
    });
  };

  const onResizeStop = (e, direction, ref) => {
    plateTable.setTableColSize(editor, {
      colIndex,
      width: ref.offsetWidth
    }, {
      at: plateCore.findNodePath(editor, element)
    });
    setResizingCol(null);
    setHoveredColIndex(null);
  };

  return /*#__PURE__*/React__default["default"].createElement(_StyledTd, _extends({}, attributes, {
    className: root.className
  }, rootProps, nodeProps, {
    $_css: root.css
  }), /*#__PURE__*/React__default["default"].createElement(_StyledDiv, {
    className: content === null || content === void 0 ? void 0 : content.className,
    $_css2: content === null || content === void 0 ? void 0 : content.css
  }, children), /*#__PURE__*/React__default["default"].createElement(_StyledDiv2, {
    className: clsx(resizableWrapper === null || resizableWrapper === void 0 ? void 0 : resizableWrapper.className, 'group'),
    contentEditable: false,
    onMouseOver: () => setHoveredColIndex(colIndex),
    onFocus: () => setHoveredColIndex(colIndex),
    onMouseOut: () => setHoveredColIndex(null),
    onBlur: () => setHoveredColIndex(null),
    $_css3: resizableWrapper === null || resizableWrapper === void 0 ? void 0 : resizableWrapper.css
  }, /*#__PURE__*/React__default["default"].createElement(_StyledResizable, _extends({
    className: resizable === null || resizable === void 0 ? void 0 : resizable.className,
    size: {
      width: '100%',
      height: '100%'
    },
    enable: {
      right: ignoreReadOnly || !readOnly
    },
    handleStyles: handleResize,
    onResize: onResize,
    onResizeStop: onResizeStop
  }, resizableProps, {
    $_css4: resizable === null || resizable === void 0 ? void 0 : resizable.css
  })), /*#__PURE__*/React__default["default"].createElement(_StyledDiv3, {
    className: handle === null || handle === void 0 ? void 0 : handle.className,
    $_css5: handle === null || handle === void 0 ? void 0 : handle.css
  })), /*#__PURE__*/React__default["default"].createElement(_StyledDiv4, {
    className: selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.className,
    contentEditable: false,
    $_css6: selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.css
  }));
};

var _StyledTd = _styled__default["default"]("td").withConfig({
  displayName: "TableCellElement___StyledTd",
  componentId: "sc-r69en2-0"
})(["", ""], p => p.$_css);

var _StyledDiv = _styled__default["default"]("div").withConfig({
  displayName: "TableCellElement___StyledDiv",
  componentId: "sc-r69en2-1"
})(["", ""], p => p.$_css2);

var _StyledDiv2 = _styled__default["default"]("div").withConfig({
  displayName: "TableCellElement___StyledDiv2",
  componentId: "sc-r69en2-2"
})(["", ""], p => p.$_css3);

var _StyledResizable = _styled__default["default"](reResizable.Resizable).withConfig({
  displayName: "TableCellElement___StyledResizable",
  componentId: "sc-r69en2-3"
})(["", ""], p => p.$_css4);

var _StyledDiv3 = _styled__default["default"]("div").withConfig({
  displayName: "TableCellElement___StyledDiv3",
  componentId: "sc-r69en2-4"
})(["", ""], p => p.$_css5);

var _StyledDiv4 = _styled__default["default"]("div").withConfig({
  displayName: "TableCellElement___StyledDiv4",
  componentId: "sc-r69en2-5"
})(["", ""], p => p.$_css6);

const getTableElementStyles = props => plateStyledComponents.createStyles({
  prefixClassNames: 'TableElement',
  ...props
}, {
  root: [{
    "display": "table",
    "tableLayout": "fixed",
    "height": "1px",
    "width": "100%",
    "marginTop": "1rem",
    "marginBottom": "1rem",
    "marginLeft": "0px",
    "marginRight": "0px",
    "borderCollapse": "collapse",
    "borderWidth": "1px",
    "borderStyle": "solid",
    "--tw-border-opacity": "1",
    "borderColor": "rgba(209, 213, 219, var(--tw-border-opacity))"
  }, props.isSelectingCell && _styled.css(["*::selection{background:none;}"])],
  tbody: {
    "minWidth": "100%"
  }
});

/**
 * Many grid cells above and diff -> set
 * No many grid cells above and diff -> unset
 * No selection -> unset
 */

const useSelectedCells = () => {
  const readOnly = slateReact.useReadOnly();
  const selected = slateReact.useSelected();
  const editor = plateCore.useEditorRef();
  const [selectedCells, setSelectedCells] = useTableStore().use.selectedCells();
  React.useEffect(() => {
    if (!selected || readOnly) setSelectedCells(null);
  }, [selected, editor, setSelectedCells, readOnly]);
  React.useEffect(() => {
    if (readOnly) return;
    const cellEntries = plateTable.getTableGridAbove(editor, {
      format: 'cell'
    });

    if (cellEntries.length > 1) {
      const cells = cellEntries.map(entry => entry[0]);

      if (JSON.stringify(cells) !== JSON.stringify(selectedCells)) {
        setSelectedCells(cells);
      }
    } else if (selectedCells) {
      setSelectedCells(null);
    }
  }, [editor, editor.selection, readOnly, selectedCells, setSelectedCells]);
};

/**
 * Returns node.colSizes if it exists, otherwise returns a 0-filled array.
 * Unset node.colSizes if `colCount` updates to 1.
 */

const useTableColSizes = tableNode => {
  const editor = plateCore.useEditorRef();
  const resizingCol = useTableStore().get.resizingCol();
  const {
    disableUnsetSingleColSize
  } = plateCore.getPluginOptions(editor, plateTable.ELEMENT_TABLE);
  const colCount = plateTable.getTableColumnCount(tableNode);
  const colSizes = tableNode.colSizes ? [...tableNode.colSizes] : Array(colCount);

  if (resizingCol) {
    var _resizingCol$index;

    colSizes[(_resizingCol$index = resizingCol.index) !== null && _resizingCol$index !== void 0 ? _resizingCol$index : 0] = resizingCol.width;
  }

  React.useEffect(() => {
    var _tableNode$colSizes;

    if (!disableUnsetSingleColSize && colCount < 2 && (_tableNode$colSizes = tableNode.colSizes) !== null && _tableNode$colSizes !== void 0 && _tableNode$colSizes.length) {
      plateCore.unsetNodes(editor, 'colSizes', {
        at: plateCore.findNodePath(editor, tableNode)
      });
    }
  }, [colCount, disableUnsetSingleColSize, editor, tableNode]);
  return colSizes;
};

const TablePopover = ({
  children,
  ...props
}) => {
  const element = plateCore.useElement();
  return /*#__PURE__*/React__default["default"].createElement(_StyledElementPopover, _extends({
    content: /*#__PURE__*/React__default["default"].createElement(_StyledRemoveNodeButton, {
      element: element,
      contentEditable: false
    })
  }, props), children);
};

var _StyledRemoveNodeButton = _styled__default["default"](plateUiButton.RemoveNodeButton).withConfig({
  displayName: "TablePopover___StyledRemoveNodeButton",
  componentId: "sc-egd6av-0"
})(["", ""], plateUiToolbar.floatingButtonCss);

var _StyledElementPopover = _styled__default["default"](plateFloating.ElementPopover).withConfig({
  displayName: "TablePopover___StyledElementPopover",
  componentId: "sc-egd6av-1"
})(["", ""], plateUiToolbar.floatingRootCss);

const TableElement = ({
  transformColSizes,
  popoverProps,
  ...props
}) => {
  const {
    attributes,
    children,
    nodeProps,
    element
  } = props;
  const rootProps = plateStyledComponents.getRootProps(props);
  const selectedCells = useTableStore().get.selectedCells();
  const {
    root,
    tbody
  } = getTableElementStyles({ ...props,
    isSelectingCell: !!selectedCells
  });
  let colSizes = useTableColSizes(element);

  if (transformColSizes) {
    colSizes = transformColSizes(colSizes);
  }

  useSelectedCells();
  return /*#__PURE__*/React__default["default"].createElement(_StyledTable, _extends({}, attributes, {
    className: root.className
  }, rootProps, nodeProps, {
    $_css: root.css
  }), /*#__PURE__*/React__default["default"].createElement("colgroup", {
    contentEditable: false
  }, colSizes.map((width, index) => /*#__PURE__*/React__default["default"].createElement("col", {
    key: index,
    style: width ? {
      width
    } : undefined
  }))), /*#__PURE__*/React__default["default"].createElement(TablePopover, popoverProps, /*#__PURE__*/React__default["default"].createElement(_StyledTbody, {
    className: tbody === null || tbody === void 0 ? void 0 : tbody.className,
    $_css2: tbody === null || tbody === void 0 ? void 0 : tbody.css
  }, children)));
};

var _StyledTable = _styled__default["default"]("table").withConfig({
  displayName: "TableElement___StyledTable",
  componentId: "sc-1jga5yk-0"
})(["", ""], p => p.$_css);

var _StyledTbody = _styled__default["default"]("tbody").withConfig({
  displayName: "TableElement___StyledTbody",
  componentId: "sc-1jga5yk-1"
})(["", ""], p => p.$_css2);

const getTableRowElementStyles = props => plateStyledComponents.createStyles({
  prefixClassNames: 'TableRowElement',
  ...props
}, {
  root: [props.hideBorder && {
    "borderStyle": "none"
  }]
});

const TableRowElement = props => {
  const {
    attributes,
    children,
    nodeProps
  } = props;
  const rootProps = plateStyledComponents.getRootProps(props);
  const {
    root
  } = getTableRowElementStyles(props);
  return /*#__PURE__*/React__default["default"].createElement(_StyledTr, _extends({}, attributes, {
    className: root.className
  }, rootProps, nodeProps, {
    $_css: root.css
  }), children);
};

var _StyledTr = _styled__default["default"]("tr").withConfig({
  displayName: "TableRowElement___StyledTr",
  componentId: "sc-718caz-0"
})(["", ""], p => p.$_css);

const TableToolbarButton = ({
  id,
  transform,
  header,
  ...props
}) => {
  const editor = plateCore.usePlateEditorState(plateCore.useEventPlateId(id));
  const type = plateCore.getPluginType(editor, plateTable.ELEMENT_TABLE);
  const active = !!(editor !== null && editor !== void 0 && editor.selection) && plateCore.someNode(editor, {
    match: {
      type
    }
  });
  return /*#__PURE__*/React__default["default"].createElement(plateUiToolbar.ToolbarButton, _extends({
    active: active,
    onClick: e => {
      e.preventDefault();
      e.stopPropagation();
      transform(editor, {
        header
      });
      plateCore.focusEditor(editor);
    }
  }, props));
};

exports.TableCellElement = TableCellElement;
exports.TableElement = TableElement;
exports.TablePopover = TablePopover;
exports.TableRowElement = TableRowElement;
exports.TableToolbarButton = TableToolbarButton;
exports.getTableCellElementStyles = getTableCellElementStyles;
exports.getTableElementStyles = getTableElementStyles;
exports.getTableRowElementStyles = getTableRowElementStyles;
exports.tableStore = tableStore;
exports.useIsCellSelected = useIsCellSelected;
exports.useSelectedCells = useSelectedCells;
exports.useTableColSizes = useTableColSizes;
exports.useTableStore = useTableStore;
//# sourceMappingURL=index.js.map
