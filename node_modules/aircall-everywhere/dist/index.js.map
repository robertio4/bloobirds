{"version":3,"sources":["webpack://aircall-everywhere/webpack/bootstrap","webpack://aircall-everywhere//home/circleci/aircall-everywhere/src/javascripts/aircallPhone.js","webpack://aircall-everywhere//home/circleci/aircall-everywhere/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","AircallPhone","opts","debug","this","phoneWindow","integrationSettings","path","userSettings","eventsRegistered","phoneLoginState","URL_REGEX","phoneUrl","undefined","test","domToLoadPhone","integrationToLoad","size","onLogin","data","user","keys","length","settings","onLogout","w","window","_messageListener","_createPhoneIframe","sizeStyle","document","querySelector","innerHTML","getUrlToLoad","e","_log","addEventListener","event","_resetData","eventName","_handleInitMessage","source","origin","postMessage","action","Error","restArguments","console","info","callback","error","code","message","_handleSendError","responseTimeout","on","response","removeListener","clearTimeout","success","errorCode","errorMessage","setTimeout","filter","forEach","send"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","class AircallPhone {\n  constructor(opts = { debug: true }) {\n    // internal vars\n    // window object of loaded aircall phone\n    this.phoneWindow = null;\n    this.integrationSettings = {};\n    this.path = null;\n    this.userSettings = {};\n    this.eventsRegistered = {};\n\n    this.phoneLoginState = false;\n\n    const URL_REGEX = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/gi;\n\n    // options passed\n    this.phoneUrl =\n      opts.phoneUrl !== undefined && URL_REGEX.test(opts.phoneUrl) === true\n        ? opts.phoneUrl\n        : 'https://phone.aircall.io';\n    this.domToLoadPhone = opts.domToLoadPhone;\n    this.integrationToLoad = opts.integrationToLoad;\n    this.path = opts.path;\n    this.debug = opts.debug;\n\n    // 3 different sizes: big/small/auto\n    this.size = opts.size || 'big';\n\n    this.onLogin = () => {\n      if (typeof opts.onLogin === 'function' && this.phoneLoginState === false) {\n        this.phoneLoginState = true;\n        const data = {\n          user: this.userSettings,\n        };\n        if (Object.keys(this.integrationSettings).length > 0) {\n          data.settings = this.integrationSettings;\n        }\n        opts.onLogin(data);\n      }\n    };\n\n    this.onLogout = () => {\n      if (typeof opts.onLogout === 'function') {\n        opts.onLogout();\n      }\n    };\n    // local window\n    this.w = opts.window || window;\n\n    // launch postmessage listener\n    this._messageListener();\n\n    // load phone in specified dom\n    if (!!this.domToLoadPhone) {\n      this._createPhoneIframe();\n    }\n  }\n\n  _resetData() {\n    this.phoneWindow = null;\n    this.path = null;\n    this.integrationSettings = {};\n    this.userSettings = {};\n    this.phoneLoginState = false;\n  }\n\n  _createPhoneIframe() {\n    let sizeStyle = '';\n    switch (this.size) {\n      case 'big':\n        sizeStyle = 'height:666px; width:376px;';\n        break;\n      case 'small':\n        sizeStyle = 'height:600px; width:376px;';\n        break;\n      case 'auto':\n        sizeStyle = 'height:100%; width:100%;';\n        break;\n    }\n\n    // we get the passed dom\n    try {\n      const el = document.querySelector(this.domToLoadPhone);\n      el.innerHTML = `<iframe allow=\"microphone; autoplay; clipboard-read; clipboard-write; hid\" src=\"${this.getUrlToLoad()}\" style=\"${sizeStyle}\"></iframe>`;\n    } catch (e) {\n      // couldnt query the dom wanted\n      this._log(\n        'error',\n        `[AircallEverywhere] [iframe creation] ${this.domToLoadPhone} not be found. Error:`,\n        e\n      );\n    }\n  }\n\n  _messageListener() {\n    this.w.addEventListener(\n      'message',\n      (event) => {\n        this._log('info', '[AircallEverywhere] [event listener] received event', event);\n        // we test if our format object is present. if not, we stop\n        const matchPrefixRegex = /^apm_phone_/;\n        if (!event.data || !event.data.name || !matchPrefixRegex.test(event.data.name)) {\n          return false;\n        }\n\n        // initialisation message\n        if (event.data.name === 'apm_phone_loaded') {\n          this._handleInitMessage(event);\n          return;\n        }\n\n        // integration settings sent by phone\n        if (event.data.name === 'apm_phone_integration_settings' && !!event.data.value) {\n          this.integrationSettings = event.data.value;\n          // init callback after settings received\n          this.onLogin();\n          return;\n        }\n\n        // phone logout\n        if (event.data.name === 'apm_phone_logout') {\n          // we clean data related to user\n          this._resetData();\n          this.onLogout();\n          return;\n        }\n\n        // loop over events registered\n        for (const eventName in this.eventsRegistered) {\n          if (event.data.name === `apm_phone_${eventName}`) {\n            // event triggered => we execute callback\n            this.eventsRegistered[eventName](event.data.value);\n          }\n        }\n      },\n      false\n    );\n  }\n\n  _handleInitMessage(event) {\n    // we keep the source\n    this.phoneWindow = {\n      source: event.source,\n      origin: event.origin,\n    };\n\n    if (!!event.data.value) {\n      this.userSettings = event.data.value;\n    }\n\n    // we answer init\n    this.phoneWindow.source.postMessage(\n      { name: 'apm_app_isready', path: this.path },\n      this.phoneWindow.origin\n    );\n\n    // we ask for integration settings\n    if (!!this.integrationToLoad) {\n      this.phoneWindow.source.postMessage(\n        { name: 'apm_app_get_settings', value: this.integrationToLoad },\n        this.phoneWindow.origin\n      );\n    } else {\n      // init callback now if present\n      this.onLogin();\n    }\n  }\n\n  _log(action, ...restArguments) {\n    if (typeof action !== 'string') {\n      throw new Error('[AircallEverywhere] [_log] Must provide valid console action');\n    }\n\n    // logging turned off, don't do anything\n    if (!this.debug) {\n      return;\n    }\n\n    // if valid action, execute with given args, otherwise default to info\n    console[action] ? console[action](...restArguments) : console.info(...restArguments);\n  }\n\n  getUrlToLoad() {\n    return `${this.phoneUrl}?integration=generic`;\n  }\n\n  on(eventName, callback) {\n    if (!eventName || typeof callback !== 'function') {\n      throw new Error(\n        '[AircallEverywhere] [on function] Invalid parameters format. Expected non empty string and function'\n      );\n    }\n    this.eventsRegistered[eventName] = callback;\n  }\n\n  _handleSendError(error, callback) {\n    if (!error || !error.code) {\n      // should not happen, unknown error\n      error = {\n        code: 'unknown_error',\n      };\n    }\n    // errors sent by the phone for specific events are not handled since they should have their code AND message\n    if (!!error && !error.message) {\n      switch (error.code) {\n        case 'unknown_error':\n          error.message = 'Unknown error. Contact aircall developers dev@aircall.io';\n          break;\n        case 'no_event_name':\n          error.message = 'Invalid parameter eventName. Expected an non empty string';\n          break;\n        case 'not_ready':\n          error.message =\n            'Aircall Phone has not been identified yet or is not ready. Wait for \"onLogin\" callback';\n          break;\n        case 'no_answer':\n          error.message = 'No answer from the phone. Check if the phone is logged in';\n          break;\n        case 'invalid_response':\n          error.message =\n            'Invalid response from the phone. Contact aircall developers dev@aircall.io';\n          break;\n        default:\n          // specific error without a message. Should not happen\n          error.message = 'Generic error message';\n          break;\n      }\n    }\n\n    // we log the error\n    this._log('error', `[AircallEverywhere] [send function] ${error.message}`);\n\n    // we send the callback with the error\n    if (typeof callback === 'function') {\n      callback(false, error);\n    }\n  }\n\n  send(eventName, data, callback) {\n    if (typeof data === 'function' && !callback) {\n      callback = data;\n      data = undefined;\n    }\n\n    if (!eventName) {\n      this._handleSendError({ code: 'no_event_name' }, callback);\n      return false;\n    }\n\n    if (!!this.phoneWindow && !!this.phoneWindow.source) {\n      let responseTimeout = null;\n      let timeoutLimit = 2000;\n\n      // we send the message\n      this.phoneWindow.source.postMessage(\n        { name: `apm_app_${eventName}`, value: data },\n        this.phoneWindow.origin\n      );\n\n      // we wait for a response to this message\n      this.on(`${eventName}_response`, (response) => {\n        // we have a response, we remove listener and return the callback\n        this.removeListener(`${eventName}_response`);\n        clearTimeout(responseTimeout);\n        // we evaluate response\n        if (!!response && response.success === false) {\n          // phone answers with an error\n          this._handleSendError(\n            { code: response.errorCode, message: response.errorMessage },\n            callback\n          );\n        } else if (!!response && response.success === true) {\n          // phone answer a succes with its response\n          if (typeof callback === 'function') {\n            callback(true, response.data);\n          }\n        } else {\n          // phone answer is invalid\n          this._handleSendError({ code: 'invalid_response' }, callback);\n        }\n      });\n\n      responseTimeout = setTimeout(() => {\n        // if no response, we remove listener\n        this.removeListener(`${eventName}_response`);\n\n        this._handleSendError({ code: 'no_answer' }, callback);\n      }, timeoutLimit);\n    } else {\n      this._handleSendError({ code: 'not_ready' }, callback);\n      return false;\n    }\n  }\n\n  removeListener(eventName) {\n    if (!this.eventsRegistered[eventName]) {\n      return false;\n    }\n\n    Object.keys(this.eventsRegistered)\n      .filter((key) => key === eventName)\n      .forEach((key) => delete this.eventsRegistered[key]);\n    return true;\n  }\n\n  isLoggedIn(callback) {\n    // we simply send an event and send its result.\n    this.send('is_logged_in', (success) => {\n      callback(success);\n    });\n  }\n}\n\nexport default AircallPhone;\n","import AircallPhone from './src/javascripts/aircallPhone.js';\n\nexport default AircallPhone;\n"],"sourceRoot":""}