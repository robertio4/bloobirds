export * from './exports';
declare const INTEGRATIONS: {
    GlobalHandlers: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        setupOnce: (addGlobalEventProcessor?: ((callback: import("@sentry/types").EventProcessor) => void) | undefined, getCurrentHub?: (() => import("@sentry/types").Hub) | undefined) => void;
    }>;
    TryCatch: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        setupOnce: (addGlobalEventProcessor?: ((callback: import("@sentry/types").EventProcessor) => void) | undefined, getCurrentHub?: (() => import("@sentry/types").Hub) | undefined) => void;
    }>;
    Breadcrumbs: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        setupOnce: (addGlobalEventProcessor?: ((callback: import("@sentry/types").EventProcessor) => void) | undefined, getCurrentHub?: (() => import("@sentry/types").Hub) | undefined) => void;
    }>;
    LinkedErrors: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        setupOnce: (addGlobalEventProcessor?: ((callback: import("@sentry/types").EventProcessor) => void) | undefined, getCurrentHub?: (() => import("@sentry/types").Hub) | undefined) => void;
    }>;
    HttpContext: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        setupOnce: (addGlobalEventProcessor?: ((callback: import("@sentry/types").EventProcessor) => void) | undefined, getCurrentHub?: (() => import("@sentry/types").Hub) | undefined) => void;
    }>;
    Dedupe: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        setupOnce: (addGlobalEventProcessor?: ((callback: import("@sentry/types").EventProcessor) => void) | undefined, getCurrentHub?: (() => import("@sentry/types").Hub) | undefined) => void;
    }>;
    FunctionToString: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        setupOnce: (addGlobalEventProcessor?: ((callback: import("@sentry/types").EventProcessor) => void) | undefined, getCurrentHub?: (() => import("@sentry/types").Hub) | undefined) => void;
    }>;
    InboundFilters: import("@sentry/types").IntegrationClass<import("@sentry/types").Integration & {
        setupOnce: (addGlobalEventProcessor?: ((callback: import("@sentry/types").EventProcessor) => void) | undefined, getCurrentHub?: (() => import("@sentry/types").Hub) | undefined) => void;
    }>;
};
export { INTEGRATIONS as Integrations };
export { Replay } from '@sentry/replay';
export { ReplayEventType, ReplayEventWithTime, ReplayBreadcrumbFrame, ReplayBreadcrumbFrameEvent, ReplayOptionFrameEvent, ReplayFrame, ReplayFrameEvent, ReplaySpanFrame, ReplaySpanFrameEvent, } from '@sentry/replay';
export { Feedback } from '@sentry-internal/feedback';
export { BrowserTracing, defaultRequestInstrumentationOptions, instrumentOutgoingRequests, } from '@sentry-internal/tracing';
export { RequestInstrumentationOptions } from '@sentry-internal/tracing';
export { addTracingExtensions, setMeasurement, extractTraceparentData, getActiveTransaction, spanStatusfromHttpCode, trace, makeMultiplexedTransport, ModuleMetadata, } from '@sentry/core';
export { SpanStatusType } from '@sentry/core';
export { Span } from '@sentry/types';
export { makeBrowserOfflineTransport } from './transports/offline';
export { onProfilingStartRouteTransaction } from './profiling/hubextensions';
export { BrowserProfilingIntegration } from './profiling/integration';
//# sourceMappingURL=index.d.ts.map
