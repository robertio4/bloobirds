{"version":3,"file":"integration.js","sources":["../../../../src/profiling/integration.ts"],"sourcesContent":["import { getCurrentScope } from '@sentry/core';\nimport type { Client, EventEnvelope, EventProcessor, Hub, Integration, Transaction } from '@sentry/types';\nimport type { Profile } from '@sentry/types/src/profiling';\nimport { logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport { startProfileForTransaction } from './hubextensions';\nimport type { ProfiledEvent } from './utils';\nimport {\n  addProfilesToEnvelope,\n  createProfilingEvent,\n  findProfiledTransactionsFromEnvelope,\n  getActiveProfilesCount,\n  isAutomatedPageLoadTransaction,\n  shouldProfileTransaction,\n  takeProfileFromGlobalCache,\n} from './utils';\n\n/**\n * Browser profiling integration. Stores any event that has contexts[\"profile\"][\"profile_id\"]\n * This exists because we do not want to await async profiler.stop calls as transaction.finish is called\n * in a synchronous context. Instead, we handle sending the profile async from the promise callback and\n * rely on being able to pull the event from the cache when we need to construct the envelope. This makes the\n * integration less reliable as we might be dropping profiles when the cache is full.\n *\n * @experimental\n */\nexport class BrowserProfilingIntegration implements Integration {\n  public static id: string = 'BrowserProfilingIntegration';\n\n  public readonly name: string;\n\n  /** @deprecated This is never set. */\n  public getCurrentHub?: () => Hub;\n\n  public constructor() {\n    this.name = BrowserProfilingIntegration.id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_addGlobalEventProcessor: (callback: EventProcessor) => void, _getCurrentHub: () => Hub): void {\n    // noop\n  }\n\n  /** @inheritdoc */\n  public setup(client: Client): void {\n    const scope = getCurrentScope();\n\n    const transaction = scope.getTransaction();\n\n    if (transaction && isAutomatedPageLoadTransaction(transaction)) {\n      if (shouldProfileTransaction(transaction)) {\n        startProfileForTransaction(transaction);\n      }\n    }\n\n    if (typeof client.on !== 'function') {\n      logger.warn('[Profiling] Client does not support hooks, profiling will be disabled');\n      return;\n    }\n\n    client.on('startTransaction', (transaction: Transaction) => {\n      if (shouldProfileTransaction(transaction)) {\n        startProfileForTransaction(transaction);\n      }\n    });\n\n    client.on('beforeEnvelope', (envelope): void => {\n      // if not profiles are in queue, there is nothing to add to the envelope.\n      if (!getActiveProfilesCount()) {\n        return;\n      }\n\n      const profiledTransactionEvents = findProfiledTransactionsFromEnvelope(envelope);\n      if (!profiledTransactionEvents.length) {\n        return;\n      }\n\n      const profilesToAddToEnvelope: Profile[] = [];\n\n      for (const profiledTransaction of profiledTransactionEvents) {\n        const context = profiledTransaction && profiledTransaction.contexts;\n        const profile_id = context && context['profile'] && context['profile']['profile_id'];\n        const start_timestamp = context && context['profile'] && context['profile']['start_timestamp'];\n\n        if (typeof profile_id !== 'string') {\n          DEBUG_BUILD && logger.log('[Profiling] cannot find profile for a transaction without a profile context');\n          continue;\n        }\n\n        if (!profile_id) {\n          DEBUG_BUILD && logger.log('[Profiling] cannot find profile for a transaction without a profile context');\n          continue;\n        }\n\n        // Remove the profile from the transaction context before sending, relay will take care of the rest.\n        if (context && context['profile']) {\n          delete context.profile;\n        }\n\n        const profile = takeProfileFromGlobalCache(profile_id);\n        if (!profile) {\n          DEBUG_BUILD && logger.log(`[Profiling] Could not retrieve profile for transaction: ${profile_id}`);\n          continue;\n        }\n\n        const profileEvent = createProfilingEvent(\n          profile_id,\n          start_timestamp as number | undefined,\n          profile,\n          profiledTransaction as ProfiledEvent,\n        );\n        if (profileEvent) {\n          profilesToAddToEnvelope.push(profileEvent);\n        }\n      }\n\n      addProfilesToEnvelope(envelope as EventEnvelope, profilesToAddToEnvelope);\n    });\n  }\n}\n"],"names":["getCurrentScope","isAutomatedPageLoadTransaction","shouldProfileTransaction","startProfileForTransaction","logger","getActiveProfilesCount","findProfiledTransactionsFromEnvelope","DEBUG_BUILD","takeProfileFromGlobalCache","createProfilingEvent","addProfilesToEnvelope"],"mappings":"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"}