{"version":3,"file":"applyScopeDataToEvent.js","sources":["../../../src/utils/applyScopeDataToEvent.ts"],"sourcesContent":["import type { Breadcrumb, Event, PropagationContext, ScopeData, Span } from '@sentry/types';\nimport { arrayify } from '@sentry/utils';\n\n/**\n * Applies data from the scope to the event and runs all event processors on it.\n */\nexport function applyScopeDataToEvent(event: Event, data: ScopeData): void {\n  const { fingerprint, span, breadcrumbs, sdkProcessingMetadata, propagationContext } = data;\n\n  // Apply general data\n  applyDataToEvent(event, data);\n\n  // We want to set the trace context for normal events only if there isn't already\n  // a trace context on the event. There is a product feature in place where we link\n  // errors with transaction and it relies on that.\n  if (span) {\n    applySpanToEvent(event, span);\n  }\n\n  applyFingerprintToEvent(event, fingerprint);\n  applyBreadcrumbsToEvent(event, breadcrumbs);\n  applySdkMetadataToEvent(event, sdkProcessingMetadata, propagationContext);\n}\n\nfunction applyDataToEvent(event: Event, data: ScopeData): void {\n  const { extra, tags, user, contexts, level, transactionName } = data;\n\n  if (extra && Object.keys(extra).length) {\n    event.extra = { ...extra, ...event.extra };\n  }\n  if (tags && Object.keys(tags).length) {\n    event.tags = { ...tags, ...event.tags };\n  }\n  if (user && Object.keys(user).length) {\n    event.user = { ...user, ...event.user };\n  }\n  if (contexts && Object.keys(contexts).length) {\n    event.contexts = { ...contexts, ...event.contexts };\n  }\n  if (level) {\n    event.level = level;\n  }\n  if (transactionName) {\n    event.transaction = transactionName;\n  }\n}\n\nfunction applyBreadcrumbsToEvent(event: Event, breadcrumbs: Breadcrumb[]): void {\n  const mergedBreadcrumbs = [...(event.breadcrumbs || []), ...breadcrumbs];\n  event.breadcrumbs = mergedBreadcrumbs.length ? mergedBreadcrumbs : undefined;\n}\n\nfunction applySdkMetadataToEvent(\n  event: Event,\n  sdkProcessingMetadata: ScopeData['sdkProcessingMetadata'],\n  propagationContext: PropagationContext,\n): void {\n  event.sdkProcessingMetadata = {\n    ...event.sdkProcessingMetadata,\n    ...sdkProcessingMetadata,\n    propagationContext: propagationContext,\n  };\n}\n\nfunction applySpanToEvent(event: Event, span: Span): void {\n  event.contexts = { trace: span.getTraceContext(), ...event.contexts };\n  const transaction = span.transaction;\n  if (transaction) {\n    event.sdkProcessingMetadata = {\n      dynamicSamplingContext: transaction.getDynamicSamplingContext(),\n      ...event.sdkProcessingMetadata,\n    };\n    const transactionName = transaction.name;\n    if (transactionName) {\n      event.tags = { transaction: transactionName, ...event.tags };\n    }\n  }\n}\n\n/**\n * Applies fingerprint from the scope to the event if there's one,\n * uses message if there's one instead or get rid of empty fingerprint\n */\nfunction applyFingerprintToEvent(event: Event, fingerprint: ScopeData['fingerprint'] | undefined): void {\n  // Make sure it's an array first and we actually have something in place\n  event.fingerprint = event.fingerprint ? arrayify(event.fingerprint) : [];\n\n  // If we have something on the scope, then merge it with event\n  if (fingerprint) {\n    event.fingerprint = event.fingerprint.concat(fingerprint);\n  }\n\n  // If we have no data at all, remove empty array default\n  if (event.fingerprint && !event.fingerprint.length) {\n    delete event.fingerprint;\n  }\n}\n"],"names":["arrayify"],"mappings":"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"}