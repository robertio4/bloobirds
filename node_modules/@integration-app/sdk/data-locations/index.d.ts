import { DataCollectionEvent, DataCollectionEventType, DataRecord } from '../data-collections';
export { DataLocationSelector } from './api';
export declare enum DataLocationType {
    directory = "directory",
    collection = "collection"
}
export interface DataLocation {
    path?: string;
    name?: string;
    type?: DataLocationType;
    isDefault?: boolean;
    read?: boolean;
    write?: boolean;
}
export declare type DataLocationSpec = DataCollectionSpec | DataDirectorySpec;
export interface DataCollectionSpec {
    type: DataLocationType.collection;
    name: string;
    fieldsSchema?: any;
    find?: DataCollectionFindSpec;
    findById?: DataCollectionFindByIdSpec;
    create?: DataCollectionCreateSpec;
    update?: DataCollectionUpdateSpec;
    delete?: DataCollectionDeleteSpec;
    udm?: DataCollectionUdmSpec;
    events?: DataCollectionEventsSpec;
}
export declare type DataCollection = DataCollectionSpec;
export interface DataDirectorySpec {
    type: DataLocationType.directory;
    name?: string;
}
interface DataCollectionOperationResponse {
    logs?: any[];
}
export interface DataCollectionFindSpec {
    queryFields?: string[];
}
export interface DataCollectionFindByIdSpec {
}
export interface DataCollectionCreateSpec {
    fields?: string[];
    requiredFields?: string[];
    excludedFields?: string[];
}
export interface DataCollectionUpdateSpec {
    fields?: string[];
    excludedFields?: string[];
}
export interface DataCollectionDeleteSpec {
}
export declare type DataCollectionUdmSpec = Record<string, Record<string, any>>;
export declare enum SubscriptionType {
    PUSH = "push",
    PULL = "pull"
}
export declare type DataCollectionEventsSpecOptions = {
    type: SubscriptionType;
    isFullScan?: boolean;
};
export declare type DataCollectionEventsSpec = {
    [value in DataCollectionEventType]: DataCollectionEventsSpecOptions;
};
export interface DataCollectionFindRequest {
    query?: any;
    cursor?: string;
    udm?: string;
}
export interface DataCollectionFindResponse extends DataCollectionOperationResponse {
    records: DataRecord[];
    cursor?: string;
}
export interface DataCollectionFindByIdRequest {
    id: string;
    udm?: string;
}
export interface DataCollectionFindByIdResponse extends DataCollectionOperationResponse {
    record: DataRecord;
}
export interface DataCollectionCreateRequest {
    fields: Record<string, any>;
}
export interface DataCollectionCreateResponse extends DataCollectionOperationResponse, DataRecord {
}
export interface DataCollectionUpdateRequest {
    id: string;
    fields: Record<string, any>;
}
export interface DataCollectionUpdateResponse extends DataCollectionOperationResponse, DataRecord {
}
export interface DataCollectionDeleteRequest {
    id: string;
}
export interface DataCollectionDeleteResponse extends DataCollectionOperationResponse {
}
export interface DataCollectionSubscribeRequest {
    events?: {
        created?: boolean;
        updated?: boolean;
        deleted?: boolean;
    };
    udm?: string;
    webhookUri: string;
}
export interface DataCollectionSubscribeResponse {
    subscriptionId: string;
    pullIntervalSeconds?: number;
    cursor?: string;
}
export interface DataCollectionUpdateSubscriptionRequest extends DataCollectionSubscribeRequest {
    subscriptionId: string;
    cursor?: string;
}
export interface DataCollectionUpdateSubscriptionResponse extends Omit<DataCollectionSubscribeResponse, 'subscriptionId'> {
}
export interface DataCollectionUnsubscribeRequest {
    subscriptionId: string;
}
export interface DataCollectionUnsubscribeResponse {
}
export interface DataCollectionEventsRequest {
    subscriptionId: string;
    cursor: string;
}
export interface DataCollectionEventsResponse {
    events: DataCollectionEvent[];
    cursor: string;
}
export interface DataEventWebhookPayload {
    subscriptionId: string;
    events: DataCollectionEvent[];
}
export interface DataCollectionParseUnifiedFieldsRequest {
    udm: string;
    unifiedFields: Record<string, any>;
}
export interface DataCollectionParseUnifiedFieldsResponse {
    fields: any;
}
export interface DataDirectoryListRequest {
    cursor?: string;
}
export interface DataDirectoryListResponse {
    locations: DataLocation[];
    cursor?: string;
}
export declare function makeDataLocationOperationPath(collectionPath: string, operation: string): any;
export declare const makeCollectionOperationPath: typeof makeDataLocationOperationPath;
