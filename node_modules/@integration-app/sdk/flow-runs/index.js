"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlowRunAccessor = exports.FlowRunsAccessor = exports.FindFlowRunsResponse = exports.FlowRunsQuery = exports.FlowRunLaunchedByTrigger = exports.FlowRunState = exports.FLOW_RUN_CHANNEL_PREFIX = void 0;
const entity_repository_1 = require("../entity-repository");
exports.FLOW_RUN_CHANNEL_PREFIX = 'private-flow-runs-';
var FlowRunState;
(function (FlowRunState) {
    FlowRunState["RUNNING"] = "running";
    FlowRunState["COMPLETED"] = "completed";
    FlowRunState["FAILED"] = "failed";
})(FlowRunState = exports.FlowRunState || (exports.FlowRunState = {}));
var FlowRunLaunchedByTrigger;
(function (FlowRunLaunchedByTrigger) {
    FlowRunLaunchedByTrigger["ApiTrigger"] = "api-trigger";
    FlowRunLaunchedByTrigger["ScheduleTrigger"] = "schedule-trigger";
    FlowRunLaunchedByTrigger["AppEventTrigger"] = "app-event-trigger";
    FlowRunLaunchedByTrigger["DataSourceTrigger"] = "data-source-trigger";
})(FlowRunLaunchedByTrigger = exports.FlowRunLaunchedByTrigger || (exports.FlowRunLaunchedByTrigger = {}));
class FlowRunsQuery extends entity_repository_1.PaginationQuery {
}
exports.FlowRunsQuery = FlowRunsQuery;
class FindFlowRunsResponse extends entity_repository_1.PaginationResponse {
}
exports.FindFlowRunsResponse = FindFlowRunsResponse;
class FlowRunsAccessor {
    constructor(client) {
        this.client = client;
    }
    async find(query) {
        return this.client.get('/flow-runs', query);
    }
    async create(request) {
        return this.client.post('/flow-runs', request);
    }
}
exports.FlowRunsAccessor = FlowRunsAccessor;
class FlowRunAccessor {
    constructor(client, id) {
        this.client = client;
        this.id = id;
        this.baseUri = `/flow-runs/${id}`;
    }
    async get() {
        return this.client.get(this.baseUri);
    }
    async getOutput() {
        return this.client.get(`${this.baseUri}/output`);
    }
    async subscribe(options) {
        const channelKey = `${exports.FLOW_RUN_CHANNEL_PREFIX}${this.id}`;
        await this.client.subscribeToChannel(channelKey, options);
    }
    async unsubscribe() {
        const channelKey = `${exports.FLOW_RUN_CHANNEL_PREFIX}${this.id}`;
        await this.client.unsubscribeFromChannel(channelKey);
    }
    async repeat({ onUpdate, } = {}) {
        const flowRun = await this.get();
        if (flowRun.state === FlowRunState.RUNNING) {
            throw new Error('Cannot repeat a running flow run.');
        }
        const flowInstanceAccessor = await this.client.flowInstance(flowRun.flowInstanceId);
        return flowInstanceAccessor.run({
            nodeKey: flowRun.startNodeKey,
            input: flowRun.input,
            onUpdate,
        });
    }
}
exports.FlowRunAccessor = FlowRunAccessor;
//# sourceMappingURL=index.js.map