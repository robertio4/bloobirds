import { ErrorData } from '../errors';
import { PaginationResponse, PaginationQuery } from '../entity-repository';
export declare enum FlowNodeRunState {
    RUNNING = "running",
    COMPLETED = "completed",
    FAILED = "failed"
}
export declare const FLOW_NODE_RUN_CHANNEL_PREFIX = "private-flow-node-runs-";
export interface FlowNodeRun {
    id: string;
    flowInstanceId: string;
    nodeKey: string;
    flowRunId?: string;
    input?: any;
    previousFlowNodeRunId: string;
    state: FlowNodeRunState;
    startTime: Date;
    endTime?: Date;
    errors?: ErrorData[];
}
export interface CreateFlowNodeRunRequest {
    flowInstanceId: string;
    nodeKey: string;
    input?: any;
}
export interface FlowNodeRunsQuery extends PaginationQuery {
    flowRunId: string;
}
export interface FindFlowNodeRunsResponse extends PaginationResponse<FlowNodeRun> {
}
export declare enum FlowNodeRunStatus {
    COMPLETED = "completed",
    FAILED = "failed",
    SKIPPED = "skipped"
}
export interface FlowNodeHandlerRunResponse {
    status?: FlowNodeRunStatus;
    logs?: any[];
    output?: any;
    errors?: ErrorData[];
}
export interface UpstreamFlowNodeRun {
    nodeKey: string;
    runId: string;
    outputId: string;
}
export interface DownstreamFlowNodeRun {
    runId: string;
    nodeKey: string;
}
export interface FlowNodeRunParameters {
    id: string;
    upstreamRuns: UpstreamFlowNodeRun[];
    input: any;
}
export interface FlowNodeRunOutput {
    id: string;
    data: string;
    downstreamRuns: DownstreamFlowNodeRun[];
}
export interface FlowNodeRunResult {
    status: FlowNodeRunStatus;
    logs: any[];
    outputs: FlowNodeRunOutput[];
    errors: ErrorData[];
}
export interface FlowNodeRunRecord extends FlowNodeRunParameters, FlowNodeRunResult {
}
export declare type FlowNodeRunRecordWithoutOutputsData = FlowNodeRunRecord & {
    outputs: Omit<FlowNodeRunOutput, 'data'>[];
};
export declare type FlowNodeRunOutputWithoutDownstreamRuns = Omit<FlowNodeRunOutput, 'downstreamRuns'>;
