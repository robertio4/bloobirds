import { ErrorData } from '../errors';
import { PaginationResponse, PaginationQuery } from '../entity-repository';
import { FlowNodeRun } from './flow-node-runs';
import { IntegrationAppClient, SubscribeOptions } from '../client';
import { User } from '../users';
import { FlowInstance } from '../flows';
import { Connection } from '../connections';
import { Integration } from '../integrations';
export declare const FLOW_RUN_CHANNEL_PREFIX = "private-flow-runs-";
export declare enum FlowRunState {
    RUNNING = "running",
    COMPLETED = "completed",
    FAILED = "failed"
}
export declare enum FlowRunLaunchedByTrigger {
    ApiTrigger = "api-trigger",
    ScheduleTrigger = "schedule-trigger",
    AppEventTrigger = "app-event-trigger",
    DataSourceTrigger = "data-source-trigger"
}
export interface FlowRun {
    id: string;
    flowInstanceId: string;
    flowInstance?: FlowInstance;
    connectionId?: string;
    connection?: Connection;
    integrationId?: string;
    integration?: Integration;
    startNodeKey: string;
    userId: string;
    user?: User;
    flowBlueprintKey?: string;
    input?: any;
    state: FlowRunState;
    startTime: Date;
    endTime?: Date;
    errors?: ErrorData[];
    nodeRuns?: FlowNodeRun[];
    launchedBy?: FlowRunLaunchedBy;
}
export interface FlowRunLaunchedBy {
    type: FlowRunLaunchedByTrigger;
    ids?: string[];
}
export interface CreateFlowRunRequest {
    flowInstanceId: string;
    nodeKey?: string;
    input?: any;
}
export declare class FlowRunsQuery extends PaginationQuery {
    startNodeKey?: string;
    flowInstanceId?: string;
    flowBlueprintKey?: string;
    userId?: string;
}
export declare class FindFlowRunsResponse extends PaginationResponse<FlowRun> {
}
export declare class FlowRunsAccessor {
    private readonly client;
    constructor(client: IntegrationAppClient);
    find(query: FlowRunsQuery): Promise<FindFlowRunsResponse>;
    create(request: CreateFlowRunRequest): Promise<FlowRun>;
}
export declare class FlowRunAccessor {
    private readonly client;
    id: string;
    private baseUri;
    constructor(client: IntegrationAppClient, id: string);
    get(): Promise<FlowRun>;
    getOutput(): Promise<any>;
    subscribe(options: SubscribeOptions): Promise<void>;
    unsubscribe(): Promise<void>;
    repeat({ onUpdate, }?: {
        onUpdate?: (flowRun: FlowRun) => void;
    }): Promise<FlowRun>;
}
