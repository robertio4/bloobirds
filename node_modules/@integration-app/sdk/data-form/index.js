"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataForm = void 0;
const tslib_1 = require("tslib");
const js_convert_case_1 = require("js-convert-case");
const data_builder_1 = require("../data-builder");
const var_1 = require("../data-builder/formulas/var");
const locators_1 = require("../data-builder/locators");
const fast_deep_equal_1 = tslib_1.__importDefault(require("fast-deep-equal"));
class DataForm {
    constructor(args) {
        Object.assign(this, args);
    }
    getFields() {
        var _a;
        switch (this.schema.type) {
            case 'object':
                return Object.entries((_a = this.schema.properties) !== null && _a !== void 0 ? _a : {}).map(([key, schema]) => this.makeDataField(key, schema));
            case 'array':
                return [];
            default:
                return [this.makeDataField(null, this.schema)];
        }
    }
    getFieldValueOptions(field) {
        var _a;
        const options = [];
        const defaultValue = (_a = field.schema) === null || _a === void 0 ? void 0 : _a.default;
        if (defaultValue !== undefined) {
            options.push({
                name: (0, data_builder_1.valueToString)(field.schema.default, this.variablesSchema),
                value: field.schema.default,
            });
        }
        for (const locator of (0, locators_1.getLocatorsFromSchema)(this.variablesSchema)) {
            const formula = new var_1.DataBuilderFormulaVar(locator);
            const value = formula.toObject();
            if (!(0, fast_deep_equal_1.default)(value, defaultValue)) {
                options.push({
                    name: formula.toString(this.variablesSchema),
                    value,
                });
            }
        }
        options.forEach((option) => {
            option.selected = (0, fast_deep_equal_1.default)(option.value, field.value);
        });
        return options;
    }
    setFieldValue(field, value) {
        return (0, locators_1.setValueAtLocator)(this.value, field.locator, value);
    }
    makeDataField(key, schema) {
        var _a;
        return {
            name: (_a = schema === null || schema === void 0 ? void 0 : schema.title) !== null && _a !== void 0 ? _a : (0, js_convert_case_1.toHeaderCase)(key),
            locator: key,
            schema,
            value: (0, locators_1.getValueAtLocator)(this.value, key),
        };
    }
}
exports.DataForm = DataForm;
//# sourceMappingURL=index.js.map