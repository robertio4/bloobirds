import { FieldMapping, IFieldMappingInstance } from '.';
import { IntegrationAppClient } from '..';
import { FindFieldMappingInstancesQuery, FindFieldMappingsQuery, FieldMappingInstanceSelector, UpdateFieldMappingInstanceRequest, UpdateFieldMappingRequest, CreateFieldMappingInstanceRequest, CreateFieldMappingRequest } from './api';
import { OpenConfigurationOptions } from '../iframe';
import { ElementAccessor, ElementInstanceAccessor, ElementInstanceListAccessor, ElementListAccessor } from '../accessors';
interface OpenFieldMappingInstanceConfigurationOptions extends OpenConfigurationOptions {
}
export declare class FieldMappingsAccessor extends ElementListAccessor<FieldMapping, FindFieldMappingsQuery, CreateFieldMappingRequest> {
    constructor(client: IntegrationAppClient);
}
export declare class FieldMappingAccessor extends ElementAccessor<FieldMapping, CreateFieldMappingRequest, UpdateFieldMappingRequest> {
    constructor(client: IntegrationAppClient, idOrKey: string);
}
export declare class FieldMappingInstancesAccessor extends ElementInstanceListAccessor<IFieldMappingInstance, FindFieldMappingInstancesQuery> {
    constructor(client: IntegrationAppClient);
}
export declare class FieldMappingInstanceAccessor extends ElementInstanceAccessor<IFieldMappingInstance, FieldMappingInstanceSelector, CreateFieldMappingInstanceRequest, UpdateFieldMappingInstanceRequest> {
    private client;
    constructor(client: IntegrationAppClient, selector: string | FieldMappingInstanceSelector);
    setup(): Promise<void>;
    reset(): Promise<void>;
    openConfiguration(options?: OpenFieldMappingInstanceConfigurationOptions): Promise<void>;
}
export {};
