export declare enum ErrorType {
    BAD_REQUEST = "Bad Request",
    CONNECTION = "Connection",
    FLOW_CONFIGURATION = "Flow Configuration",
    FLOW_RUN = "Flow Run",
    INTERNAL = "Internal"
}
export declare enum BadRequestErrorKey {
    NOT_FOUND = "not_found",
    NOT_AUTHENTICATED = "not_authenticated",
    ACCESS_DENIED = "access_denied",
    ALREADY_EXISTS = "already_exists"
}
export declare enum ConnectionErrorKey {
    CONNECTION_IS_DEFUNCT = "connection_is_defunct",
    ACCESS_TOKEN_EXPIRED = "access_token_expired"
}
interface ErrorDataFields {
    type?: ErrorType;
    key?: string;
    message: string;
    data?: any;
    docsLink?: string;
    stack?: any;
    causedByError?: ErrorData;
    logs?: any[];
}
declare type ErrorConstructorArg = string | ErrorDataFields | Error;
export declare function isIntegrationAppError(error: any): any;
export declare class ErrorData implements ErrorDataFields {
    constructor(arg: ErrorConstructorArg);
}
export interface ErrorData extends ErrorDataFields {
}
export declare class IntegrationAppError extends Error {
    isIntegrationAppError: true;
    data: ErrorData;
    constructor(arg: ErrorConstructorArg);
}
export declare class InternalError extends IntegrationAppError {
    constructor(arg: ErrorConstructorArg);
}
export declare class BadRequestError extends IntegrationAppError {
    constructor(arg: ErrorConstructorArg);
}
export declare class FlowConfigurationError extends BadRequestError {
    constructor(arg: ErrorConstructorArg);
}
export declare class FlowRunError extends IntegrationAppError {
    constructor(arg: ErrorConstructorArg);
}
export declare class ConnectionError extends IntegrationAppError {
    constructor(arg: ErrorConstructorArg);
}
export declare class NotFoundError extends BadRequestError {
    constructor(arg: ErrorConstructorArg);
}
export declare class NotAuthenticatedError extends BadRequestError {
    constructor(arg: ErrorConstructorArg);
}
export declare class AccessDeniedError extends BadRequestError {
    constructor(arg: ErrorConstructorArg);
}
export declare function getErrorFromData(data: any): IntegrationAppError;
export declare function extractIntegrationAppErrorData(error: any): ErrorData;
export declare function buildUserFriendlyErrorMessage(prefix: string, { type, message, docsLink }: ErrorData): string;
export {};
