import { IntegrationAppClient } from '.';
import { PaginationResponse } from './entity-repository';
export interface BaseElementInstance {
    id: string;
}
export interface ElementInstanceSelector {
    id?: string;
    autoCreate?: boolean;
}
export declare class ElementAccessor<Element, CreateRequest, UpdateRequest> {
    protected options: {
        client: IntegrationAppClient;
        path: string;
        idOrKey: string;
    };
    constructor(options: {
        client: IntegrationAppClient;
        path: string;
        idOrKey: string;
    });
    get(): Promise<Element>;
    create(data: CreateRequest): Promise<Element>;
    put(data: CreateRequest): Promise<Element>;
    patch(data: UpdateRequest): Promise<Element>;
    archive(): Promise<void>;
}
export declare class ElementListAccessor<Element, FindQuery, CreateRequest> {
    private client;
    private path;
    constructor(client: IntegrationAppClient, path: string);
    find(query?: FindQuery): Promise<PaginationResponse<Element>>;
    create(data: CreateRequest): Promise<Element>;
}
export declare class ElementInstanceListAccessor<ElementInstance extends BaseElementInstance, FindQuery> {
    private client;
    private path;
    constructor(client: IntegrationAppClient, path: string);
    find(query?: FindQuery): Promise<PaginationResponse<ElementInstance>>;
}
export declare class ElementInstanceAccessor<ElementInstance extends BaseElementInstance, Selector extends {
    id?: string;
}, CreateRequest, UpdateRequest> {
    protected options: {
        client: IntegrationAppClient;
        instancePath: string;
        selector: string | Selector;
    };
    private id;
    constructor(options: {
        client: IntegrationAppClient;
        instancePath: string;
        selector: string | Selector;
    });
    get(): Promise<ElementInstance>;
    getId(): Promise<string>;
    create(data?: CreateRequest): Promise<ElementInstance>;
    put(data: CreateRequest): Promise<ElementInstance>;
    patch(data: UpdateRequest): Promise<ElementInstance>;
    archive(): Promise<void>;
    delete(): Promise<void>;
    private getPath;
    private getSelector;
}
