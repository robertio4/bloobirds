"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FIELDS_SCHEMA = void 0;
const typebox_1 = require("@sinclair/typebox");
exports.FIELDS_SCHEMA = typebox_1.Type.Partial(typebox_1.Type.Object({
    title: typebox_1.Type.String(),
    description: typebox_1.Type.String(),
    type: typebox_1.Type.String(),
    durationSeconds: typebox_1.Type.Number(),
    location: typebox_1.Type.String(),
    isRecurrent: typebox_1.Type.Boolean(),
    participants: typebox_1.Type.Array(typebox_1.Type.Object({
        userId: typebox_1.Type.String(),
        contactId: typebox_1.Type.String(),
    })),
    status: typebox_1.Type.String(),
    contactId: typebox_1.Type.String({
        referenceUdm: 'contacts',
    }),
    companyId: typebox_1.Type.String({
        referenceUdm: 'companies',
    }),
    dealId: typebox_1.Type.String({
        referenceUdm: 'deals',
    }),
    leadId: typebox_1.Type.String({
        referenceUdm: 'leads',
    }),
    ownerId: typebox_1.Type.String({
        referenceUdm: 'users',
    }),
    startTime: typebox_1.Type.String({ format: 'date-time' }),
    endTime: typebox_1.Type.String({ format: 'date-time' }),
    dueTime: typebox_1.Type.String({ format: 'date-time' }),
    createdTime: typebox_1.Type.String({ format: 'date-time' }),
    createdBy: typebox_1.Type.String({
        referenceUdm: 'users',
    }),
    updatedTime: typebox_1.Type.String({ format: 'date-time' }),
    updatedBy: typebox_1.Type.String({
        referenceUdm: 'users',
    }),
}));
const udm = {
    singularName: 'activity',
    pluralName: 'activities',
    fieldsSchema: exports.FIELDS_SCHEMA,
    create: {
        excludedFields: ['createdTime', 'createdBy', 'updatedTime', 'updatedBy'],
    },
    update: {
        excludedFields: ['createdTime', 'createdBy', 'updatedTime', 'updatedBy'],
    },
    populateFields,
};
exports.default = udm;
function populateFields(fields) {
    const result = JSON.parse(JSON.stringify(fields));
    if (!result.dueTime) {
        result.dueTime = result.endTime || result.startTime;
    }
    if (!result.startTime) {
        result.startTime = result.dueTime || result.endTime;
    }
    if (!result.endTime) {
        result.endTime = result.dueTime || result.startTime;
    }
    return result;
}
//# sourceMappingURL=activities.js.map