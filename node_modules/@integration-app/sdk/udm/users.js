"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const typebox_1 = require("@sinclair/typebox");
const base_1 = require("./base");
const FIELDS_SCHEMA = typebox_1.Type.Partial(typebox_1.Type.Object({
    fullName: typebox_1.Type.String(),
    firstName: typebox_1.Type.String(),
    lastName: typebox_1.Type.String(),
    userName: typebox_1.Type.String(),
    primaryEmail: typebox_1.Type.String(),
    emails: typebox_1.Type.Array(base_1.PhoneEmailSchema),
    primaryPhone: typebox_1.Type.String(),
    phones: typebox_1.Type.Array(base_1.PhoneEmailSchema),
    companyName: typebox_1.Type.String(),
    companyId: typebox_1.Type.String({
        referenceUdm: 'companies',
    }),
    imageUrl: typebox_1.Type.String(),
    timezone: typebox_1.Type.String(),
    isActive: typebox_1.Type.Boolean(),
    roleId: typebox_1.Type.Number(),
    createdTime: typebox_1.Type.String({ format: 'date-time' }),
    createdBy: typebox_1.Type.String({
        referenceUdm: 'users',
    }),
    updatedTime: typebox_1.Type.String({ format: 'date-time' }),
    updatedBy: typebox_1.Type.String({
        referenceUdm: 'users',
    }),
}));
const MODIFIABLE_FIELDS = [
    'companyId',
    'companyName',
    'firstName',
    'fullName',
    'imageUrl',
    'isActive',
    'lastName',
    'primaryEmail',
    'primaryPhone',
    'roleId',
    'userName',
];
const udm = {
    singularName: 'user',
    pluralName: 'users',
    fieldsSchema: FIELDS_SCHEMA,
    find: {
        queryFields: [
            'companyName',
            'email',
            'firstName',
            'fullName',
            'lastName',
            'primaryEmail',
            'primaryPhone',
        ],
    },
    create: {
        fields: MODIFIABLE_FIELDS,
    },
    update: {
        fields: MODIFIABLE_FIELDS,
    },
    normalizeFields,
    populateFields: base_1.populateContactInfo,
};
exports.default = udm;
function normalizeFields(fields) {
    const result = JSON.parse(JSON.stringify(fields));
    if (result.primaryPhone) {
        result.primaryPhone = (0, base_1.normalizePhone)(result.primaryPhone);
    }
    if (result.phones) {
        result.phones.forEach((phone) => {
            phone.value = (0, base_1.normalizePhone)(phone.value);
        });
    }
    return result;
}
//# sourceMappingURL=users.js.map