import { JSONSchema } from '../json-schema';
import { ErrorData } from '../errors';
import { Connection } from '../connections';
import { User } from '../users';
import { IntegrationElementInstance } from '../integration-elements';
import { Integration } from '../integrations';
import { DataFilter } from '../data-filter';
export declare const FLOW_CHANNEL_PREFIX = "private-flows-";
export declare const FLOW_INSTANCE_CHANNEL_PREFIX = "private-flow-instances-";
export interface FlowNode {
    type: string;
    name: string;
    config?: any;
    ui?: any;
    inputSchema?: any;
    outputSchema?: any;
    outputExample?: any;
    links?: FlowNodeLink[];
}
export interface Flow {
    id: string;
    key: string;
    version: string;
    name: string;
    parametersSchema?: JSONSchema;
    nodes?: Record<string, FlowNode>;
    instance?: FlowInstance;
    instances?: FlowInstance[];
    archivedAt?: Date;
}
export declare enum FlowInstanceState {
    SETTING_UP = "SETTING_UP",
    SETUP_FAILED = "SETUP_FAILED",
    READY = "READY"
}
export interface FlowInstance {
    id: string;
    userId: string;
    user?: User;
    connectionId?: string;
    connection?: Connection;
    flowId?: string;
    flowVersion?: string;
    integrationId: string;
    integration?: Integration;
    instanceKey?: string;
    name: string;
    parameters?: any;
    parametersSchema?: JSONSchema;
    nodes?: Record<string, FlowInstanceNode>;
    enabled: boolean;
    createdAt: string;
    updatedAt: string;
    dependencies?: IntegrationElementInstance[];
    state?: FlowInstanceState;
}
export declare enum FlowInstanceNodeState {
    SETTING_UP = "SETTING_UP",
    SETUP_FAILED = "SETUP_FAILED",
    READY = "READY"
}
export interface FlowInstanceNode extends FlowNode {
    state?: FlowInstanceNodeState;
    stateData?: any;
    errors?: ErrorData[];
    userConfig?: any;
    testInput?: any;
    testConfig?: any;
    dependencies?: IntegrationElementInstance[];
}
export interface FlowNodeLink {
    key: string;
    filter?: DataFilter;
}
export interface OpenFlowInstanceConfigurationOptions {
    nodeKey?: string;
    onClose?: (...args: any) => void;
}
export interface RunFlowOptions {
    nodeKey?: string;
    input?: any;
    onUpdate?: (...args: any) => void;
}
export { getFlowNode, getChildNodeKeys, getDownstreamNodeKeys, getParentNodeKeys, getUpstreamNodeKeys, getRootNodeKeys, getOrderedNodeKeys, } from './utils';
