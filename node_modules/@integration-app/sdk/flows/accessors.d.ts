import { IntegrationAppClient } from '..';
import { SubscribeOptions } from '../client';
import { FlowRun } from '../flow-runs';
import { OpenConfigurationOptions } from '../iframe';
import { FlowInstance, Flow } from '.';
import { CreateFlowInstanceRequest, CreateFlowRequest, FindFlowInstancesQuery, FindFlowsRequest, FlowInstanceSelector, RunFlowOptions, UpdateFlowInstanceRequest, UpdateFlowRequest } from './api';
import { ElementAccessor, ElementInstanceAccessor, ElementInstanceListAccessor, ElementListAccessor } from '../accessors';
export interface OpenFlowInstanceConfigurationOptions extends OpenConfigurationOptions {
    nodeKey?: string;
}
export declare class FlowsAccessor extends ElementListAccessor<Flow, FindFlowsRequest, CreateFlowRequest> {
    constructor(client: IntegrationAppClient);
}
export declare class FlowAccessor extends ElementAccessor<Flow, CreateFlowRequest, UpdateFlowRequest> {
    private client;
    constructor(client: IntegrationAppClient, idOrKey: string);
    runAll(params: RunFlowOptions): Promise<any[]>;
    subscribe(options: SubscribeOptions): Promise<void>;
    unsubscribe(): Promise<void>;
}
export declare class FlowInstancesAccessor extends ElementInstanceListAccessor<FlowInstance, FindFlowInstancesQuery> {
    constructor(client: IntegrationAppClient);
}
export declare class FlowInstanceAccessor extends ElementInstanceAccessor<FlowInstance, FlowInstanceSelector, CreateFlowInstanceRequest, UpdateFlowInstanceRequest> {
    protected client: IntegrationAppClient;
    protected selector: FlowInstanceSelector | string;
    constructor(client: IntegrationAppClient, selector: FlowInstanceSelector | string);
    enable(): Promise<FlowInstance>;
    disable(): Promise<FlowInstance>;
    updateToLatestFlow(): Promise<FlowInstance>;
    setup(): Promise<FlowInstance>;
    reset(): Promise<FlowInstance>;
    openConfiguration(options?: OpenFlowInstanceConfigurationOptions): Promise<void>;
    run(options?: RunFlowOptions): Promise<FlowRun>;
    subscribe(options: SubscribeOptions): Promise<void>;
    unsubscribe(): Promise<void>;
}
