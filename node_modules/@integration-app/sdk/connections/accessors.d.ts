import { IntegrationAppClient } from '..';
import { Connection } from '.';
import { FindConnectionsQuery, UpdateConnectionRequest } from './api';
import { ElementInstanceListAccessor } from '../accessors';
export declare class ConnectionsAccessor extends ElementInstanceListAccessor<Connection, FindConnectionsQuery> {
    constructor(client: IntegrationAppClient);
}
export declare class ConnectionAccessor {
    client: IntegrationAppClient;
    id: string;
    constructor(client: IntegrationAppClient, id: string);
    get(): Promise<Connection>;
    patch(data: UpdateConnectionRequest): Promise<Connection>;
    archive(): Promise<void>;
    request(path: any, data?: any): Promise<any>;
    get proxy(): ConnectionProxy;
    refresh(): Promise<void>;
}
export declare class ConnectionProxy {
    private connection;
    constructor(connection: ConnectionAccessor);
    get(path: string): Promise<any>;
    post(path: string, data?: any): Promise<any>;
    put(path: string, data?: any): Promise<any>;
    patch(path: string, data?: any): Promise<any>;
    delete(path: string): Promise<any>;
    private getProxyPath;
}
