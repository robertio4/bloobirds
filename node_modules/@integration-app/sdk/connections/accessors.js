"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectionProxy = exports.ConnectionAccessor = exports.ConnectionsAccessor = void 0;
const tslib_1 = require("tslib");
const url_join_1 = tslib_1.__importDefault(require("url-join"));
const accessors_1 = require("../accessors");
const iframe_1 = require("../iframe");
class ConnectionsAccessor extends accessors_1.ElementInstanceListAccessor {
    constructor(client) {
        super(client, 'connections');
    }
}
exports.ConnectionsAccessor = ConnectionsAccessor;
class ConnectionAccessor {
    constructor(client, id) {
        this.client = client;
        this.id = id;
    }
    async get() {
        return this.client.get(`/connections/${this.id}`);
    }
    async patch(data) {
        return this.client.patch(`/connections/${this.id}`, data);
    }
    async archive() {
        return this.client.delete(`/connections/${this.id}`);
    }
    async request(path, data = null) {
        const pathWithoutSlash = path.startsWith('/') ? path.slice(1) : path;
        return this.client.post(`/connections/${this.id}/api/${pathWithoutSlash}`, data);
    }
    get proxy() {
        return new ConnectionProxy(this);
    }
    async refresh() {
        (0, iframe_1.showIframeLoader)();
        const uri = this.client.getEmbedUri(`/connections/${this.id}/refresh`);
        return new Promise((resolve) => {
            (0, iframe_1.openIframe)(uri, {
                onClose: () => resolve(null),
                onSuccess: (connection) => resolve(connection),
            });
        });
    }
}
exports.ConnectionAccessor = ConnectionAccessor;
class ConnectionProxy {
    constructor(connection) {
        this.connection = connection;
    }
    async get(path) {
        return this.connection.client.get(this.getProxyPath(path));
    }
    async post(path, data) {
        return this.connection.client.post(this.getProxyPath(path), data);
    }
    async put(path, data) {
        return this.connection.client.put(this.getProxyPath(path), data);
    }
    async patch(path, data) {
        return this.connection.client.patch(this.getProxyPath(path), data);
    }
    async delete(path) {
        return this.connection.client.delete(this.getProxyPath(path));
    }
    getProxyPath(path) {
        return (0, url_join_1.default)(`/connections/${this.connection.id}/api/proxy`, path);
    }
}
exports.ConnectionProxy = ConnectionProxy;
//# sourceMappingURL=accessors.js.map