"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationAppClient = void 0;
const tslib_1 = require("tslib");
const pusher_js_1 = tslib_1.__importDefault(require("pusher-js"));
const axios_1 = tslib_1.__importDefault(require("axios"));
const accessors_1 = require("./connections/accessors");
const accessors_2 = require("./flows/accessors");
const errors_1 = require("./errors");
const jwt_1 = require("./jwt");
const flow_runs_1 = require("./flow-runs");
const accessors_3 = require("./data-links/accessors");
const accessors_4 = require("./integrations/accessors");
const accessors_5 = require("./field-mappings/accessors");
const accessors_6 = require("./data-sources/accessors");
const accessors_7 = require("./app-events/accessors");
const accessors_8 = require("./app-data-collections/accessors");
const accessors_9 = require("./app-data-schemas/accessors");
const accessors_10 = require("./auth/accessors");
const accessors_11 = require("./data-locations/accessors");
const DEFAULT_API_URI = 'https://engine-api.integration.app';
const DEFAULT_UI_URI = 'https://ui.integration.app';
class IntegrationAppClient {
    constructor(options) {
        this.pusherChannels = {};
        this.init(options);
    }
    async get(uri, queryParams) {
        if (queryParams) {
            uri += `?${new URLSearchParams(queryParams).toString()}`;
        }
        return this.makeApiRequest('GET', { url: uri });
    }
    async post(uri, data) {
        return this.makeApiRequest('POST', { url: uri, data });
    }
    async put(uri, data) {
        return this.makeApiRequest('PUT', { url: uri, data });
    }
    async patch(uri, data) {
        return this.makeApiRequest('PATCH', { url: uri, data });
    }
    async delete(uri) {
        return this.makeApiRequest('DELETE', { url: uri });
    }
    get self() {
        return new accessors_10.SelfAccessor(this);
    }
    get flows() {
        return new accessors_2.FlowsAccessor(this);
    }
    flow(keyOrId) {
        return new accessors_2.FlowAccessor(this, keyOrId);
    }
    get flowInstances() {
        return new accessors_2.FlowInstancesAccessor(this);
    }
    flowInstance(selector) {
        return new accessors_2.FlowInstanceAccessor(this, selector);
    }
    get dataSources() {
        return new accessors_6.DataSourceInstancesAccessor(this);
    }
    dataSource(selector) {
        return new accessors_6.DataSourceInstanceAccessor(this, selector);
    }
    get dataSourceInstances() {
        return new accessors_6.DataSourceInstancesAccessor(this);
    }
    dataSourceInstance(selector) {
        return new accessors_6.DataSourceInstanceAccessor(this, selector);
    }
    get fieldMappings() {
        return new accessors_5.FieldMappingsAccessor(this);
    }
    fieldMapping(idOrKey) {
        return new accessors_5.FieldMappingAccessor(this, idOrKey);
    }
    get fieldMappingInstances() {
        return new accessors_5.FieldMappingInstancesAccessor(this);
    }
    fieldMappingInstance(selector) {
        return new accessors_5.FieldMappingInstanceAccessor(this, selector);
    }
    get dataLinkTables() {
        return new accessors_3.DataLinkTablesAccessor(this);
    }
    dataLinkTable(idOrKey) {
        return new accessors_3.DataLinkTableAccessor(this, idOrKey);
    }
    get dataLinkTableInstances() {
        return new accessors_3.DataLinkTableInstancesAccessor(this);
    }
    dataLinkTableInstance(selector) {
        return new accessors_3.DataLinkTableInstanceAccessor(this, selector);
    }
    get integrations() {
        return new accessors_4.IntegrationsAccessor(this);
    }
    integration(identifier) {
        return new accessors_4.IntegrationAccessor(this, identifier);
    }
    get connections() {
        return new accessors_1.ConnectionsAccessor(this);
    }
    connection(id) {
        return new accessors_1.ConnectionAccessor(this, id);
    }
    dataLocation(selector) {
        return new accessors_11.DataLocationAccessor(this, selector);
    }
    get appEventTypes() {
        return new accessors_7.AppEventTypesAccessor(this);
    }
    appEventType(idOrKey) {
        return new accessors_7.AppEventTypeAccessor(this, idOrKey);
    }
    get appEventSubscriptions() {
        return new accessors_7.AppEventSubscriptionsAccessor(this);
    }
    appEventSubscription(selector) {
        return new accessors_7.AppEventSubscriptionAccessor(this, selector);
    }
    get flowRuns() {
        return new flow_runs_1.FlowRunsAccessor(this);
    }
    flowRun(id) {
        return new flow_runs_1.FlowRunAccessor(this, id);
    }
    get appDataCollections() {
        return new accessors_8.AppDataCollectionsAccessor(this);
    }
    appDataCollection(idOrKey) {
        return new accessors_8.AppDataCollectionAccessor(this, idOrKey);
    }
    get appDataCollectionInstances() {
        return new accessors_8.AppDataCollectionInstancesAccessor(this);
    }
    appDataCollectionInstance(selector) {
        return new accessors_8.AppDataCollectionInstanceAccessor(this, selector);
    }
    get appDataSchemas() {
        return new accessors_9.AppDataSchemasAccessor(this);
    }
    appDataSchema(idOrKey) {
        return new accessors_9.AppDataSchemaAccessor(this, idOrKey);
    }
    get appDataSchemaInstances() {
        return new accessors_9.AppDataSchemaInstancesAccessor(this);
    }
    appDataSchemaInstance(selector) {
        return new accessors_8.AppDataCollectionInstanceAccessor(this, selector);
    }
    init(options) {
        var _a;
        const token = (_a = options.token) !== null && _a !== void 0 ? _a : options.accessToken;
        if (token !== undefined && !(0, jwt_1.isJWT)(token))
            throw new Error('Access token should be a valid JWT token');
        this.apiUri = options.apiUri || DEFAULT_API_URI;
        this.uiUri = options.uiUri || DEFAULT_UI_URI;
        this.token = token;
    }
    async subscribeToChannel(channelKey, options) {
        if (!this.pusherChannels[channelKey]) {
            const pusher = await this.getPusherInstance();
            const newChannel = pusher.subscribe(channelKey);
            this.pusherChannels[channelKey] = newChannel;
        }
        const channel = this.pusherChannels[channelKey];
        if (channel.subscribed) {
            options.onSubscribe && options.onSubscribe();
        }
        else {
            channel.bind('pusher:subscription_succeeded', () => options.onSubscribe && options.onSubscribe());
        }
        if (options.onUpdate) {
            channel.bind('updated', options.onUpdate);
        }
    }
    async unsubscribeFromChannel(channelKey) {
        if (this.pusherChannels[channelKey]) {
            const pusher = await this.getPusherInstance();
            pusher.unsubscribe(channelKey);
            delete this.pusherChannels[channelKey];
        }
    }
    getEmbedUri(page, params) {
        const embedUrl = new URL(`${this.uiUri}/embed/${page}`);
        if (this.token) {
            embedUrl.searchParams.set('token', this.token);
        }
        if (params) {
            for (const [key, value] of Object.entries(params)) {
                embedUrl.searchParams.set(key, value);
            }
        }
        return embedUrl.href;
    }
    async getPusherInstance() {
        if (!this.pusher) {
            const { key, cluster } = await this.get('pusher/config');
            this.pusher = new pusher_js_1.default(key, {
                cluster: cluster,
                authEndpoint: this.apiUri + '/pusher/auth',
                auth: { headers: { Authorization: `Bearer ${this.token}` } },
            });
        }
        return this.pusher;
    }
    async connectionRequest(connectionId, uri, data) {
        return this.post(`connections/${connectionId}/execute-request`, {
            key: uri,
            payload: data,
        });
    }
    handleRequestError(err) {
        var _a, _b;
        if (axios_1.default.isAxiosError(err) && ((_b = (_a = err.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.type)) {
            console.error((0, errors_1.buildUserFriendlyErrorMessage)('Integration.app API Request Error', err.response.data));
            throw (0, errors_1.getErrorFromData)(err.response.data);
        }
        throw err;
    }
    async makeApiRequest(method, params = {}) {
        params.method = method;
        params.baseURL = this.apiUri;
        params.headers = {
            ...(params.headers || {}),
            Authorization: `Bearer ${this.token}`,
        };
        let response;
        try {
            response = await axios_1.default.request(params);
        }
        catch (err) {
            this.handleRequestError(err);
        }
        return response.data;
    }
}
exports.IntegrationAppClient = IntegrationAppClient;
//# sourceMappingURL=client.js.map