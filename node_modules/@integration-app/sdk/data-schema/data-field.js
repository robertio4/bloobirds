"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataField = exports.IDataField = void 0;
const js_convert_case_1 = require("js-convert-case");
const formulas_1 = require("../data-builder/formulas");
class IDataField {
}
exports.IDataField = IDataField;
class DataField {
    constructor(data) {
        var _a, _b;
        Object.assign(this, data);
        this.name = (_b = (_a = this.name) !== null && _a !== void 0 ? _a : this.schema.title) !== null && _b !== void 0 ? _b : (0, js_convert_case_1.toHeaderCase)(this.key);
        this.subFields = extractSubFields(this);
    }
}
exports.DataField = DataField;
function extractSubFields(field) {
    var _a, _b, _c;
    let subfields = [];
    if (!((_a = field.schema) === null || _a === void 0 ? void 0 : _a.type)) {
        subfields = getSubfieldsFromValue(field);
    }
    else if (((_b = field.schema) === null || _b === void 0 ? void 0 : _b.type) === 'object') {
        subfields = [
            ...getSubfieldsFromObjectSchema(field),
            ...(isObjectAllowedAdditionalProperties(field)
                ? getSubfieldsFromValue(field)
                : []),
        ];
    }
    else if (((_c = field.schema) === null || _c === void 0 ? void 0 : _c.type) === 'array') {
        if (Array.isArray(field.value)) {
            subfields = getSubfieldsFromValue(field);
        }
    }
    return subfields;
}
function getSubfieldsFromValue(field) {
    const fields = [];
    if (Array.isArray(field.value)) {
        return field.value.map((item, idx) => {
            var _a;
            return new DataField({
                key: (idx + 1).toString(),
                schema: (_a = field.schema) === null || _a === void 0 ? void 0 : _a.items,
                value: item,
            });
        });
    }
    else if (typeof field.value == 'object' &&
        field.value !== null &&
        !(0, formulas_1.isFormula)(field.value)) {
        Object.entries(field.value).forEach(([key, value]) => {
            if (!field.schema ||
                !field.schema.properties ||
                !(key in field.schema.properties)) {
                fields.push(new DataField({
                    key,
                    schema: null,
                    value: value,
                }));
            }
        });
    }
    return fields;
}
function getSubfieldsFromObjectSchema(field) {
    var _a;
    const fields = [];
    if ((_a = field.schema) === null || _a === void 0 ? void 0 : _a.properties) {
        Object.entries(field.schema.properties).forEach(([key, value]) => {
            var _a;
            fields.push(new DataField({
                key,
                schema: value,
                value: (_a = field.value) === null || _a === void 0 ? void 0 : _a[key],
            }));
        });
    }
    return fields;
}
function isObjectAllowedAdditionalProperties(field) {
    var _a, _b;
    if (((_a = field.schema) === null || _a === void 0 ? void 0 : _a.type) !== 'object') {
        return true;
    }
    return ((_b = field.schema) === null || _b === void 0 ? void 0 : _b.additionalProperties) === true;
}
//# sourceMappingURL=data-field.js.map