import { DataRecord } from '../data-collections';
export declare type DataSchemaType = 'object' | 'array' | 'string' | 'number' | 'integer' | 'boolean' | 'null';
export interface DataSchema {
    title?: string;
    type?: string;
    format?: string;
    properties?: {
        [key: string]: DataSchema;
    };
    items?: DataSchema;
    additionalProperties?: boolean;
    enum?: string[];
    referenceRecords?: DataRecord[];
    referenceCollectionPath?: string;
    referenceUdm?: string;
    default?: any;
    allowCustom?: boolean;
    referenceCollectionUri?: string;
}
export declare function schemaIsScalar(schema: DataSchema): boolean;
export declare function schemaHasFixedValues(schema: DataSchema): string | boolean | string[] | DataRecord[];
export declare function schemaAllowsCustomValue(schema: DataSchema): boolean;
export declare function schemaIsNumber(schema: DataSchema): boolean;
export declare function schemaWithTitle(schema: DataSchema, title: string): {
    title: string;
    type?: string;
    format?: string;
    properties?: {
        [key: string]: DataSchema;
    };
    items?: DataSchema;
    additionalProperties?: boolean;
    enum?: string[];
    referenceRecords?: DataRecord[];
    referenceCollectionPath?: string;
    referenceUdm?: string;
    default?: any;
    allowCustom?: boolean;
    referenceCollectionUri?: string;
};
export declare function pickFieldsFromSchema(schema: DataSchema, fields: string[]): any;
export declare function excludeFieldsFromSchema(schema: DataSchema, fields: string[]): any;
export declare function addRequiredFieldsToSchema(schema: any, fields: any): any;
export declare function addDefaultsToSchema(sourceSchema: DataSchema, defaultValue: any): any;
export declare function populateSchemaTitles(schema: any): void;
