import Pusher from 'pusher-js';
import { ConnectionAccessor, ConnectionsAccessor } from './connections/accessors';
import { FlowInstanceAccessor, FlowAccessor, FlowInstancesAccessor, FlowsAccessor } from './flows/accessors';
import { FlowRunAccessor, FlowRunsAccessor } from './flow-runs';
import { DataLinkTableInstanceAccessor, DataLinkTableAccessor, DataLinkTableInstancesAccessor, DataLinkTablesAccessor } from './data-links/accessors';
import { IntegrationsAccessor, IntegrationAccessor } from './integrations/accessors';
import { FieldMappingAccessor, FieldMappingInstanceAccessor, FieldMappingsAccessor, FieldMappingInstancesAccessor } from './field-mappings/accessors';
import { DataSourceInstancesAccessor, DataSourceInstanceAccessor } from './data-sources/accessors';
import { FlowInstanceSelector } from './flows/api';
import { FieldMappingInstanceSelector } from './field-mappings/api';
import { DataSourceInstanceSelector } from './data-sources/api';
import { DataLinkTableInstanceSelector } from './data-links/api';
import { AppEventSubscriptionAccessor, AppEventSubscriptionsAccessor, AppEventTypeAccessor, AppEventTypesAccessor } from './app-events/accessors';
import { AppEventSubscriptionSelector } from './app-events/api';
import { AppDataCollectionsAccessor, AppDataCollectionAccessor, AppDataCollectionInstancesAccessor, AppDataCollectionInstanceAccessor } from './app-data-collections/accessors';
import { AppDataCollectionInstanceSelector } from './app-data-collections/api';
import { AppDataSchemasAccessor, AppDataSchemaAccessor, AppDataSchemaInstancesAccessor } from './app-data-schemas/accessors';
import { SelfAccessor } from './auth/accessors';
import { DataLocationSelector } from './data-locations/api';
import { DataLocationAccessor } from './data-locations/accessors';
export declare class IntegrationAppClient {
    apiUri?: string;
    uiUri?: string;
    token: string;
    private pusher;
    private pusherChannels;
    constructor(options: IntegrationAppClientOptions);
    get(uri: string, queryParams?: Record<string, any>): Promise<any>;
    post(uri: string, data?: any): Promise<any>;
    put(uri: string, data?: any): Promise<any>;
    patch(uri: string, data?: any): Promise<any>;
    delete(uri: string): Promise<any>;
    get self(): SelfAccessor;
    get flows(): FlowsAccessor;
    flow(keyOrId: string): FlowAccessor;
    get flowInstances(): FlowInstancesAccessor;
    flowInstance(selector: string | FlowInstanceSelector): FlowInstanceAccessor;
    get dataSources(): DataSourceInstancesAccessor;
    dataSource(selector: string | DataSourceInstanceSelector): DataSourceInstanceAccessor;
    get dataSourceInstances(): DataSourceInstancesAccessor;
    dataSourceInstance(selector: string | DataSourceInstanceSelector): DataSourceInstanceAccessor;
    get fieldMappings(): FieldMappingsAccessor;
    fieldMapping(idOrKey: string): FieldMappingAccessor;
    get fieldMappingInstances(): FieldMappingInstancesAccessor;
    fieldMappingInstance(selector: string | FieldMappingInstanceSelector): FieldMappingInstanceAccessor;
    get dataLinkTables(): DataLinkTablesAccessor;
    dataLinkTable(idOrKey: string): DataLinkTableAccessor;
    get dataLinkTableInstances(): DataLinkTableInstancesAccessor;
    dataLinkTableInstance(selector: string | DataLinkTableInstanceSelector): DataLinkTableInstanceAccessor;
    get integrations(): IntegrationsAccessor;
    integration(identifier: string): IntegrationAccessor;
    get connections(): ConnectionsAccessor;
    connection(id: string): ConnectionAccessor;
    dataLocation(selector: DataLocationSelector): DataLocationAccessor;
    get appEventTypes(): AppEventTypesAccessor;
    appEventType(idOrKey: string): AppEventTypeAccessor;
    get appEventSubscriptions(): AppEventSubscriptionsAccessor;
    appEventSubscription(selector: string | AppEventSubscriptionSelector): AppEventSubscriptionAccessor;
    get flowRuns(): FlowRunsAccessor;
    flowRun(id: string): FlowRunAccessor;
    get appDataCollections(): AppDataCollectionsAccessor;
    appDataCollection(idOrKey: string): AppDataCollectionAccessor;
    get appDataCollectionInstances(): AppDataCollectionInstancesAccessor;
    appDataCollectionInstance(selector: string | AppDataCollectionInstanceSelector): AppDataCollectionInstanceAccessor;
    get appDataSchemas(): AppDataSchemasAccessor;
    appDataSchema(idOrKey: string): AppDataSchemaAccessor;
    get appDataSchemaInstances(): AppDataSchemaInstancesAccessor;
    appDataSchemaInstance(selector: string | AppDataCollectionInstanceSelector): AppDataCollectionInstanceAccessor;
    init(options: IntegrationAppClientOptions): void;
    subscribeToChannel(channelKey: string, options: SubscribeOptions): Promise<void>;
    unsubscribeFromChannel(channelKey: string): Promise<void>;
    getEmbedUri(page: string, params?: any): string;
    getPusherInstance(): Promise<Pusher>;
    connectionRequest(connectionId: string, uri: string, data?: any): Promise<any>;
    private handleRequestError;
    private makeApiRequest;
}
export interface NewImportOptions {
    schema: any;
    onData: (...args: any) => void;
    onClose?: (...args: any) => void;
}
export interface OpenFlowConfigurationOptions {
    onClose?: (...args: any) => void;
}
interface ConnectionOptions {
    onSuccess?: (connection: any) => void;
    onClose?: () => void;
}
export interface NewConnectionOptions extends ConnectionOptions {
    integrationKey: string;
    connectorKey: string;
}
export interface RefreshConnectionOptions extends ConnectionOptions {
    connectionId: string;
}
export interface IntegrationAppClientOptions {
    token?: string;
    apiUri?: string;
    uiUri?: string;
    accessToken?: string;
}
export interface SubscribeOptions {
    onSubscribe?: () => void;
    onUpdate?: (update?: any) => void;
}
export {};
