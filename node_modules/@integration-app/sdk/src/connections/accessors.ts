import { IntegrationAppClient } from '..'
import { Connection } from '.'
import { FindConnectionsQuery, UpdateConnectionRequest } from './api'
import urljoin from 'url-join'

import { ElementInstanceListAccessor } from '../accessors'
import { openIframe, showIframeLoader } from '../iframe'
export class ConnectionsAccessor extends ElementInstanceListAccessor<
  Connection,
  FindConnectionsQuery
> {
  constructor(client: IntegrationAppClient) {
    super(client, 'connections')
  }
}

export class ConnectionAccessor {
  constructor(public client: IntegrationAppClient, public id: string) {}

  async get(): Promise<Connection> {
    return this.client.get(`/connections/${this.id}`)
  }

  async patch(data: UpdateConnectionRequest): Promise<Connection> {
    return this.client.patch(`/connections/${this.id}`, data)
  }

  async archive(): Promise<void> {
    return this.client.delete(`/connections/${this.id}`)
  }

  async request(path, data = null): Promise<any> {
    const pathWithoutSlash = path.startsWith('/') ? path.slice(1) : path
    return this.client.post(
      `/connections/${this.id}/api/${pathWithoutSlash}`,
      data,
    )
  }

  get proxy(): ConnectionProxy {
    return new ConnectionProxy(this)
  }

  async refresh(): Promise<void> {
    showIframeLoader()
    const uri = this.client.getEmbedUri(`/connections/${this.id}/refresh`)
    return new Promise<void>((resolve) => {
      openIframe(uri, {
        onClose: () => resolve(null),
        onSuccess: (connection) => resolve(connection),
      })
    })
  }
}

export class ConnectionProxy {
  constructor(private connection: ConnectionAccessor) {}

  async get(path: string): Promise<any> {
    return this.connection.client.get(this.getProxyPath(path))
  }

  async post(path: string, data?: any): Promise<any> {
    return this.connection.client.post(this.getProxyPath(path), data)
  }

  async put(path: string, data?: any): Promise<any> {
    return this.connection.client.put(this.getProxyPath(path), data)
  }

  async patch(path: string, data?: any): Promise<any> {
    return this.connection.client.patch(this.getProxyPath(path), data)
  }

  async delete(path: string): Promise<any> {
    return this.connection.client.delete(this.getProxyPath(path))
  }

  private getProxyPath(path) {
    return urljoin(`/connections/${this.connection.id}/api/proxy`, path)
  }
}
