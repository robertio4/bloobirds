import { IntegrationAppClient } from '..'
import { DataSourceInstance } from '.'
import {
  FindDataSourceInstancesQuery,
  UpdateDataSourceInstanceRequest,
  DataSourceInstanceSelector,
  CreateDataSourceInstanceRequest,
} from './api'
import {
  DataCollectionCreateRequest,
  DataCollectionCreateResponse,
  DataCollectionDeleteRequest,
  DataCollectionDeleteResponse,
  DataCollectionFindRequest,
  DataCollectionFindResponse,
  DataCollectionSpec,
  DataCollectionUpdateRequest,
  DataCollectionUpdateResponse,
  DataDirectoryListRequest,
  DataDirectoryListResponse,
} from '../connector-api'
import {
  OpenConfigurationOptions,
  openIframe,
  showIframeLoader,
} from '../iframe'
import {
  ElementInstanceListAccessor,
  ElementInstanceAccessor,
} from '../accessors'

interface OpenDataSourceInstanceConfiguration
  extends OpenConfigurationOptions {}

export class DataSourceInstancesAccessor extends ElementInstanceListAccessor<
  DataSourceInstance,
  FindDataSourceInstancesQuery
> {
  constructor(client: IntegrationAppClient) {
    super(client, 'data-source-instances')
  }
}

export class DataSourceInstanceAccessor extends ElementInstanceAccessor<
  DataSourceInstance,
  DataSourceInstanceSelector,
  CreateDataSourceInstanceRequest,
  UpdateDataSourceInstanceRequest
> {
  constructor(
    public client: IntegrationAppClient,
    selector: string | DataSourceInstanceSelector,
  ) {
    super({
      client,
      instancePath: 'data-source-instance',
      selector,
    })
  }

  async setup(): Promise<void> {
    const id = await this.getId()
    await this.client.post(`/data-source-instances/${id}/setup`)
  }

  async openConfiguration(
    options?: OpenDataSourceInstanceConfiguration,
  ): Promise<void> {
    showIframeLoader()
    const id = await this.getId()
    const uri = this.client.getEmbedUri(
      `/data-source-instances/${id}/configuration`,
    )
    return openIframe(uri, {
      onClose: options?.onClose,
    })
  }

  async getCollection(): Promise<DataCollectionSpec> {
    const id = await this.getId()
    return this.client.get(`/data-source-instances/${id}/collection`)
  }

  async getLocations(
    request?: DataDirectoryListRequest & {
      path?: string
    },
  ): Promise<DataDirectoryListResponse> {
    const id = await this.getId()
    return this.client.get(`/data-source-instances/${id}/locations`, request)
  }

  async findRecords(
    request: DataCollectionFindRequest = {},
  ): Promise<DataCollectionFindResponse> {
    const baseUri = await this.getRecordsBaseUri()
    return this.client.get(baseUri, request)
  }

  async createRecord(
    request: DataCollectionCreateRequest,
  ): Promise<DataCollectionCreateResponse> {
    const baseUri = await this.getRecordsBaseUri()
    return this.client.post(baseUri, request)
  }

  async updateRecord(
    request: DataCollectionUpdateRequest,
  ): Promise<DataCollectionUpdateResponse> {
    const baseUri = await this.getRecordsBaseUri()
    return this.client.patch(`${baseUri}/${request.id}`, request)
  }

  async deleteRecord(
    request: DataCollectionDeleteRequest,
  ): Promise<DataCollectionDeleteResponse> {
    const baseUri = await this.getRecordsBaseUri()
    return this.client.patch(`${baseUri}/${request.id}`, request)
  }

  private async getRecordsBaseUri() {
    const id = await this.getId()
    return `/data-source-instances/${id}/records`
  }
}
