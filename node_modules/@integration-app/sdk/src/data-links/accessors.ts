import { IntegrationAppClient } from '..'
import { DataLink, DataLinkTable, DataLinkTableInstance } from '.'
import {
  CreateDataLinkTableRequest,
  DataLinkInTableSelector,
  DataLinkTableInstanceSelector,
  FindDataLinksInTableQuery,
  FindDataLinksResponse,
  FindDataLinkTableInstancesQuery,
  FindDataLinkTablesQuery,
  IDataLinkTableInstanceUpdate,
  UpdateDataLinkTableRequest,
} from './api'
import qs from 'query-string'
import {
  ElementAccessor,
  ElementInstanceAccessor,
  ElementInstanceListAccessor,
  ElementListAccessor,
} from '../accessors'

export class DataLinkTablesAccessor extends ElementListAccessor<
  DataLinkTable,
  FindDataLinkTablesQuery,
  CreateDataLinkTableRequest
> {
  constructor(client: IntegrationAppClient) {
    super(client, 'data-link-tables')
  }
}

export class DataLinkTableAccessor extends ElementAccessor<
  DataLinkTable,
  CreateDataLinkTableRequest,
  UpdateDataLinkTableRequest
> {
  constructor(client: IntegrationAppClient, idOrKey: string) {
    super({
      client,
      path: 'data-link-tables',
      idOrKey,
    })
  }
}

export class DataLinkTableInstancesAccessor extends ElementInstanceListAccessor<
  DataLinkTableInstance,
  FindDataLinkTableInstancesQuery
> {
  constructor(client: IntegrationAppClient) {
    super(client, 'data-link-table-instances')
  }
}

export class DataLinkTableInstanceAccessor extends ElementInstanceAccessor<
  DataLinkTableInstance,
  DataLinkTableInstanceSelector,
  IDataLinkTableInstanceUpdate,
  IDataLinkTableInstanceUpdate
> {
  constructor(
    private client: IntegrationAppClient,
    selector: string | DataLinkTableInstanceSelector,
  ) {
    super({
      client,
      instancePath: 'data-link-table-instance',
      selector,
    })
  }

  async findLinks(
    query: FindDataLinksInTableQuery,
  ): Promise<FindDataLinksResponse> {
    const id = await this.getId()
    return this.client.get(
      '/data-links?' +
        qs.stringify({
          ...query,
          dataLinkTableInstanceId: id,
        }),
    )
  }

  async addLink(selector: DataLinkInTableSelector): Promise<DataLink> {
    const id = await this.getId()
    return this.client.post(
      '/data-links?' +
        qs.stringify({
          ...selector,
          dataLinkTableInstanceId: id,
        }),
    )
  }

  async removeLink(selector: DataLinkInTableSelector): Promise<DataLink> {
    const id = await this.getId()
    return this.client.delete(
      '/data-links?' +
        qs.stringify({
          ...selector,
          dataLinkTableInstanceId: id,
        }),
    )
  }
}
