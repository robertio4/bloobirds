import { DataFilterCondition } from './index'
import { doesMatchFilter } from './index'

describe('data-filter', () => {
  it('should match any data to empty filter', () => {
    expect(doesMatchFilter(null, null)).toBe(true)
    expect(doesMatchFilter('string', null)).toBe(true)
    expect(doesMatchFilter({ key: 'value' }, null)).toBe(true)
  })

  it('should match any data to filter with zero conditions', () => {
    expect(doesMatchFilter(null, [])).toBe(true)
    expect(doesMatchFilter('string', [])).toBe(true)
    expect(doesMatchFilter({ key: 'value' }, [])).toBe(true)
  })

  it('should match scalar data', () => {
    const data = 'value'
    const condition = new DataFilterCondition('$', 'is', data)
    expect(doesMatchFilter(data, [condition])).toBe(true)
  })

  it('should match object with field', () => {
    const data = {
      key: 'value',
    }
    const condition = new DataFilterCondition('$.key', 'is', 'value')
    expect(doesMatchFilter(data, [condition])).toBe(true)
  })

  it('should match array with one item of a neseted object mathing the value', () => {
    const data = [{ key: 'not value' }, { key: 'value' }]
    const condition = new DataFilterCondition('$.key', 'is', 'value')
    expect(doesMatchFilter(data, [condition])).toBe(true)

    const condition2 = new DataFilterCondition('$.$current.key', 'is', 'value')
    expect(doesMatchFilter(data, [condition2])).toBe(true)
  })

  it('should correctly match array if locator explicitly specifies an array item', () => {
    const data = [{ key: 'not value' }, { key: 'value' }]
    const condition = new DataFilterCondition('$[0].key', 'is', 'value')
    expect(doesMatchFilter(data, [condition])).toBe(false)

    const condition2 = new DataFilterCondition('$[1].key', 'is', 'value')
    expect(doesMatchFilter(data, [condition2])).toBe(true)
  })
})
