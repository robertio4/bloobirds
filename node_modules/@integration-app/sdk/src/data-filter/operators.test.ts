import { doesMatchFilter } from '.'

describe('is', () => {
  it('should match equal values', () => {
    expect(
      doesMatchFilter('value', [
        {
          field: '$',
          operator: 'is',
          value: 'value',
        },
      ]),
    ).toBe(true)

    expect(
      doesMatchFilter('', [
        {
          field: '$',
          operator: 'is',
          value: '',
        },
      ]),
    ).toBe(true)
  })

  it('should match string and number', () => {
    expect(
      doesMatchFilter('10', [
        {
          field: '$',
          operator: 'is',
          value: 10,
        },
      ]),
    ).toBe(true)

    expect(
      doesMatchFilter(10, [
        {
          field: '$',
          operator: 'is',
          value: '10',
        },
      ]),
    ).toBe(true)
  })

  it('should not match unequal values', () => {
    expect(
      doesMatchFilter('value2', [
        {
          field: '$',
          operator: 'is',
          value: 'value',
        },
      ]),
    ).toBe(false)

    expect(
      doesMatchFilter('2', [
        {
          field: '$',
          operator: 'is',
          value: '',
        },
      ]),
    ).toBe(false)
  })
})

describe('is not', () => {
  it('should match unequal values', () => {
    expect(
      doesMatchFilter('a', [
        {
          field: '$',
          operator: 'is_not',
          value: 'b',
        },
      ]),
    ).toBe(true)

    expect(
      doesMatchFilter('', [
        {
          field: '$',
          operator: 'is_not',
          value: 'a',
        },
      ]),
    ).toBe(true)

    expect(
      doesMatchFilter('a', [
        {
          field: '$',
          operator: 'is_not',
          value: '',
        },
      ]),
    ).toBe(true)
  })

  it('should not match equal values', () => {
    expect(
      doesMatchFilter('value', [
        {
          field: '$',
          operator: 'is_not',
          value: 'value',
        },
      ]),
    ).toBe(false)

    expect(
      doesMatchFilter('', [
        {
          field: '$',
          operator: 'is_not',
          value: '',
        },
      ]),
    ).toBe(false)

    expect(
      doesMatchFilter('', [
        {
          field: '$',
          operator: 'is_not',
          value: '',
        },
      ]),
    ).toBe(false)
  })
})

describe('is one of / not one of', () => {
  it('should work on matchinf values', () => {
    expect(
      doesMatchFilter('value', [
        {
          field: '$',
          operator: 'is_one_of',
          value: ['value', 'value2'],
        },
      ]),
    ).toBe(true)

    expect(
      doesMatchFilter('value', [
        {
          field: '$',
          operator: 'is_not_one_of',
          value: ['value', 'value2'],
        },
      ]),
    ).toBe(false)

    expect(
      doesMatchFilter('value2', [
        {
          field: '$',
          operator: 'is_one_of',
          value: ['value', 'value2'],
        },
      ]),
    ).toBe(true)

    expect(
      doesMatchFilter('value2', [
        {
          field: '$',
          operator: 'is_not_one_of',
          value: ['value', 'value2'],
        },
      ]),
    ).toBe(false)
  })

  it('should work on non-matching values', () => {
    expect(
      doesMatchFilter('value3', [
        {
          field: '$',
          operator: 'is_one_of',
          value: ['value', 'value2'],
        },
      ]),
    ).toBe(false)

    expect(
      doesMatchFilter('value3', [
        {
          field: '$',
          operator: 'is_not_one_of',
          value: ['value', 'value2'],
        },
      ]),
    ).toBe(true)
  })
})

describe('is true / is false', () => {
  it('should match true', () => {
    expect(
      doesMatchFilter(true, [
        {
          field: '$',
          operator: 'is_true',
        },
      ]),
    ).toBe(true)

    expect(
      doesMatchFilter(1, [
        {
          field: '$',
          operator: 'is_true',
        },
      ]),
    ).toBe(true)

    expect(
      doesMatchFilter(false, [
        {
          field: '$',
          operator: 'is_false',
        },
      ]),
    ).toBe(true)

    expect(
      doesMatchFilter(1, [
        {
          field: '$',
          operator: 'is_false',
        },
      ]),
    ).toBe(false)
  })
})

describe('contans / does not contain', () => {
  it('should match containing values', () => {
    expect(
      doesMatchFilter('value', [
        {
          field: '$',
          operator: 'contains',
          value: 'value',
        },
      ]),
    ).toBe(true)

    expect(
      doesMatchFilter('ABCvalueABC', [
        {
          field: '$',
          operator: 'contains',
          value: 'value',
        },
      ]),
    ).toBe(true)

    expect(
      doesMatchFilter('value', [
        {
          field: '$',
          operator: 'does_not_contain',
          value: 'value',
        },
      ]),
    ).toBe(false)

    expect(
      doesMatchFilter('ABCvalueABC', [
        {
          field: '$',
          operator: 'does_not_contain',
          value: 'value',
        },
      ]),
    ).toBe(false)
  })

  it('should not match non-containing values', () => {
    expect(
      doesMatchFilter('value', [
        {
          field: '$',
          operator: 'contains',
          value: 'value2',
        },
      ]),
    ).toBe(false)

    expect(
      doesMatchFilter('ABCvalueABC', [
        {
          field: '$',
          operator: 'contains',
          value: 'value2',
        },
      ]),
    ).toBe(false)

    expect(
      doesMatchFilter('value', [
        {
          field: '$',
          operator: 'does_not_contain',
          value: 'value2',
        },
      ]),
    ).toBe(true)

    expect(
      doesMatchFilter('ABCvalueABC', [
        {
          field: '$',
          operator: 'does_not_contain',
          value: 'value2',
        },
      ]),
    ).toBe(true)
  })
})

describe('array includes / array does not include', () => {
  it('should work with included values', () => {
    expect(
      doesMatchFilter(
        ['value', 'value2'],
        [
          {
            field: '$',
            operator: 'array_includes',
            value: 'value',
          },
        ],
      ),
    ).toBe(true)

    expect(
      doesMatchFilter(
        ['value', 'value2'],
        [
          {
            field: '$',
            operator: 'array_does_not_include',
            value: 'value',
          },
        ],
      ),
    ).toBe(false)
  })

  it('should work with non-included values', () => {
    expect(
      doesMatchFilter(
        ['value', 'value2'],
        [
          {
            field: '$',
            operator: 'array_includes',
            value: 'value3',
          },
        ],
      ),
    ).toBe(false)

    expect(
      doesMatchFilter(
        ['value', 'value2'],
        [
          {
            field: '$',
            operator: 'array_does_not_include',
            value: 'value3',
          },
        ],
      ),
    ).toBe(true)
  })
})

describe('less / more', () => {
  it('should work with correct comparisons', () => {
    expect(
      doesMatchFilter(2, [
        {
          field: '$',
          operator: 'less_than',
          value: 2.1,
        },
      ]),
    ).toBe(true)

    expect(
      doesMatchFilter(2, [
        {
          field: '$',
          operator: 'less_than_or_equal',
          value: 2.1,
        },
      ]),
    ).toBe(true)

    expect(
      doesMatchFilter(2, [
        {
          field: '$',
          operator: 'less_than_or_equal',
          value: 2,
        },
      ]),
    ).toBe(true)

    expect(
      doesMatchFilter(2, [
        {
          field: '$',
          operator: 'more_than',
          value: 1.9,
        },
      ]),
    ).toBe(true)

    expect(
      doesMatchFilter(2, [
        {
          field: '$',
          operator: 'more_than_or_equal',
          value: 1.9,
        },
      ]),
    ).toBe(true)

    expect(
      doesMatchFilter(2, [
        {
          field: '$',
          operator: 'more_than_or_equal',
          value: 2,
        },
      ]),
    ).toBe(true)
  })

  it('should work with incorrect comparisons', () => {
    expect(
      doesMatchFilter(2, [
        {
          field: '$',
          operator: 'less_than',
          value: 1.9,
        },
      ]),
    ).toBe(false)

    expect(
      doesMatchFilter(2, [
        {
          field: '$',
          operator: 'less_than_or_equal',
          value: 1.9,
        },
      ]),
    ).toBe(false)

    expect(
      doesMatchFilter(2, [
        {
          field: '$',
          operator: 'more_than',
          value: 2.1,
        },
      ]),
    ).toBe(false)

    expect(
      doesMatchFilter(2, [
        {
          field: '$',
          operator: 'more_than_or_equal',
          value: 2.1,
        },
      ]),
    ).toBe(false)
  })
})

describe('is empty', () => {
  it('should match null', () => {
    expect(
      doesMatchFilter(null, [
        {
          field: '$',
          operator: 'is_empty',
        },
      ]),
    ).toBe(true)
  })

  it('should match undefined', () => {
    expect(
      doesMatchFilter(undefined, [
        {
          field: '$',
          operator: 'is_empty',
        },
      ]),
    ).toBe(true)
  })

  it('should match empty string', () => {
    expect(
      doesMatchFilter('', [
        {
          field: '$',
          operator: 'is_empty',
        },
      ]),
    ).toBe(true)
  })

  it('should match empty object', () => {
    expect(
      doesMatchFilter({}, [
        {
          field: '$',
          operator: 'is_empty',
        },
      ]),
    ).toBe(true)
  })

  it('should match empty list', () => {
    expect(
      doesMatchFilter(
        [],
        [
          {
            field: '$',
            operator: 'is_empty',
          },
        ],
      ),
    ).toBe(true)
  })

  it('should not match non-empty string', () => {
    expect(
      doesMatchFilter('a', [
        {
          field: '$',
          operator: 'is_empty',
        },
      ]),
    ).toBe(false)
  })

  it('should not match zero', () => {
    expect(
      doesMatchFilter(0, [
        {
          field: '$',
          operator: 'is_empty',
        },
      ]),
    ).toBe(false)
  })

  it('should not match `false`', () => {
    expect(
      doesMatchFilter(false, [
        {
          field: '$',
          operator: 'is_empty',
        },
      ]),
    ).toBe(false)
  })

  it('should not match non-empty object', () => {
    expect(
      doesMatchFilter({ key: 'value' }, [
        {
          field: '$',
          operator: 'is_empty',
        },
      ]),
    ).toBe(false)
  })

  it('should not match non-empty array', () => {
    expect(
      doesMatchFilter(
        ['a'],
        [
          {
            field: '$',
            operator: 'is_empty',
          },
        ],
      ),
    ).toBe(false)
  })
})

describe('is_not_empty', () => {
  it('should match non-empty string', () => {
    expect(
      doesMatchFilter('a', [
        {
          field: '$',
          operator: 'is_not_empty',
        },
      ]),
    ).toBe(true)
  })

  it('should match zero', () => {
    expect(
      doesMatchFilter(0, [
        {
          field: '$',
          operator: 'is_not_empty',
        },
      ]),
    ).toBe(true)
  })

  it('should match `false`', () => {
    expect(
      doesMatchFilter(false, [
        {
          field: '$',
          operator: 'is_not_empty',
        },
      ]),
    ).toBe(true)
  })

  it('should match non-empty object', () => {
    expect(
      doesMatchFilter({ key: 'value' }, [
        {
          field: '$',
          operator: 'is_not_empty',
        },
      ]),
    ).toBe(true)
  })

  it('should match non-empty list', () => {
    expect(
      doesMatchFilter(
        ['a'],
        [
          {
            field: '$',
            operator: 'is_not_empty',
          },
        ],
      ),
    ).toBe(true)
  })

  it('should not match empty list', () => {
    expect(
      doesMatchFilter(
        [],
        [
          {
            field: '$',
            operator: 'is_not_empty',
          },
        ],
      ),
    ).toBe(false)
  })

  it('should not match empty object', () => {
    expect(
      doesMatchFilter({}, [
        {
          field: '$',
          operator: 'is_not_empty',
        },
      ]),
    ).toBe(false)
  })
})
