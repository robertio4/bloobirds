import { Channel } from 'pusher-js'
import { IntegrationAppClient } from '..'
import { SubscribeOptions } from '../client'
import { FlowRun, FLOW_RUN_CHANNEL_PREFIX, FlowRunState } from '../flow-runs'
import {
  OpenConfigurationOptions,
  openIframe,
  showIframeLoader,
} from '../iframe'
import {
  FlowInstance,
  FLOW_CHANNEL_PREFIX,
  FLOW_INSTANCE_CHANNEL_PREFIX,
  Flow,
} from '.'
import {
  CreateFlowInstanceRequest,
  CreateFlowRequest,
  FindFlowInstancesQuery,
  FindFlowsRequest,
  FlowInstanceSelector,
  RunFlowOptions,
  UpdateFlowInstanceRequest,
  UpdateFlowRequest,
} from './api'
import qs from 'query-string'
import {
  ElementAccessor,
  ElementInstanceAccessor,
  ElementInstanceListAccessor,
  ElementListAccessor,
} from '../accessors'

const MAX_POLLING_ERRORS = 10

export interface OpenFlowInstanceConfigurationOptions
  extends OpenConfigurationOptions {
  nodeKey?: string
}

export class FlowsAccessor extends ElementListAccessor<
  Flow,
  FindFlowsRequest,
  CreateFlowRequest
> {
  constructor(client: IntegrationAppClient) {
    super(client, 'flows')
  }
}

export class FlowAccessor extends ElementAccessor<
  Flow,
  CreateFlowRequest,
  UpdateFlowRequest
> {
  constructor(private client: IntegrationAppClient, idOrKey: string) {
    super({
      client: client,
      path: 'flows',
      idOrKey,
    })
  }

  async runAll(params: RunFlowOptions): Promise<any[]> {
    const flow = await this.get()
    const instancesPage = await this.client.flowInstances.find({
      flowId: flow.id,
      enabled: true,
    })
    const accessors = instancesPage.items.map(
      (instance) => new FlowInstanceAccessor(this.client, instance.id),
    )
    return await Promise.all(accessors.map((accessor) => accessor.run(params)))
  }

  async subscribe(options: SubscribeOptions) {
    const flow = await this.get()
    const channelKey = `${FLOW_CHANNEL_PREFIX}${flow.id}`
    await this.client.subscribeToChannel(channelKey, options)
  }

  async unsubscribe() {
    const flow = await this.get()
    const channelKey = `${FLOW_INSTANCE_CHANNEL_PREFIX}${flow.id}`
    await this.client.unsubscribeFromChannel(channelKey)
  }
}

export class FlowInstancesAccessor extends ElementInstanceListAccessor<
  FlowInstance,
  FindFlowInstancesQuery
> {
  constructor(client: IntegrationAppClient) {
    super(client, 'flow-instances')
  }
}

export class FlowInstanceAccessor extends ElementInstanceAccessor<
  FlowInstance,
  FlowInstanceSelector,
  CreateFlowInstanceRequest,
  UpdateFlowInstanceRequest
> {
  constructor(
    protected client: IntegrationAppClient,
    protected selector: FlowInstanceSelector | string,
  ) {
    super({
      client,
      selector,
      instancePath: 'flow-instance',
    })
  }

  async enable(): Promise<FlowInstance> {
    return this.patch({ enabled: true })
  }

  async disable(): Promise<FlowInstance> {
    return this.patch({ enabled: false })
  }

  async updateToLatestFlow(): Promise<FlowInstance> {
    const id = await this.getId()
    return this.client.post(`/flow-instances/${id}/update-to-latest-flow`)
  }

  async setup(): Promise<FlowInstance> {
    const id = await this.getId()
    return this.client.post(`/flow-instances/${id}/setup`)
  }

  async reset(): Promise<FlowInstance> {
    const id = await this.getId()
    return this.client.post(`/flow-instances/${id}/reset`)
  }

  async openConfiguration(options: OpenFlowInstanceConfigurationOptions = {}) {
    showIframeLoader()
    const id = await this.getId()
    const queryParams = {
      nodeKey: options.nodeKey,
    }
    const uri = this.client.getEmbedUri(
      `/flow-instances/${id}/configuration?${qs.stringify(queryParams)}`,
    )
    return openIframe(uri, {
      onClose: options.onClose,
    })
  }

  async run(options: RunFlowOptions = {}): Promise<FlowRun> {
    function onUpdate(flowRun) {
      options.onUpdate && options.onUpdate(flowRun)
    }

    const id = await this.getId()

    const flowRun = await this.client.flowRuns.create({
      flowInstanceId: id,
      nodeKey: options.nodeKey,
      input: options.input,
    })

    onUpdate(flowRun)

    const pusher = await this.client.getPusherInstance()
    const pusherChannelName = `${FLOW_RUN_CHANNEL_PREFIX}${flowRun.id}`
    const pusherEventNameFlowRun = 'flow-run-update'
    let pusherChannel: Channel

    let checkFlowRunInterval: ReturnType<typeof setInterval>

    function cleanup() {
      checkFlowRunInterval && clearInterval(checkFlowRunInterval)

      pusherChannel && pusherChannel.unbind(pusherEventNameFlowRun)
      pusher && pusher.unsubscribe(pusherChannelName)
    }

    return new Promise((resolve, reject) => {
      const handleFlowRunUpdate = async (flowRun: FlowRun) => {
        onUpdate(flowRun)

        if (flowRun.state === FlowRunState.COMPLETED) {
          cleanup()
          resolve(flowRun)
        } else if (flowRun.state === FlowRunState.FAILED) {
          cleanup()
          reject(
            new Error(
              `Flow run ${flowRun.id} failed: ${flowRun.errors?.[0]?.message}`,
            ),
          )
        }
      }

      const fetchFlowRun = async () => {
        handleFlowRunUpdate(await this.client.flowRun(flowRun.id).get())
      }

      /* POLLING */

      // Flags to prevent making mutiple polling requests at the same time
      let pollingFlowRun = false
      let errors = 0

      checkFlowRunInterval = setInterval(async () => {
        if (!pollingFlowRun) {
          pollingFlowRun = true
          try {
            await fetchFlowRun()
            errors = 0
          } finally {
            errors += 1
            if (errors > MAX_POLLING_ERRORS) {
              cleanup()
              reject(
                new Error(
                  `Got ${errors} errors while polling flow run ${flowRun.id} state - aborting`,
                ),
              )
            }
            pollingFlowRun = false
          }
        }
      }, 1000)

      if (pusher) {
        pusherChannel = pusher.subscribe(pusherChannelName)
        pusherChannel.bind(pusherEventNameFlowRun, fetchFlowRun)
      }
    })
  }

  async subscribe(options: SubscribeOptions) {
    const id = await this.getId()
    const channelKey = `${FLOW_INSTANCE_CHANNEL_PREFIX}${id}`
    await this.client.subscribeToChannel(channelKey, options)
  }

  async unsubscribe() {
    const id = await this.getId()
    const channelKey = `${FLOW_INSTANCE_CHANNEL_PREFIX}${id}`
    await this.client.unsubscribeFromChannel(channelKey)
  }
}
