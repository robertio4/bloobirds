import { JSONSchema } from '../json-schema'
import { ErrorData } from '../errors'
import { Connection } from '../connections'
import { User } from '../users'
import { IntegrationElementInstance } from '../integration-elements'
import { Integration } from '../integrations'
import { DataFilter } from '../data-filter'

export const FLOW_CHANNEL_PREFIX = 'private-flows-'
export const FLOW_INSTANCE_CHANNEL_PREFIX = 'private-flow-instances-'

export interface FlowNode {
  /**
   * Type of the node this blueprint describes.
   */
  type: string

  /**
   * Name of the node summarizing its purpose.
   */
  name: string

  /**
   * Default node configuration.
   */
  config?: any

  /**
   * UI settings for this node.
   */
  ui?: any

  /**
   * Input this node receives from previous nodes (calculated)
   */
  inputSchema?: any

  /**
   * Output this node produces (calculated)
   */
  outputSchema?: any

  /**
   * Example of the output node produces
   */
  outputExample?: any

  /**
   * Links to nodes that run after the current node.
   */
  links?: FlowNodeLink[]
}

export interface Flow {
  /**
   * Flow blueprint's unique id. It never changes.
   */
  id: string

  /**
   * Blueprint key to conveniently refer to it by.
   * Must be unique among all blueprints within an app.
   * Can be changed.
   */
  key: string

  /**
   * Version. Used to indicate changes in the flow.
   */
  version: string

  name: string

  parametersSchema?: JSONSchema

  nodes?: Record<string, FlowNode>

  /**
   * Instance of this flow when returned in a context of a specific connection.
   * Populated in some API responses but not others.
   */
  instance?: FlowInstance

  /**
   * Instances of this flow when returned in a context of a specific connection (for a flow that can have multiple instances).
   * Populated in some API responses but not others.
   */
  instances?: FlowInstance[]

  archivedAt?: Date
}

export enum FlowInstanceState {
  SETTING_UP = 'SETTING_UP',
  SETUP_FAILED = 'SETUP_FAILED',
  READY = 'READY',
}

export interface FlowInstance {
  id: string

  userId: string

  user?: User

  connectionId?: string

  connection?: Connection

  flowId?: string

  flowVersion?: string

  integrationId: string

  integration?: Integration

  instanceKey?: string

  /**
   * This flow's unique user-readable name.
   */
  name: string

  /**
   * This flow's parameters.
   * Can be used as variables in nodes.
   */
  parameters?: any

  /**
   * Schema of parameters the flow accepts.
   * Copied from FlowBlueprint
   */
  parametersSchema?: JSONSchema

  /**
   * Dictionary of flow's nodes:
   * <key>: <node>
   */
  nodes?: Record<string, FlowInstanceNode>

  /**
   * Whether the flow is enabled (i.e. triggers are active)
   */
  enabled: boolean

  createdAt: string

  updatedAt: string

  /**
   * List of dependencies.
   */
  dependencies?: IntegrationElementInstance[]

  state?: FlowInstanceState
}

export enum FlowInstanceNodeState {
  SETTING_UP = 'SETTING_UP',
  SETUP_FAILED = 'SETUP_FAILED',
  READY = 'READY',
}

export interface FlowInstanceNode extends FlowNode {
  /**
   * State of the node.
   * Set automatically by the engine when something changes about the node or the flow.
   */
  state?: FlowInstanceNodeState

  /**
   * Any data node wants to save during its lifetime.
   */
  stateData?: any

  /**
   * Errors occured during the node's configuration.
   */
  errors?: ErrorData[]

  /**
   * Part of the node's configuration provided by the end-user.
   */
  userConfig?: any

  /**
   * Input to be used for testing the node.
   * Compiled automatically from test output of the previous nodes.
   */
  testInput?: any

  /**
   * Node's config materialized with the test data. Used for testing the node.
   */
  testConfig?: any

  /**
   * List of dependencies.
   */
  dependencies?: IntegrationElementInstance[]
}

/**
 * Record of a link between one flow node to another.
 * When a node run finishes, linked nodes runs start.
 */
export interface FlowNodeLink {
  key: string
  filter?: DataFilter
}

export interface OpenFlowInstanceConfigurationOptions {
  nodeKey?: string
  onClose?: (...args: any) => void
}

export interface RunFlowOptions {
  nodeKey?: string
  input?: any
  onUpdate?: (...args: any) => void
}

export {
  getFlowNode,
  getChildNodeKeys,
  getDownstreamNodeKeys,
  getParentNodeKeys,
  getUpstreamNodeKeys,
  getRootNodeKeys,
  getOrderedNodeKeys,
} from './utils'
