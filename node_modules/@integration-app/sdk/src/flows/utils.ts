import { Flow, FlowInstance, FlowNode } from '.'
import { FlowNodeSpec, FLOW_NODE_SPECS } from './nodes'

export function getFlowNode(
  flow: Flow | FlowInstance,
  nodeKey: string,
): FlowNode {
  return flow.nodes?.[nodeKey]
}

export function getFlowNodeSpec(node: FlowNode): FlowNodeSpec {
  if (!node) {
    throw new Error(`getFlowNodeSpec called without a node`)
  }
  const spec = FLOW_NODE_SPECS[node.type]
  if (!spec) {
    throw new Error(`Unknow flow node type: ${node.type}`)
  }
  return spec
}

/**
 * Returns keys of nodes that don't have any parents.
 */
export function getRootNodeKeys(flow: Flow | FlowInstance): string[] {
  const allNodeKeys = Object.keys(flow.nodes ?? {})
  const allLinkKeys = Object.values(flow.nodes ?? {})
    .flatMap((n) => n.links?.map((l) => l.key) ?? [])
    .filter(Boolean)
  return allNodeKeys.filter((k) => !allLinkKeys.includes(k))
}

/**
 * Returns nodes of a given flow linked from the given node via `node.links`
 */
export function getChildNodeKeys(
  flow: Flow | FlowInstance,
  nodeKey: string,
): string[] {
  const node = getFlowNode(flow, nodeKey)
  const nodeLinks = node?.links || []
  return nodeLinks
    .map((nodeLink) => nodeLink.key)
    .filter(Boolean)
    .filter((k) => !!flow.nodes?.[k])
}

/**
 * Return nodes that follow a given node - all the way until the end of the flow.
 */
export function getDownstreamNodeKeys(
  flow: Flow | FlowInstance,
  nodeKey: string,
): string[] {
  const linkedKeys = getChildNodeKeys(flow, nodeKey)
  // Recursively find linked nodes for each linked node
  return linkedKeys.concat(
    linkedKeys.map((k) => getChildNodeKeys(flow, k)).flat(),
  )
}

/**
 * Returns list of node keys that have a link to the given node.
 */
export function getParentNodeKeys(
  flow: Flow | FlowInstance,
  nodeKey: string,
): string[] {
  return Object.keys(flow.nodes || {}).filter((key) => {
    const node = getFlowNode(flow, key)
    return node?.links?.some((link) => link.key === nodeKey)
  })
}

/**
 * Return nodes that precede a given node - all the way to the beginning(s) of the flow.
 */
export function getUpstreamNodeKeys(flow: Flow, nodeKey: string): string[] {
  const parentKeys = getParentNodeKeys(flow, nodeKey)
  // Recursively find previous nodes for each directly previous node
  return parentKeys.concat(
    parentKeys.map((n) => getUpstreamNodeKeys(flow, n)).flat(),
  )
}

/**
 * Returns keys of flow nodes in order of execution.
 * If order of execution is not possible to determine (i.e. two triggers) - the returned order is arbitrary.
 *
 * This function allows executing operations on nodes that require upstream nodes to be processed first,
 * such as node setup.
 */
export function getOrderedNodeKeys(flow: Flow | FlowInstance): string[] {
  const rootNodeKeys = getRootNodeKeys(flow)
  const orderedNodeKeys = rootNodeKeys
  let hasMore = true

  // Going layer after layer
  while (hasMore) {
    hasMore = false

    for (const nodeKey of orderedNodeKeys) {
      for (const childNodeKey of getChildNodeKeys(flow, nodeKey)) {
        if (!orderedNodeKeys.includes(childNodeKey)) {
          orderedNodeKeys.push(childNodeKey)
          hasMore = true
        }
      }
    }
  }

  return orderedNodeKeys
}
