import { DataBuilderFormulaType, processValue } from '.'
import { DataBuilderFormulaBase, getValueByLocator } from './base'
import { locatorToSteps } from '../locators'
import { buildDataSchema } from '..'
import { DataBuilderContext } from '../context'

export interface IterateArguments {
  locator: string
  items: any
}

export class DataBuilderFormulaIterate extends DataBuilderFormulaBase {
  constructor(public args: IterateArguments) {
    super(DataBuilderFormulaType.ITERATE, args)
  }

  getValue(context: DataBuilderContext) {
    if (!this.args?.locator || !this.args?.items) {
      return undefined
    }

    const list = getValueByLocator(context, locatorToSteps(this.args.locator))

    if (!Array.isArray(list)) {
      return undefined
    }

    const result = []
    for (const item of list) {
      context.setCurrentArrayItem(this.args.locator, item)
      const value = processValue(this.args.items, context)
      result.push(value)
    }
    context.unsetCurrentArrayItem(this.args.locator)

    return result
  }

  getSchema(variablesSchema) {
    return {
      type: 'array',
      items: buildDataSchema(this.args?.items, variablesSchema),
    }
  }
}
