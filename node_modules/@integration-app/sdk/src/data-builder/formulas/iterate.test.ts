import { getFormula } from '.'
import { buildData } from '..'
import { DataBuilderFormulaIterate } from './iterate'

describe('data-builder/formulas/iterate', () => {
  it('should parse $iterate formulas', () => {
    expect(
      getFormula({
        $iterate: {
          locator: '$.list',
          items: '$.list.$current',
        },
      }),
    ).toEqual(
      new DataBuilderFormulaIterate({
        locator: '$.list',
        items: '$.list.$current',
      }),
    )
  })

  it('should return undefined if args are not provided', () => {
    expect(
      buildData({
        $iterate: null,
      }),
    ).toEqual(undefined)
    expect(
      buildData({
        $iterate: [],
      }),
    ).toEqual(undefined)
    expect(
      buildData({
        $iterate: {
          locator: null,
        },
      }),
    ).toEqual(undefined)
    expect(
      buildData({
        $iterate: {
          locator: '$.list',
          items: null,
        },
      }),
    ).toEqual(undefined)
  })

  it('should return undefined if not pointing to an array', () => {
    expect(
      buildData({
        $iterate: {
          locator: '$.list',
          items: '$.list.$current',
        },
      }),
    ).toEqual(undefined)
  })

  it('should produce empty list for an empty list', () => {
    expect(
      buildData(
        {
          $iterate: {
            locator: '$.list',
            items: '$.list.$current',
          },
        },
        { list: [] },
      ),
    ).toEqual([])
  })

  it('should replicate list', () => {
    const list = [1, 2, 3]
    expect(
      buildData(
        {
          $iterate: {
            locator: '$.list',
            items: {
              $var: '$.list.$current',
            },
          },
        },
        { list },
      ),
    ).toEqual(list)
  })

  it('should take subfields from the list', () => {
    const list = [
      {
        key: 'value1',
      },
      {
        key: 'value2',
      },
      {
        key: 'value3',
      },
    ]
    expect(
      buildData(
        {
          $iterate: {
            locator: '$.list',
            items: {
              $var: '$.list.$current.key',
            },
          },
        },
        { list },
      ),
    ).toEqual(['value1', 'value2', 'value3'])
  })

  it('should iterate over two lists', () => {
    const outerList = [1, 2, 3]
    const innerList = ['a', 'b', 'c']

    const expectedResult = outerList.map((outerItem) =>
      innerList.map((innerItem) => ({
        outer: outerItem,
        inner: innerItem,
      })),
    )

    expect(
      buildData(
        {
          $iterate: {
            locator: '$.outerList',
            items: {
              $iterate: {
                locator: '$.innerList',
                items: {
                  outer: {
                    $var: '$.outerList.$current',
                  },
                  inner: {
                    $var: '$.innerList.$current',
                  },
                },
              },
            },
          },
        },
        { outerList, innerList },
      ),
    ).toEqual(expectedResult)
  })
})
