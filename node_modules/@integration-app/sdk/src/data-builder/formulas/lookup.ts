import { DataBuilderFormulaType, processValue } from '.'
import { DataBuilderContext } from '../context'
import { DataBuilderFormulaBase } from './base'

export interface LookupValue {
  collectionPath?: string
  query: Record<string, any>
  createIfNotFound?: boolean
  create?: {
    fields: any
  }
}

export class DataBuilderFormulaLookup extends DataBuilderFormulaBase {
  constructor(public value: LookupValue) {
    super(DataBuilderFormulaType.LOOKUP, value)
  }

  getValue(context: DataBuilderContext) {
    // Process formulas inside value, but return it within
    // $lookup for whoever is doing lookup to resolve.
    return {
      $lookup: processValue(this.value, context),
    }
  }

  getSchema() {
    return {
      type: 'string',
    }
  }
}
