import { FlowConfigurationError } from '../../errors'
import { DataBuilderFormulaType, getFormula } from '.'
import { buildData } from '..'
import { DataBuilderContext } from '../context'
import { DataBuilderFormulaCopy } from './copy'

describe('data-builder/formulas/copy', () => {
  it('should parse $copy formula', () => {
    const formula = getFormula({
      $copy: 'field',
    })
    expect(formula).toBeDefined()
    expect(formula).not.toBeNull()
    expect(formula.type).toEqual(DataBuilderFormulaType.COPY)
    expect(formula instanceof DataBuilderFormulaCopy).toBeTruthy()
    expect((formula as DataBuilderFormulaCopy).locator).toEqual('field')
  })

  const data = {
    fieldName: 'field',
  }

  it('should resolve into itself', () => {
    const formula = getFormula({
      $copy: {
        $var: 'fieldName',
      },
    })
    expect(formula.getValue(new DataBuilderContext(data))).toEqual({
      $copy: 'field',
    })
  })

  it('should copy the field', () => {
    expect(
      buildData(
        {
          field: 'value',
          field2: {
            $copy: {
              $var: 'fieldName',
            },
          },
        },
        data,
      ),
    ).toEqual({ field: 'value', field2: 'value' })
  })

  it('should error if trying to copy another $copy field', () => {
    const brokenRecipe = {
      field1: {
        $copy: 'field2',
      },
      field2: {
        $copy: 'field1',
      },
    }
    try {
      buildData(brokenRecipe)
      throw new Error('should have thrown an error')
    } catch (e) {
      if (e instanceof FlowConfigurationError) {
        // It's ok
      } else {
        throw e
      }
    }
  })
})
