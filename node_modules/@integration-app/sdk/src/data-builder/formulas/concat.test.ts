import { buildData } from '..'

describe('data-builder/formulas/concat', () => {
  it('should return null if no arguments', () => {
    expect(
      buildData({
        $concat: null,
      }),
    ).toEqual(null)
    expect(
      buildData({
        $concat: {},
      }),
    ).toEqual(null)
    expect(
      buildData({
        $concat: {
          values: [],
        },
      }),
    ).toEqual(null)
    expect(
      buildData({
        $concat: {
          delimiter: '',
        },
      }),
    ).toEqual(null)
    expect(
      buildData({
        $concat: {
          values: [],
          delimiter: '',
        },
      }),
    ).toEqual(null)
  })

  it('should return string itself with one argument', () => {
    expect(
      buildData({
        $concat: {
          values: ['value'],
        },
      }),
    ).toEqual('value')
  })

  it('should concatenate strings without delimiter', () => {
    expect(
      buildData({
        $concat: {
          values: ['1', '2'],
        },
      }),
    ).toEqual('12')
  })

  it('should concatenate strings with delimiter', () => {
    expect(
      buildData({
        $concat: {
          values: ['1', '2'],
          delimiter: '-',
        },
      }),
    ).toEqual('1-2')

    expect(
      buildData({
        $concat: {
          values: ['1', '2'],
          delimiter: '',
        },
      }),
    ).toEqual('12')

    expect(
      buildData({
        $concat: {
          values: ['1', '2'],
          delimiter: null,
        },
      }),
    ).toEqual('12')
  })

  it('should resolve formulas in arguments', () => {
    expect(
      buildData(
        {
          $concat: {
            delimiter: '-',
            values: [
              '1',
              {
                $var: '$.key',
              },
            ],
          },
        },
        { key: '2' },
      ),
    ).toEqual('1-2')
  })

  it('should return empty result with delimiter but empty arguments', () => {
    expect(
      buildData({
        $concat: {
          delimiter: '-',
          values: [{ $var: '$.key' }, '', null],
        },
      }),
    ).toEqual('')
  })
})
