import { getFormula } from '.'
import { DataBuilderContext } from '../context'
import { DataBuilderFormulaMap, MapFormulaValue } from './map'

describe('data-builder/formulas/map', () => {
  it('should parse $map formulas', () => {
    const mapValue: MapFormulaValue = {
      value: 'value',
      mapping: [
        {
          from: 'from',
          to: 'to',
        },
      ],
    }
    expect(
      getFormula({
        $map: mapValue,
      }),
    ).toEqual(new DataBuilderFormulaMap(mapValue))
  })

  it('should work with undefined value', () => {
    const formula = new DataBuilderFormulaMap(undefined)
    expect(formula.getValue(null)).toBeUndefined()
  })

  it('should work with undefined mapping', () => {
    const formula = new DataBuilderFormulaMap({
      value: 'foo',
      mapping: undefined,
    })
    expect(formula.getValue(null)).toBeUndefined()
  })

  it('should work with empty mapping', () => {
    const formula = new DataBuilderFormulaMap({
      value: 'foo',
      mapping: [],
    })
    expect(formula.getValue(null)).toBeUndefined()
  })

  it('should apply mapping', () => {
    const formula = new DataBuilderFormulaMap({
      value: 'foo',
      mapping: [
        {
          from: 'bar',
          to: 'buzz',
        },
        {
          from: 'foo',
          to: 'bar',
        },
        {
          from: 'bar',
          to: 'foo',
        },
      ],
    })
    expect(formula.getValue(null)).toEqual('bar')
  })

  it('should apply default if no mapping matches', () => {
    const formula = new DataBuilderFormulaMap({
      value: 'notfoo',
      mapping: [
        {
          from: 'bar',
          to: 'buzz',
        },
        {
          from: 'foo',
          to: 'bar',
        },
        {
          from: 'bar',
          to: 'foo',
        },
      ],
      default: 'notbar',
    })
    expect(formula.getValue(null)).toEqual('notbar')
  })

  it('should use variables in value', () => {
    const formula = new DataBuilderFormulaMap({
      value: {
        $var: '$.key',
      },
      mapping: [
        {
          from: 'bar',
          to: 'buzz',
        },
        {
          from: 'foo',
          to: 'bar',
        },
        {
          from: 'bar',
          to: 'foo',
        },
      ],
      default: 'notbar',
    })
    expect(formula.getValue(new DataBuilderContext({ key: 'foo' }))).toEqual(
      'bar',
    )
  })

  it('should use variables in default', () => {
    const formula = new DataBuilderFormulaMap({
      value: 'unknown',
      mapping: [],
      default: {
        $var: '$.key',
      },
    })
    expect(formula.getValue(new DataBuilderContext({ key: 'foo' }))).toEqual(
      'foo',
    )
  })
})
