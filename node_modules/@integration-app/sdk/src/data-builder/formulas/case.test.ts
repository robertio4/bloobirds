import { DataBuilderFormulaType, getFormula } from '.'
import { DataBuilderContext } from '../context'
import { DataBuilderFormulaCase } from './case'

describe('data-builder/formulas/case', () => {
  const context = new DataBuilderContext({
    key: 'value',
    obj: {
      objKey: 'objValue',
    },
  })

  it('should find case formula in value', () => {
    // argument as object
    const formula = getFormula({
      $case: {
        cases: [
          {
            filter: null,
            value: 'foo',
          },
        ],
        default: 'bar',
      },
    })
    expect(formula).toBeDefined()
    expect(formula).not.toBeNull()
    expect(formula.type).toEqual(DataBuilderFormulaType.CASE)
    expect((formula as DataBuilderFormulaCase).value).toEqual({
      cases: [
        {
          filter: null,
          value: 'foo',
        },
      ],
      default: 'bar',
    })

    // argument as array
    const formula2 = getFormula({
      $case: [
        {
          filter: null,
          value: 'foo',
        },
      ],
    })
    expect(formula2).toBeDefined()
    expect(formula2).not.toBeNull()
    expect(formula2.type).toEqual(DataBuilderFormulaType.CASE)
    expect((formula2 as DataBuilderFormulaCase).value).toEqual({
      cases: [
        {
          filter: null,
          value: 'foo',
        },
      ],
      default: undefined,
    })
  })

  it('should work with undefined value', () => {
    const formula = new DataBuilderFormulaCase(undefined)
    expect(formula.getValue(context)).toBeUndefined()
  })

  it('should work with empty value', () => {
    const formula = new DataBuilderFormulaCase([])
    expect(formula.getValue(context)).toBeUndefined()
  })

  it('should work without filter', () => {
    const formula = new DataBuilderFormulaCase([
      {
        value: 'foo',
      },
    ])
    expect(formula.getValue(context)).toEqual('foo')
  })

  it('should work with formula value', () => {
    const formula = new DataBuilderFormulaCase([
      {
        value: {
          $var: '$.obj.objKey',
        },
      },
    ])
    expect(formula.getValue(context)).toEqual('objValue')

    const formula2 = new DataBuilderFormulaCase({
      cases: [],
      default: {
        $var: '$.obj.objKey',
      },
    })
    expect(formula2.getValue(context)).toEqual('objValue')
  })

  it('should take filter in account', () => {
    const formula = new DataBuilderFormulaCase([
      {
        filter: [
          {
            field: 'key',
            operator: 'is',
            value: 'notValue',
          },
        ],
        value: 'incorrectValue',
      },
      {
        filter: [
          {
            field: 'key',
            operator: 'is',
            value: 'value',
          },
        ],
        value: 'correctValue',
      },
    ])
    expect(formula.getValue(context)).toEqual('correctValue')
  })

  it('should use "else" value correctly', () => {
    const formula = new DataBuilderFormulaCase([
      {
        filter: [
          {
            field: 'key',
            operator: 'is',
            value: 'notValue',
          },
        ],
        value: 'incorrectValue',
      },
      {
        filter: [
          {
            field: 'key',
            operator: 'is',
            value: 'anotherNotValue',
          },
        ],
        value: 'anotherIncorrectValue',
      },
      {
        value: 'elseValue',
      },
    ])
    expect(formula.getValue(context)).toEqual('elseValue')
  })

  it('should use default value correctly', () => {
    const formula = new DataBuilderFormulaCase({
      default: 'defaultValue',
      cases: [
        {
          filter: [
            {
              field: 'key',
              operator: 'is',
              value: 'notValue',
            },
          ],
          value: 'incorrectValue',
        },
        {
          filter: [
            {
              field: 'key',
              operator: 'is',
              value: 'anotherNotValue',
            },
          ],
          value: 'anotherIncorrectValue',
        },
      ],
    })
    expect(formula.getValue(context)).toEqual('defaultValue')
  })

  it('should combine schemas of all option', () => {
    const variablesSchema = {
      type: 'object',
      properties: {
        obj: {
          type: 'object',
          properties: {
            objKey: { type: 'string' },
          },
        },
        obj2: {
          type: 'object',
          properties: {
            obj2Key: { type: 'string' },
          },
        },
        obj3: {
          type: 'object',
          properties: {
            obj3Key: { type: 'string' },
          },
        },
      },
    }

    const formula = new DataBuilderFormulaCase({
      cases: [
        {
          value: {
            $var: '$.obj',
          },
          filter: [],
        },
        {
          value: {
            $var: '$.obj2',
          },
          filter: [],
        },
      ],
      default: {
        $var: '$.obj3',
      },
    })
    expect(formula.getSchema(variablesSchema)).toEqual({
      type: 'object',
      properties: {
        objKey: { type: 'string' },
        obj2Key: { type: 'string' },
        obj3Key: { type: 'string' },
      },
    })

    // without default value
    const formula2 = new DataBuilderFormulaCase([
      {
        value: {
          $var: '$.obj',
        },
        filter: [],
      },
      {
        value: {
          $var: '$.obj2',
        },
        filter: [],
      },
    ])
    expect(formula2.getSchema(variablesSchema)).toEqual({
      type: 'object',
      properties: {
        objKey: { type: 'string' },
        obj2Key: { type: 'string' },
      },
    })
  })
})
