import { DataFilter, doesMatchFilter } from '../../data-filter'
import { DataBuilderFormulaType, processValue } from '.'
import { buildDataSchema } from '..'
import { DataBuilderContext } from '../context'
import { DataBuilderFormulaBase } from './base'
import { mergeSchemas } from '../../json-schema/schema-builder'

export interface CaseFormulaValueItem {
  filter?: DataFilter
  value?: any
}

export type CaseFormulaValue = {
  cases: CaseFormulaValueItem[]
  default?: any
}

export class DataBuilderFormulaCase extends DataBuilderFormulaBase {
  public value: CaseFormulaValue

  constructor(value: CaseFormulaValueItem[] | CaseFormulaValue) {
    super(DataBuilderFormulaType.CASE, value)

    if (!value && !Array.isArray(value) && typeof value !== 'object') {
      this.value = {
        cases: [],
        default: undefined,
      }
    } else if (Array.isArray(value)) {
      this.value = {
        cases: value,
        default: undefined,
      }
    } else if (typeof value === 'object' && Array.isArray(value?.cases)) {
      this.value = value
    }
  }

  getValue(context: DataBuilderContext) {
    if (!this.isValueValid()) return undefined

    for (const item of this.value.cases) {
      if (!item || typeof item !== 'object') continue

      if (doesMatchFilter(context.variables, item.filter)) {
        return processValue(item.value, context)
      }
    }

    return processValue(this.value.default, context) ?? undefined
  }

  getSchema(variablesSchema) {
    if (!this.isValueValid()) return undefined

    const schemas = this.value.cases
      .map((item) => item.value)
      .filter((value) => value !== undefined)
      .map((value) => buildDataSchema(value, variablesSchema))

    if (this.value.default) {
      schemas.push(buildDataSchema(this.value.default, variablesSchema))
    }

    return mergeSchemas(schemas)
  }

  isValueValid() {
    return (
      this.value &&
      typeof this.value === 'object' &&
      Array.isArray(this.value?.cases)
    )
  }
}
