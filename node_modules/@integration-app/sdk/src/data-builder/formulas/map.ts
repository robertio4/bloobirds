import _ from 'lodash'
import { DataBuilderFormulaType, getSchemaFromValue, processValue } from '.'
import { DataBuilderContext } from '../context'
import { DataBuilderFormulaBase } from './base'

export interface MappingItem {
  from: any
  to?: any
}

export interface MapFormulaValue {
  value: any
  mapping: MappingItem[]
  default?: any
}

export class DataBuilderFormulaMap extends DataBuilderFormulaBase {
  constructor(public value: MapFormulaValue) {
    super(DataBuilderFormulaType.MAP, value)
  }

  getValue(context: DataBuilderContext) {
    if (!this.value || typeof this.value !== 'object') {
      return
    }
    const value = processValue(this.value.value, context)
    if (Array.isArray(this.value.mapping)) {
      for (const mappingItem of this.value.mapping) {
        const from = processValue(mappingItem.from, context)
        if (_.isEqual(value, from)) {
          return processValue(mappingItem.to, context)
        }
      }
    }
    return processValue(this.value.default, context)
  }

  getSchema(variablesSchema) {
    return getSchemaFromValue(this.value.value, variablesSchema)
  }
}
