import { DataBuilderFormulaType, getFormula } from '.'
import { DataBuilderContext } from '../context'
import { DataBuilderFormulaExtractDate } from './extractDate'

describe('formulas/extractDate', () => {
  const DATETIME = '2021-07-06T02:22:22.000Z'
  const context = new DataBuilderContext({
    datetime: DATETIME,
  })

  it('should find extractDate formula', () => {
    const formula = getFormula({
      $extractDate: DATETIME,
    })
    expect(formula).toBeDefined()
    expect(formula).not.toBeNull()
    expect(formula.type).toEqual(DataBuilderFormulaType.EXTRACT_DATE)
    expect(formula instanceof DataBuilderFormulaExtractDate).toBeTruthy()
    expect((formula as DataBuilderFormulaExtractDate).value).toEqual(DATETIME)
  })

  it('should extract date', () => {
    const formula = new DataBuilderFormulaExtractDate(DATETIME)
    expect(formula.getValue(context)).toEqual('2021-07-06')
  })

  it('should extract date from variable', () => {
    const formula = new DataBuilderFormulaExtractDate({
      $var: '$.datetime',
    })
    expect(formula.getValue(context)).toEqual('2021-07-06')
  })

  it('should extract date from non-standard date', () => {
    const formula = new DataBuilderFormulaExtractDate('Jun 25, 2022 10:30')
    expect(formula.getValue(context)).toEqual('2022-06-25')
  })

  it('should return undefined when non-date value provided', () => {
    let formula = new DataBuilderFormulaExtractDate(null)
    expect(formula.getValue(context)).toBeUndefined()

    formula = new DataBuilderFormulaExtractDate('foo')
    expect(formula.getValue(context)).toBeUndefined()

    formula = new DataBuilderFormulaExtractDate('25')
    expect(formula.getValue(context)).toBeUndefined()
  })
})
