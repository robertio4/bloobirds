import { getFormula } from '.'
import { DataBuilderFormulaPlain } from './plain'
import { DataBuilderFormulaRecord } from './record'
import { DataBuilderFormulaVar } from './var'

describe('Data Builder Formulas', () => {
  describe('getFormula', () => {
    it('should parse $ref formulas', () => {
      expect(
        getFormula({
          $ref: '$.locator',
        }),
      ).toEqual(new DataBuilderFormulaVar('$.locator'))
    })

    it('should parse $var formulas', () => {
      expect(
        getFormula({
          $var: '$.locator',
        }),
      ).toEqual(new DataBuilderFormulaVar('$.locator'))
    })

    it('should parse $plain formulas', () => {
      expect(
        getFormula({
          $plain: {
            $ref: '$.locator',
          },
        }),
      ).toEqual(
        new DataBuilderFormulaPlain({
          $ref: '$.locator',
        }),
      )
    })

    it('should parse $record formulas', () => {
      expect(
        getFormula({
          $record: {
            id: 'id',
            name: 'name',
          },
        }),
      ).toEqual(new DataBuilderFormulaRecord({ id: 'id', name: 'name' }))
    })

    it('should ignore values with more than one key', () => {
      expect(
        getFormula({
          $ref: '$.locator',
          a: 'b',
        }),
      ).toBeUndefined()
    })

    it('should handle empty $compose', () => {
      expect(getFormula({ $compose: null })).toBeUndefined()
    })
  })
})
