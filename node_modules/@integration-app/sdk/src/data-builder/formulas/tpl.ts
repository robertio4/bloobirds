import { DataBuilderFormulaType, processValue } from '.'
import { DataBuilderContext } from '../context'
import { DataBuilderFormulaBase } from './base'

type TplFormulaArgs = {
  template: string
  values: Record<string, any>
}

export class DataBuilderFormulaTpl extends DataBuilderFormulaBase {
  constructor(public args: TplFormulaArgs) {
    super(DataBuilderFormulaType.TPL, args)
  }

  getValue(context: DataBuilderContext) {
    let result = this.args?.template
    if (typeof result !== 'string') {
      return result
    }
    for (const key of Object.keys(this.args?.values ?? {})) {
      const value = processValue(this.args.values[key], context)
      result = result.replace(new RegExp(`\\{${key}\\}`, 'g'), value ?? '')
    }
    return result
  }

  getSchema() {
    return {
      type: 'string',
    }
  }
}
