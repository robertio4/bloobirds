export enum DataCollectionEventType {
  CREATED = 'created',
  UPDATED = 'updated',
  DELETED = 'deleted',
}

export interface DataRecord {
  /**
   * Unique record id
   */
  id?: string
  /**
   * Human-readable name of the record.
   */
  name?: string
  /**
   * Record's URI avialable in a browser.
   */
  uri?: string
  /**
   * Record's icon.
   */
  iconUri?: string
  /**
   * Record's fields.
   */
  fields?: Record<string, any>
  /**
   * Unified Data Model this record is transformed to.
   * It is `string` and not `UDM` type to avoid nasty problems with mismatched SDK versions in different parts of the system.
   * (as soon as one SDK version has a new value in UDM, all other instances of SDK should have the same).
   * (alternatively it could be solved by making SDK into peer dependencies - we may have to do it later)
   */
  udm?: string
  /**
   * Fields of Unified Data Model associated with the record.
   */
  unifiedFields?: Record<string, any>
  /**
   * Original fields coming from the source, before any mapping happens.
   */
  rawFields?: Record<string, any>
}

export interface DataCollection {
  id: string

  key: string

  udm: string
}

export interface DataCollectionInstance {
  id: string

  dataCollectionId?: string

  connectionId: string

  udm?: string

  path: string
}

export enum DataEventType {
  CREATED = 'created',
  UPDATED = 'updated',
  DELETED = 'deleted',
}

export interface DataCollectionEvent {
  type: DataCollectionEventType
  record: DataRecord
}
