import { buildData } from '../data-builder'
import contactsSpec from './contacts'

describe('udm/contacts', () => {
  it('should normalize phones', () => {
    expect(
      contactsSpec.normalizeFields({
        primaryPhone: '+1 (617) 123-45-67',
        phones: [
          {
            value: '+1 (617) 123-45-67',
            type: 'mobile',
          },
          {
            value: '12345',
            type: 'other',
          },
          {
            value: '6134113122',
            type: 'home',
          },
        ],
      }),
    ).toEqual({
      primaryPhone: '+16171234567',
      phones: [
        {
          value: '+16171234567',
          type: 'mobile',
        },
        {
          value: '12345',
          type: 'other',
        },
        {
          value: '+16134113122',
          type: 'home',
        },
      ],
    })
  }),
    it('should not normalize phones if there is nothing to be normalized', () => {
      expect(
        contactsSpec.normalizeFields({
          phones: [],
          primaryPhone: null,
        }),
      ).toEqual({
        phones: [],
        primaryPhone: null,
      })
    }),
    it('should populate primary contact info', () => {
      expect(
        contactsSpec.populateFields({
          primaryEmail: null,
          primaryPhone: null,
          emails: [
            {
              value: 'workEmail@gmail.com',
              type: 'work',
            },
            {
              value: 'otherEmail@gmail.com',
              type: 'other',
            },
          ],
          phones: [
            {
              value: '+16171234567',
              type: 'mobile',
            },
            {
              value: '12345',
              type: 'other',
            },
            {
              value: '+16134113122',
              type: 'home',
            },
          ],
        }),
      ).toEqual({
        primaryEmail: 'workEmail@gmail.com',
        primaryPhone: '+16171234567',
        emails: [
          {
            value: 'workEmail@gmail.com',
            type: 'work',
          },
          {
            value: 'otherEmail@gmail.com',
            type: 'other',
          },
        ],
        phones: [
          {
            value: '+16171234567',
            type: 'mobile',
          },
          {
            value: '12345',
            type: 'other',
          },
          {
            value: '+16134113122',
            type: 'home',
          },
        ],
      })
    }),
    it('should not populate primary contact info if there is nothing to be populated', () => {
      expect(
        contactsSpec.populateFields({
          primaryEmail: null,
          emails: [],
        }),
      ).toEqual({
        primaryEmail: null,
        emails: [],
      })
    }),
    it('should populate fullName if firstName and lastName were set', async () => {
      expect(
        await buildData(
          contactsSpec.populateFields({ firstName: 'John', lastName: 'Doe' }),
        ),
      ).toEqual({
        firstName: 'John',
        lastName: 'Doe',
        fullName: 'John Doe',
      })
    }),
    it('should not overwrite fullName if it has already been set', () => {
      expect(
        contactsSpec.populateFields({
          firstName: 'John',
          lastName: 'Doe',
          fullName: 'Rachel Green',
        }),
      ).toEqual({
        firstName: 'John',
        lastName: 'Doe',
        fullName: 'Rachel Green',
      })
    })
})
