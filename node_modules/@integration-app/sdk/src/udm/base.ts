import { Type } from '@sinclair/typebox'
import phone from 'phone'
import {
  DataCollectionCreateSpec,
  DataCollectionDeleteSpec,
  DataCollectionFindSpec,
  DataCollectionUpdateSpec,
} from '../connector-api'

export interface UnifiedDataModel {
  singularName: string
  pluralName: string
  fieldsSchema: any
  /**
   * Normalize field values. For example, normalize phone numbers to E.164 format.
   */
  normalizeFields?: (fields: Record<string, any>) => Record<string, any>
  /**
   * Using dependencies between fields, populates missing fields.
   * For example, if primaryEmail is missing, it will be populated from emails.
   */
  populateFields?: (fields: Record<string, any>) => Record<string, any>
  find?: DataCollectionFindSpec
  create?: DataCollectionCreateSpec
  update?: DataCollectionUpdateSpec
  delete?: DataCollectionDeleteSpec
}

export const AddressSchema = Type.Partial(
  Type.Object({
    type: Type.String(),
    full: Type.String(),
    street: Type.String(),
    city: Type.String(),
    state: Type.String(),
    country: Type.String(),
    zip: Type.String(),
  }),
)

export const PhoneEmailSchema = Type.Partial(
  Type.Object({
    value: Type.String(),
    type: Type.String(),
  }),
)

export function normalizePhone(value: string): string {
  if (typeof value !== 'string') {
    return value
  }
  const validationResult = phone(value)
  if (validationResult.isValid) {
    return validationResult.phoneNumber
  } else {
    // By default, just remove all the non-phone-number symbols from the value
    const hasPlus = value.trim().startsWith('+')
    let result = value.replace(/[^\d]/g, '')
    if (hasPlus) {
      result = `+${result}`
    }
    return result
  }
}

export function populateContactInfo(
  fields: Record<string, any>,
): Record<string, any> {
  const result = JSON.parse(JSON.stringify(fields))
  if (!result.fullName && result.firstName && result.lastName) {
    result.fullName = {
      $concat: {
        values: [result.firstName, result.lastName],
        delimiter: ' ',
      },
    }
  }
  if (!result.primaryEmail && result.emails && result.emails.length > 0) {
    result.primaryEmail = result.emails[0].value
  }
  if (!result.primaryPhone && result.phones && result.phones.length > 0) {
    result.primaryPhone = result.phones[0].value
  }
  if (
    !result.primaryAddress &&
    result.addresses &&
    result.addresses.length > 0
  ) {
    result.primaryAddress = result.addresses[0]
  }
  return result
}
