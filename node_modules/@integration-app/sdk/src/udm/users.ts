import { Static, Type } from '@sinclair/typebox'
import {
  normalizePhone,
  PhoneEmailSchema,
  populateContactInfo,
  UnifiedDataModel,
} from './base'

const FIELDS_SCHEMA = Type.Partial(
  Type.Object({
    fullName: Type.String(),
    firstName: Type.String(),
    lastName: Type.String(),
    userName: Type.String(),
    primaryEmail: Type.String(),
    emails: Type.Array(PhoneEmailSchema),
    primaryPhone: Type.String(),
    phones: Type.Array(PhoneEmailSchema),
    companyName: Type.String(),
    companyId: Type.String({
      referenceUdm: 'companies',
    }),
    imageUrl: Type.String(),
    timezone: Type.String(),
    isActive: Type.Boolean(),
    roleId: Type.Number(),
    createdTime: Type.String({ format: 'date-time' }),
    createdBy: Type.String({
      referenceUdm: 'users',
    }),
    updatedTime: Type.String({ format: 'date-time' }),
    updatedBy: Type.String({
      referenceUdm: 'users',
    }),
  }),
)

export type UnifiedUserFields = Static<typeof FIELDS_SCHEMA>

const MODIFIABLE_FIELDS = [
  'companyId',
  'companyName',
  'firstName',
  'fullName',
  'imageUrl',
  'isActive',
  'lastName',
  'primaryEmail',
  'primaryPhone',
  'roleId',
  'userName',
]

const udm: UnifiedDataModel = {
  singularName: 'user',
  pluralName: 'users',
  fieldsSchema: FIELDS_SCHEMA,
  find: {
    queryFields: [
      'companyName',
      'email',
      'firstName',
      'fullName',
      'lastName',
      'primaryEmail',
      'primaryPhone',
    ],
  },
  create: {
    fields: MODIFIABLE_FIELDS,
  },
  update: {
    fields: MODIFIABLE_FIELDS,
  },
  normalizeFields,
  populateFields: populateContactInfo,
}

export default udm

function normalizeFields(fields: UnifiedUserFields): UnifiedUserFields {
  const result = JSON.parse(JSON.stringify(fields))
  if (result.primaryPhone) {
    result.primaryPhone = normalizePhone(result.primaryPhone)
  }
  if (result.phones) {
    result.phones.forEach((phone) => {
      phone.value = normalizePhone(phone.value)
    })
  }
  return result
}
