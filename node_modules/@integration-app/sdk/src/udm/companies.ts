import { Static, Type } from '@sinclair/typebox'
import {
  AddressSchema,
  normalizePhone,
  PhoneEmailSchema,
  UnifiedDataModel,
} from './base'

const FIELDS_SCHEMA = Type.Partial(
  Type.Object({
    name: Type.String(),
    websiteUrl: Type.String(),
    phones: Type.Array(PhoneEmailSchema),
    primaryPhone: Type.String(),
    description: Type.String(),
    currency: Type.String(),
    industry: Type.String(),
    ownerId: Type.String({
      referenceUdm: 'users',
    }),
    primaryAddress: AddressSchema,
    addresses: Type.Array(AddressSchema),
    numberOfEmployees: Type.Number(),
    createdTime: Type.String({ format: 'date-time' }),
    createdBy: Type.String({
      referenceUdm: 'users',
    }),
    updatedTime: Type.String({ format: 'date-time' }),
    updatedBy: Type.String({
      referenceUdm: 'users',
    }),
    lastActivityTime: Type.String({ format: 'date-time' }),
  }),
)

export type UnifiedCompanyFields = Static<typeof FIELDS_SCHEMA>

const MODIFIABLE_FIELDS = [
  'addresses',
  'currency',
  'description',
  'industry',
  'name',
  'numberOfEmployees',
  'ownerId',
  'primaryAddress',
  'primaryPhone',
  'websiteUrl',
]

const udm: UnifiedDataModel = {
  singularName: 'company',
  pluralName: 'companies',
  fieldsSchema: FIELDS_SCHEMA,
  find: {
    queryFields: ['name', 'websiteUrl'],
  },
  create: {
    fields: MODIFIABLE_FIELDS,
  },
  update: {
    fields: MODIFIABLE_FIELDS,
  },
  normalizeFields,
}

export default udm

function normalizeFields(fields: UnifiedCompanyFields): UnifiedCompanyFields {
  const result = JSON.parse(JSON.stringify(fields))
  if (result.primaryPhone) {
    result.primaryPhone = normalizePhone(result.primaryPhone)
  }
  if (result.phones) {
    result.phones.forEach((phone) => {
      phone.value = normalizePhone(phone.value)
    })
  }
  return result
}
