import { connectToChild } from 'penpal'
import { insertCss } from 'insert-css'

export const POPUP_ELEMENT_ID = '__integration-app-popup'
const CONTAINER_ELEMENT_ID = '__integration-app-container'
const CONTAINER_ELEMENT_CLASS = '__integration-app-container'
const CONTAINER_ELEMENT_CLASS__VISIBLE = '__integration-app-container__visible'
const CONTAINER_ELEMENT_CLASS__LOADER = '__integration-app-container__loader'
const CONTAINER_ELEMENT_CLASS_KEYFRAMES =
  '__integration-app-container-keyframes'
const BODY_CLASS = '__integration-app-open'
let initialized = false
let handshakeTimeout: any = null

export interface OpenConfigurationOptions {
  onClose?: () => void
}

export interface OpenIframeOptions extends OpenConfigurationOptions {
  [key: string]: (...args: any[]) => void
}

/*
Open a full-page iframe with a given URI and
expose a list of callbacks to the page inside.

Callbacks will be called be from inside the iframe using the `penpal` library.
https://www.npmjs.com/package/penpal
*/

const HANDSHAKE_TIMEOUT_MS = 10000

export function showIframeLoader() {
  if (!initialized) {
    initialized = true
    init()
  }

  const container = getContainer()
  container.classList.add(CONTAINER_ELEMENT_CLASS__LOADER)
}

function hideIframeLoader() {
  const container = getContainer()
  container.classList.remove(CONTAINER_ELEMENT_CLASS__LOADER)
}

export async function openIframe(
  uri: string,
  callbacks: OpenIframeOptions = {},
): Promise<void> {
  if (!initialized) {
    initialized = true
    init()
  }

  //  In case we had another iframe open - close it
  close()

  return new Promise((resolve) => {
    function complete(callback) {
      close(callback)
      resolve()
    }

    handshakeTimeout = setTimeout(() => {
      console.error(
        'It takes too long for Integration UI to load. Something must be wrong.',
      )
      complete(callbacks.onClose)
    }, HANDSHAKE_TIMEOUT_MS)

    function handshake() {
      clearHandshakeTimeout()
    }

    function doOpen() {
      const iframe = document.createElement('iframe')
      iframe.src = uri
      iframe.id = POPUP_ELEMENT_ID
      if (!!getContainer()) {
        document.body.classList.add(BODY_CLASS)
        appendToContainer(iframe)
        showContainer()
        connectToChild({
          iframe,
          methods: {
            ...callbacks,
            close: () => complete(callbacks.onClose),
            handshake,
          },
        })
      } else {
        throw Error(
          'Integration.app container element not found. Was it manually removed?',
        )
      }
    }

    if (
      document.readyState === 'complete' ||
      document.readyState === 'interactive'
    ) {
      doOpen()
    } else {
      document.addEventListener('DOMContentLoaded', () => {
        doOpen()
      })
    }
  })
}

function close(callback?: (...args: any) => void) {
  document.body.classList.remove(BODY_CLASS)
  if (!!getContainer()) {
    hideIframeLoader()
    hideContainer()
    clearContainer()
    if (callback) {
      callback()
    }
  }
  clearHandshakeTimeout()
}

export function init() {
  insertCss(`
    .${CONTAINER_ELEMENT_CLASS} {
      position: fixed;
      top: 0;
      bottom: 0;
      right: 0;
      left: 0;
      z-index: 2147483647;
      display: none;
    }
    .${CONTAINER_ELEMENT_CLASS}.${CONTAINER_ELEMENT_CLASS__LOADER}:not(.${CONTAINER_ELEMENT_CLASS__VISIBLE}):empty {
      display: flex;
      justify-content: center;
      align-items: center;
      background: rgba(0, 0, 0, 0.5);
    }
    .${CONTAINER_ELEMENT_CLASS}.${CONTAINER_ELEMENT_CLASS__LOADER}:not(.${CONTAINER_ELEMENT_CLASS__VISIBLE}):empty::before {
      content: "";
      border-radius: 50%;
      width: 2rem;
      height: 2rem;
      border: 0.3rem solid rgba(255, 255, 255, 0.2);
      border-top-color: white;
      -webkit-animation: ${CONTAINER_ELEMENT_CLASS_KEYFRAMES} 1s infinite linear;
      animation: ${CONTAINER_ELEMENT_CLASS_KEYFRAMES} 1s infinite linear;
    }
    .${CONTAINER_ELEMENT_CLASS__VISIBLE} {
      display: block;
    }
    .${CONTAINER_ELEMENT_CLASS} iframe {
      position: absolute;
      width: 100%;
      height: 100%;
      border-width: 0;
    }
    body.${BODY_CLASS} {
      overflow: hidden;
    }


    @-webkit-keyframes ${CONTAINER_ELEMENT_CLASS_KEYFRAMES} {
      0% {
        transform: rotate(0deg);
      }
      100% {
        transform: rotate(360deg);
      }
    }
    @keyframes ${CONTAINER_ELEMENT_CLASS_KEYFRAMES} {
      0% {
        transform: rotate(0deg);
      }
      100% {
        transform: rotate(360deg);
      }
    }
  `)
  const container = document.createElement('div')
  container.id = CONTAINER_ELEMENT_ID
  container.classList.add(CONTAINER_ELEMENT_CLASS)
  document.body.appendChild(container)
}

function clearHandshakeTimeout() {
  if (handshakeTimeout) {
    clearTimeout(handshakeTimeout)
    handshakeTimeout = null
  }
}

function getContainer() {
  return document.getElementById(CONTAINER_ELEMENT_ID)
}

function showContainer() {
  const container = getContainer()
  container.classList.add(CONTAINER_ELEMENT_CLASS__VISIBLE)
}

function hideContainer() {
  const container = getContainer()
  container.classList.remove(CONTAINER_ELEMENT_CLASS__VISIBLE)
}

function appendToContainer(el) {
  const container = getContainer()
  container.appendChild(el)
}

function clearContainer() {
  const container = getContainer()
  if (container.firstChild) {
    container.removeChild(container.firstChild)
  }
}
