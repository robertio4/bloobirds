import { FieldMapping, IFieldMappingInstance } from '.'
import { IntegrationAppClient } from '..'
import {
  FindFieldMappingInstancesQuery,
  FindFieldMappingsQuery,
  FieldMappingInstanceSelector,
  UpdateFieldMappingInstanceRequest,
  UpdateFieldMappingRequest,
  CreateFieldMappingInstanceRequest,
  CreateFieldMappingRequest,
} from './api'
import {
  OpenConfigurationOptions,
  openIframe,
  showIframeLoader,
} from '../iframe'
import {
  ElementAccessor,
  ElementInstanceAccessor,
  ElementInstanceListAccessor,
  ElementListAccessor,
} from '../accessors'

interface OpenFieldMappingInstanceConfigurationOptions
  extends OpenConfigurationOptions {}

export class FieldMappingsAccessor extends ElementListAccessor<
  FieldMapping,
  FindFieldMappingsQuery,
  CreateFieldMappingRequest
> {
  constructor(client: IntegrationAppClient) {
    super(client, 'field-mappings')
  }
}

export class FieldMappingAccessor extends ElementAccessor<
  FieldMapping,
  CreateFieldMappingRequest,
  UpdateFieldMappingRequest
> {
  constructor(client: IntegrationAppClient, idOrKey: string) {
    super({
      client,
      path: 'field-mappings',
      idOrKey,
    })
  }
}

export class FieldMappingInstancesAccessor extends ElementInstanceListAccessor<
  IFieldMappingInstance,
  FindFieldMappingInstancesQuery
> {
  constructor(client: IntegrationAppClient) {
    super(client, 'field-mapping-instances')
  }
}

export class FieldMappingInstanceAccessor extends ElementInstanceAccessor<
  IFieldMappingInstance,
  FieldMappingInstanceSelector,
  CreateFieldMappingInstanceRequest,
  UpdateFieldMappingInstanceRequest
> {
  constructor(
    private client: IntegrationAppClient,
    selector: string | FieldMappingInstanceSelector,
  ) {
    super({
      client,
      instancePath: 'field-mapping-instance',
      selector,
    })
  }

  async setup(): Promise<void> {
    const id = await this.getId()
    return this.client.post(`/field-mapping-instances/${id}/setup`)
  }

  async reset(): Promise<void> {
    const id = await this.getId()
    return this.client.post(`/field-mapping-instances/${id}/reset`)
  }

  async openConfiguration(
    options?: OpenFieldMappingInstanceConfigurationOptions,
  ): Promise<void> {
    showIframeLoader()
    const id = await this.getId()
    const uri = this.client.getEmbedUri(
      `/field-mapping-instances/${id}/configuration`,
    )
    return openIframe(uri, {
      onClose: options?.onClose,
    })
  }
}
