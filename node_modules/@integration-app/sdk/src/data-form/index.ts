import { toHeaderCase } from 'js-convert-case'
import { valueToString } from '../data-builder'
import { DataBuilderFormulaVar } from '../data-builder/formulas/var'
import {
  getLocatorsFromSchema,
  getValueAtLocator,
  setValueAtLocator,
} from '../data-builder/locators'
import { DataSchema } from '../data-schema'
import { DataField } from './data-field'
import deepEqual from 'fast-deep-equal'

export interface DataFormArgs {
  schema: DataSchema
  value: any
  variablesSchema?: DataSchema
}

export interface FieldValueOption {
  name: string
  value: any
  selected?: boolean
}

export interface DataForm extends DataFormArgs {}

export class DataForm {
  public constructor(args: DataFormArgs) {
    Object.assign(this, args)
  }

  getFields(): DataField[] {
    switch (this.schema.type) {
      case 'object':
        return Object.entries(this.schema.properties ?? {}).map(
          ([key, schema]) => this.makeDataField(key, schema),
        )
      case 'array':
        return []
      default:
        return [this.makeDataField(null, this.schema)]
    }
  }

  getFieldValueOptions(field: DataField): FieldValueOption[] {
    const options: FieldValueOption[] = []

    const defaultValue = field.schema?.default
    if (defaultValue !== undefined) {
      options.push({
        name: valueToString(field.schema.default, this.variablesSchema),
        value: field.schema.default,
      })
    }

    for (const locator of getLocatorsFromSchema(this.variablesSchema)) {
      const formula = new DataBuilderFormulaVar(locator)
      const value = formula.toObject()
      if (!deepEqual(value, defaultValue)) {
        options.push({
          name: formula.toString(this.variablesSchema),
          value,
        })
      }
    }

    options.forEach((option) => {
      option.selected = deepEqual(option.value, field.value)
    })

    return options
  }

  setFieldValue(field: DataField, value: any): any {
    return setValueAtLocator(this.value, field.locator, value)
  }

  private makeDataField(key: string, schema: DataSchema): DataField {
    return {
      name: schema?.title ?? toHeaderCase(key),
      locator: key,
      schema,
      value: getValueAtLocator(this.value, key),
    }
  }
}
