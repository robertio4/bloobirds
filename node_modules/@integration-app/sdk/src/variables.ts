import { Flow, FlowInstance } from './flows'

export function getNodeInputSchema(flow: FlowInstance, nodeKey: string): any {
  const schema = {
    type: 'object',
    properties: {},
  }

  getUpstreamNodeKeys(flow, nodeKey).forEach((prevNodeKey) => {
    const prevNode = flow.nodes[prevNodeKey]
    if (prevNode.outputSchema) {
      const prevNodeSchema = JSON.parse(JSON.stringify(prevNode.outputSchema))
      if (!prevNodeSchema.title) {
        prevNodeSchema.title = prevNode.name
      }
      schema.properties[prevNodeKey] = prevNodeSchema
    }
  })
  return schema
}

export function getUpstreamNodeKeys(
  flow: Flow | FlowInstance,
  nodeKey: string,
): string[] {
  const upLinkedNodeKeys = Object.entries(flow.nodes ?? {})
    .filter(([_key, node]) => node.links?.some((l) => l.key == nodeKey))
    .map(([key]) => key)
  // Recursively find previous nodes for each directly previous node
  return upLinkedNodeKeys.concat(
    upLinkedNodeKeys.map((k) => getUpstreamNodeKeys(flow, k)).flat(),
  )
}
