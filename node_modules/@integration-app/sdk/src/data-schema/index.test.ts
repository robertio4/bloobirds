import {
  addRequiredFieldsToSchema,
  excludeFieldsFromSchema,
  pickFieldsFromSchema,
} from '.'

describe('pickFieldsFromSchema', () => {
  const schema = {
    type: 'object',
    properties: {
      key: {
        type: 'string',
        title: 'Key',
      },
      objKey: {
        type: 'object',
        title: 'Obj Key',
        properties: {
          subKey: { type: 'number', title: 'Sub Key of Obj Key' },
        },
      },
    },
  }

  it('should pick top-level fields', () => {
    expect(pickFieldsFromSchema(schema, ['key'])).toEqual({
      type: 'object',
      properties: {
        key: schema.properties.key,
      },
    })

    expect(pickFieldsFromSchema(schema, ['key', 'objKey'])).toEqual({
      type: 'object',
      properties: {
        key: schema.properties.key,
        objKey: schema.properties.objKey,
      },
    })
  })

  it('should pick a nested key', () => {
    expect(pickFieldsFromSchema(schema, ['objKey.subKey'])).toEqual({
      type: 'object',
      properties: {
        objKey: {
          type: 'object',
          properties: {
            subKey: schema.properties.objKey.properties.subKey,
          },
        },
      },
    })
  })
})

describe('excludeFieldsFromSchema', () => {
  it('should exclude fields', () => {
    const schema = {
      type: 'object',
      properties: {
        key: {
          type: 'string',
          title: 'Key',
        },
        objKey: {
          type: 'object',
          title: 'Obj Key',
          properties: {
            subKey: { type: 'number', title: 'Sub Key of Obj Key' },
          },
        },
      },
    }

    expect(excludeFieldsFromSchema(schema, ['key'])).toEqual({
      type: 'object',
      properties: {
        objKey: schema.properties.objKey,
      },
    })

    expect(excludeFieldsFromSchema(schema, ['objKey.subKey'])).toEqual({
      type: 'object',
      properties: {
        key: schema.properties.key,
        objKey: {
          ...schema.properties.objKey,
          properties: {},
        },
      },
    })
  })
})

describe('addRequiredFieldsToSchema', () => {
  it('should work with null schema', () => {
    expect(addRequiredFieldsToSchema(null, ['key'])).toEqual(undefined)
  })

  it('should work with no fields', () => {
    const schema = {
      type: 'object',
      properties: {
        key: {
          type: 'string',
          title: 'Key',
        },
      },
    }

    expect(addRequiredFieldsToSchema(schema, [])).toEqual(schema)
  })

  it('shoudl add required fields on top level', () => {
    const schema = {
      type: 'object',
    }

    expect(addRequiredFieldsToSchema(schema, ['key1', 'key2'])).toEqual({
      ...schema,
      required: ['key1', 'key2'],
    })
  })

  it('should add required fields on sub-objects', () => {
    const schema = {
      type: 'object',
      properties: {
        objKey: {
          type: 'object',
          properties: {
            subKey: { type: 'number', title: 'Sub Key of Obj Key' },
          },
        },
      },
    }

    expect(
      addRequiredFieldsToSchema(schema, ['objKey.subKey1', 'objKey.subKey2']),
    ).toEqual({
      ...schema,
      properties: {
        objKey: {
          ...schema.properties.objKey,
          required: ['subKey1', 'subKey2'],
        },
      },
    })
  })
})
