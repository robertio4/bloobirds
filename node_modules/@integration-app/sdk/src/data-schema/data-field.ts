import { toHeaderCase } from 'js-convert-case'
import { isFormula } from '../data-builder/formulas'

export class IDataField {
  /**
   * This field's key inside the parent field.
   * If parent field is an object, it is a property key.
   * If parent field is an array, this is an index inside the array.
   * If it's a top-level field, the key is empty.
   */
  key?: string

  /**
   * Field's human-readable name.
   */
  name?: string

  /**
   * Field's Data Schema
   */
  schema?: any

  /**
   * Field's value. Can be a plain value or a formula.
   */
  value?: any

  /**
   * Whether this field is required.
   */
  isRequired?: boolean

  /**
   * Fields nested into this field
   */
  subFields?: IDataField[]
}

export interface DataField extends IDataField {}

export class DataField {
  constructor(data: IDataField) {
    Object.assign(this, data)

    this.name = this.name ?? this.schema.title ?? toHeaderCase(this.key)

    this.subFields = extractSubFields(this)
  }
}

function extractSubFields(field: DataField) {
  let subfields: DataField[] = []
  if (!field.schema?.type) {
    subfields = getSubfieldsFromValue(field)
  } else if (field.schema?.type === 'object') {
    subfields = [
      ...getSubfieldsFromObjectSchema(field),
      ...(isObjectAllowedAdditionalProperties(field)
        ? getSubfieldsFromValue(field)
        : []),
    ]
  } else if (field.schema?.type === 'array') {
    if (Array.isArray(field.value)) {
      subfields = getSubfieldsFromValue(field)
    }
  }
  return subfields
}

function getSubfieldsFromValue(field: DataField) {
  const fields = []
  if (Array.isArray(field.value)) {
    return field.value.map(
      (item, idx) =>
        new DataField({
          key: (idx + 1).toString(),
          schema: field.schema?.items,
          value: item,
        }),
    )
  } else if (
    typeof field.value == 'object' &&
    field.value !== null &&
    !isFormula(field.value)
  ) {
    Object.entries(field.value).forEach(([key, value]) => {
      if (
        !field.schema ||
        !field.schema.properties ||
        !(key in field.schema.properties)
      ) {
        fields.push(
          new DataField({
            key,
            schema: null,
            value: value,
          }),
        )
      }
    })
  }
  return fields
}

function getSubfieldsFromObjectSchema(field: DataField) {
  const fields = []
  if (field.schema?.properties) {
    Object.entries(field.schema.properties).forEach(([key, value]) => {
      fields.push(
        new DataField({
          key,
          schema: value,
          value: field.value?.[key],
        }),
      )
    })
  }
  return fields
}
function isObjectAllowedAdditionalProperties(field: DataField) {
  if (field.schema?.type !== 'object') {
    // This is a custom field, so it can have additional properties
    return true
  }
  return field.schema?.additionalProperties === true
}
