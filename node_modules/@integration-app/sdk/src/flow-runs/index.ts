import { ErrorData } from '../errors'
import { PaginationResponse, PaginationQuery } from '../entity-repository'
import { FlowNodeRun } from './flow-node-runs'
import { IntegrationAppClient, SubscribeOptions } from '../client'
import { User } from '../users'
import { FlowInstance } from '../flows'
import { Connection } from '../connections'
import { Integration } from '../integrations'

/**
 * Prefix for the realtime updates channel.
 */
export const FLOW_RUN_CHANNEL_PREFIX = 'private-flow-runs-'

export enum FlowRunState {
  RUNNING = 'running',
  COMPLETED = 'completed',
  FAILED = 'failed',
}

export enum FlowRunLaunchedByTrigger {
  ApiTrigger = 'api-trigger',
  ScheduleTrigger = 'schedule-trigger',
  AppEventTrigger = 'app-event-trigger',
  DataSourceTrigger = 'data-source-trigger',
}

export interface FlowRun {
  id: string

  flowInstanceId: string

  flowInstance?: FlowInstance

  connectionId?: string

  connection?: Connection

  integrationId?: string

  integration?: Integration

  startNodeKey: string

  userId: string

  user?: User

  flowBlueprintKey?: string

  input?: any

  state: FlowRunState

  startTime: Date

  endTime?: Date

  errors?: ErrorData[]

  nodeRuns?: FlowNodeRun[]

  launchedBy?: FlowRunLaunchedBy
}

export interface FlowRunLaunchedBy {
  type: FlowRunLaunchedByTrigger
  ids?: string[]
}

export interface CreateFlowRunRequest {
  flowInstanceId: string

  nodeKey?: string

  input?: any
}

export class FlowRunsQuery extends PaginationQuery {
  startNodeKey?: string
  flowInstanceId?: string
  flowBlueprintKey?: string
  userId?: string
}

export class FindFlowRunsResponse extends PaginationResponse<FlowRun> {}

export class FlowRunsAccessor {
  constructor(private readonly client: IntegrationAppClient) {}

  async find(query: FlowRunsQuery): Promise<FindFlowRunsResponse> {
    return this.client.get('/flow-runs', query)
  }

  async create(request: CreateFlowRunRequest): Promise<FlowRun> {
    return this.client.post('/flow-runs', request)
  }
}

export class FlowRunAccessor {
  private baseUri: string

  constructor(
    private readonly client: IntegrationAppClient,
    public id: string,
  ) {
    this.baseUri = `/flow-runs/${id}`
  }

  async get(): Promise<FlowRun> {
    return this.client.get(this.baseUri)
  }

  async getOutput(): Promise<any> {
    return this.client.get(`${this.baseUri}/output`)
  }

  async subscribe(options: SubscribeOptions) {
    const channelKey = `${FLOW_RUN_CHANNEL_PREFIX}${this.id}`
    await this.client.subscribeToChannel(channelKey, options)
  }

  async unsubscribe() {
    const channelKey = `${FLOW_RUN_CHANNEL_PREFIX}${this.id}`
    await this.client.unsubscribeFromChannel(channelKey)
  }

  async repeat({
    onUpdate,
  }: {
    onUpdate?: (flowRun: FlowRun) => void
  } = {}): Promise<FlowRun> {
    const flowRun = await this.get()

    if (flowRun.state === FlowRunState.RUNNING) {
      throw new Error('Cannot repeat a running flow run.')
    }

    const flowInstanceAccessor = await this.client.flowInstance(
      flowRun.flowInstanceId,
    )

    return flowInstanceAccessor.run({
      nodeKey: flowRun.startNodeKey,
      input: flowRun.input,
      onUpdate,
    })
  }
}
