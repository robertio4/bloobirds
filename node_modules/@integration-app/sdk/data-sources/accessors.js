"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataSourceInstanceAccessor = exports.DataSourceInstancesAccessor = void 0;
const iframe_1 = require("../iframe");
const accessors_1 = require("../accessors");
class DataSourceInstancesAccessor extends accessors_1.ElementInstanceListAccessor {
    constructor(client) {
        super(client, 'data-source-instances');
    }
}
exports.DataSourceInstancesAccessor = DataSourceInstancesAccessor;
class DataSourceInstanceAccessor extends accessors_1.ElementInstanceAccessor {
    constructor(client, selector) {
        super({
            client,
            instancePath: 'data-source-instance',
            selector,
        });
        this.client = client;
    }
    async setup() {
        const id = await this.getId();
        await this.client.post(`/data-source-instances/${id}/setup`);
    }
    async openConfiguration(options) {
        (0, iframe_1.showIframeLoader)();
        const id = await this.getId();
        const uri = this.client.getEmbedUri(`/data-source-instances/${id}/configuration`);
        return (0, iframe_1.openIframe)(uri, {
            onClose: options === null || options === void 0 ? void 0 : options.onClose,
        });
    }
    async getCollection() {
        const id = await this.getId();
        return this.client.get(`/data-source-instances/${id}/collection`);
    }
    async getLocations(request) {
        const id = await this.getId();
        return this.client.get(`/data-source-instances/${id}/locations`, request);
    }
    async findRecords(request = {}) {
        const baseUri = await this.getRecordsBaseUri();
        return this.client.get(baseUri, request);
    }
    async createRecord(request) {
        const baseUri = await this.getRecordsBaseUri();
        return this.client.post(baseUri, request);
    }
    async updateRecord(request) {
        const baseUri = await this.getRecordsBaseUri();
        return this.client.patch(`${baseUri}/${request.id}`, request);
    }
    async deleteRecord(request) {
        const baseUri = await this.getRecordsBaseUri();
        return this.client.patch(`${baseUri}/${request.id}`, request);
    }
    async getRecordsBaseUri() {
        const id = await this.getId();
        return `/data-source-instances/${id}/records`;
    }
}
exports.DataSourceInstanceAccessor = DataSourceInstanceAccessor;
//# sourceMappingURL=accessors.js.map