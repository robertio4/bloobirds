import { IntegrationAppClient } from '..';
import { DataSourceInstance } from '.';
import { FindDataSourceInstancesQuery, UpdateDataSourceInstanceRequest, DataSourceInstanceSelector, CreateDataSourceInstanceRequest } from './api';
import { DataCollectionCreateRequest, DataCollectionCreateResponse, DataCollectionDeleteRequest, DataCollectionDeleteResponse, DataCollectionFindRequest, DataCollectionFindResponse, DataCollectionSpec, DataCollectionUpdateRequest, DataCollectionUpdateResponse, DataDirectoryListRequest, DataDirectoryListResponse } from '../connector-api';
import { OpenConfigurationOptions } from '../iframe';
import { ElementInstanceListAccessor, ElementInstanceAccessor } from '../accessors';
interface OpenDataSourceInstanceConfiguration extends OpenConfigurationOptions {
}
export declare class DataSourceInstancesAccessor extends ElementInstanceListAccessor<DataSourceInstance, FindDataSourceInstancesQuery> {
    constructor(client: IntegrationAppClient);
}
export declare class DataSourceInstanceAccessor extends ElementInstanceAccessor<DataSourceInstance, DataSourceInstanceSelector, CreateDataSourceInstanceRequest, UpdateDataSourceInstanceRequest> {
    client: IntegrationAppClient;
    constructor(client: IntegrationAppClient, selector: string | DataSourceInstanceSelector);
    setup(): Promise<void>;
    openConfiguration(options?: OpenDataSourceInstanceConfiguration): Promise<void>;
    getCollection(): Promise<DataCollectionSpec>;
    getLocations(request?: DataDirectoryListRequest & {
        path?: string;
    }): Promise<DataDirectoryListResponse>;
    findRecords(request?: DataCollectionFindRequest): Promise<DataCollectionFindResponse>;
    createRecord(request: DataCollectionCreateRequest): Promise<DataCollectionCreateResponse>;
    updateRecord(request: DataCollectionUpdateRequest): Promise<DataCollectionUpdateResponse>;
    deleteRecord(request: DataCollectionDeleteRequest): Promise<DataCollectionDeleteResponse>;
    private getRecordsBaseUri;
}
export {};
