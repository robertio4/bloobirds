"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getValueByLocator = exports.DataBuilderFormulaBase = void 0;
const errors_1 = require("../../errors");
const _1 = require(".");
const locators_1 = require("../locators");
const js_convert_case_1 = require("js-convert-case");
class DataBuilderFormulaBase {
    constructor(type, args) {
        this.type = type;
        this.args = args;
        this.type = type;
        this.args = args;
    }
    toObject() {
        return {
            [`$${this.type}`]: this.args,
        };
    }
    toString(_variablesSchema) {
        return (0, js_convert_case_1.toHeaderCase)(this.type);
    }
}
exports.DataBuilderFormulaBase = DataBuilderFormulaBase;
function getValueByLocator(context, locator) {
    let curValue = context.variables;
    const curLocator = [];
    const locatorSteps = (0, locators_1.locatorToSteps)(locator);
    for (let i = 0; i < locatorSteps.length; ++i) {
        const locatorStep = locatorSteps[i];
        if (locatorStep.type == locators_1.DataLocatorStepType.OBJECT_PROPERTY) {
            curValue = executeLocatorStepObjectProperty(curValue, locatorStep);
        }
        else if (locatorStep.type == locators_1.DataLocatorStepType.ARRAY_ITEM) {
            curValue = executeLocatorStepArrayItem(curValue, locatorStep);
        }
        else if (locatorStep.type == locators_1.DataLocatorStepType.CURRENT_ARRAY_ITEM) {
            curValue = executeLocatorStepCurrentArrayItem(context, (0, locators_1.locatorToString)(curLocator));
        }
        else {
            throw new errors_1.BadRequestError(`Unexpected locator step type: ${locatorStep.type}`);
        }
        if ((0, _1.isEmpty)(curValue)) {
            break;
        }
        curLocator.push(locatorStep);
    }
    return (0, _1.isEmpty)(curValue) ? undefined : curValue;
}
exports.getValueByLocator = getValueByLocator;
function executeLocatorStepObjectProperty(value, step) {
    if (typeof value == 'object' && value !== null) {
        value[step.propertyName] = value[step.propertyName];
        return value[step.propertyName];
    }
    else {
        return undefined;
    }
}
function executeLocatorStepArrayItem(value, step) {
    if (Array.isArray(value) && value[step.index]) {
        value[step.index] = value[step.index];
        return value[step.index];
    }
    else {
        return undefined;
    }
}
function executeLocatorStepCurrentArrayItem(context, locator) {
    return context.getCurrentArrayItem(locator);
}
//# sourceMappingURL=base.js.map