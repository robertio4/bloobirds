"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataBuilderFormulaCase = void 0;
const data_filter_1 = require("../../data-filter");
const _1 = require(".");
const __1 = require("..");
const base_1 = require("./base");
const schema_builder_1 = require("../../json-schema/schema-builder");
class DataBuilderFormulaCase extends base_1.DataBuilderFormulaBase {
    constructor(value) {
        super(_1.DataBuilderFormulaType.CASE, value);
        if (!value && !Array.isArray(value) && typeof value !== 'object') {
            this.value = {
                cases: [],
                default: undefined,
            };
        }
        else if (Array.isArray(value)) {
            this.value = {
                cases: value,
                default: undefined,
            };
        }
        else if (typeof value === 'object' && Array.isArray(value === null || value === void 0 ? void 0 : value.cases)) {
            this.value = value;
        }
    }
    getValue(context) {
        var _a;
        if (!this.isValueValid())
            return undefined;
        for (const item of this.value.cases) {
            if (!item || typeof item !== 'object')
                continue;
            if ((0, data_filter_1.doesMatchFilter)(context.variables, item.filter)) {
                return (0, _1.processValue)(item.value, context);
            }
        }
        return (_a = (0, _1.processValue)(this.value.default, context)) !== null && _a !== void 0 ? _a : undefined;
    }
    getSchema(variablesSchema) {
        if (!this.isValueValid())
            return undefined;
        const schemas = this.value.cases
            .map((item) => item.value)
            .filter((value) => value !== undefined)
            .map((value) => (0, __1.buildDataSchema)(value, variablesSchema));
        if (this.value.default) {
            schemas.push((0, __1.buildDataSchema)(this.value.default, variablesSchema));
        }
        return (0, schema_builder_1.mergeSchemas)(schemas);
    }
    isValueValid() {
        var _a;
        return (this.value &&
            typeof this.value === 'object' &&
            Array.isArray((_a = this.value) === null || _a === void 0 ? void 0 : _a.cases));
    }
}
exports.DataBuilderFormulaCase = DataBuilderFormulaCase;
//# sourceMappingURL=case.js.map