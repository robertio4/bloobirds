"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataBuilderFormulaConcat = void 0;
const _1 = require(".");
const __1 = require("..");
const base_1 = require("./base");
const DEFAULT_DELIMITER = '';
class DataBuilderFormulaConcat extends base_1.DataBuilderFormulaBase {
    constructor(options) {
        var _a, _b;
        super(_1.DataBuilderFormulaType.CONCAT, options);
        this.options = options;
        this.delimiter = DEFAULT_DELIMITER;
        this.values = [];
        if (options === null) {
            return;
        }
        this.values = Array.isArray(options) ? options : (_a = options === null || options === void 0 ? void 0 : options.values) !== null && _a !== void 0 ? _a : [];
        this.delimiter = (_b = options.delimiter) !== null && _b !== void 0 ? _b : DEFAULT_DELIMITER;
    }
    getValue(context) {
        if (!this.values.length) {
            return null;
        }
        const computedValues = this.values.map((value) => (0, _1.processValue)(value, context));
        const computedDelimiter = (0, _1.processValue)(this.delimiter, context);
        return computedValues
            .filter((v) => v !== null && v !== undefined && v.toString() !== '')
            .join(computedDelimiter);
    }
    getSchema() {
        return { type: 'string' };
    }
    toString(variablesSchema) {
        const valueStrings = this.values.map((value) => (0, __1.valueToString)(value, variablesSchema));
        if (valueStrings.length) {
            return `Concatenate(${valueStrings.join(', ')})`;
        }
        else {
            return `Concatenate()`;
        }
    }
}
exports.DataBuilderFormulaConcat = DataBuilderFormulaConcat;
//# sourceMappingURL=concat.js.map