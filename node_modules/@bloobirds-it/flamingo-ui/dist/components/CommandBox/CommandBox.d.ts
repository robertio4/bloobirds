import React, { ReactNode } from "react";
export interface CommandBoxProps {
    onSearch: (query: string) => any;
}
type Children = {
    children?: React.ReactElement | React.ReactElement[] | string | number;
};
type Item = {
    id: string;
    action: () => any;
    ref: any;
    group: string;
};
type State = {
    search: string;
    items: Item[];
    searchHistory: string[];
    selectedId: string;
};
type Store = {
    setState: (key: string, value: any) => any;
    snapshot: () => State;
    addItem: (id: string, action: () => any, ref: any, group: string) => void;
    removeItem: (id: string) => any;
    emit: () => void;
    subscribe: (callback: () => void) => () => void;
};
type EmptyProps = {
    renderOnEmpty?: boolean;
};
type EtcType = {
    onKeyDown?: any;
} | any;
declare function useCommandBox<T = any>(selector: (state: State) => T): T;
declare function Item({ action, disabled, children, }: Children & {
    children: React.ReactElement<{
        isSelected: boolean;
    }>;
    action: () => any;
    disabled?: boolean;
}): React.JSX.Element;
declare function SearchBox({ children }: Children): React.JSX.Element;
declare function ProgressBar(): React.JSX.Element;
declare function Input({ ...etc }: EtcType): React.JSX.Element;
declare function List({ children, ...etc }: Children & EtcType): React.JSX.Element;
declare function Group({ header, children, ...etc }: {
    header: ReactNode;
} & Children & EtcType): React.JSX.Element;
declare const pkg: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<HTMLDivElement>> & {
    List: typeof List;
    Item: typeof Item;
    Input: typeof Input;
    ProgressBar: typeof ProgressBar;
    SearchBox: typeof SearchBox;
    Empty: ({ children, renderOnEmpty, ...etc }: {
        children: React.ReactElement<{
            searchHistory: string[];
        }, string | React.JSXElementConstructor<any>>;
    } & EmptyProps) => React.JSX.Element;
    Group: typeof Group;
    useCommandBox: typeof useCommandBox;
    useCommandBoxStore: () => Store;
};
export { pkg as CommandBox };
